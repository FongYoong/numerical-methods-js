{"version":3,"sources":["components/methods/linear/matrix_utils.js","components/methods/linear/Gauss.js"],"names":["MatrixElementEditor","props","ref","React","createRef","onInputChange","value","current","parseInt","isNaN","setState","state","this","column","key","defaultValue","onBlur","onChange","Component","style","display","justifyContent","alignItems","flexDirection","columnSettings","editable","editor","formatter","initialMatrix","columns","name","rows","col_1","col_2","col_3","col_4","initialOutputColumn","createNewColumn","numberOfColumns","newNum","createNewRow","newRow","i","gridTo2DArray","rowsArray","keys","Object","sort","map","row","k","matrixToLatex","matrix","latex","leftBracketOnly","rightBracketOnly","boldRows","transpose","String","raw","rowLength","length","colLength","isBold","b","content","formatMatrixLatex","j","TOUR_STEPS","target","title","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","matrixCard","width","divider","height","marginTop","marginBottom","fab","position","bottom","right","Steps","latexContent","smallScreen","params","styleClasses","useState","currentIteration","setCurrentIteration","results","previousMatrix","originalMatrix","finalMatrix","previousOutput","originalOutput","finalOutput","currentResult","iterations","interchange","pivot","formatLatex","factor","finalLatex","initialLatex","operationLatex","className","direction","justify","xs","item","triggerOnce","id","orientation","onChangeCommitted","event","aria-labelledby","step","marks","min","max","valueLabelDisplay","variant","tex","LinearGauss","methodName","useEffect","document","useMediaQuery","useTheme","breakpoints","down","columnWidth","widthPadding","heightPadding","gridState","setGridState","outputColumnState","setOutputColumnState","columnCallback","add","slice","push","pop","rowCallback","outputColumns","outputRows","modifiedMatrix","JSON","parse","stringify","modifiedOutput","pivotLength","tempMatrixRow","tempOutputElement","divisionByZero","col","console","log","runTour","setRunTour","duration","cascade","rel","href","aria-label","onClick","rowGetter","rowsCount","onGridRowsUpdated","fromRow","toRow","updated","enableCellSelect","headerRowHeight","minColumnWidth","minWidth","rowHeight","minHeight","Math","random","in","arrow","placement","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","action"],"mappings":"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","file":"static/js/8.3c93084f.chunk.js","sourcesContent":["import {formatMatrixLatex} from \"../../utils\";\r\nimport React from \"react\";\r\n\r\nexport class MatrixElementEditor extends React.Component {\r\n    ref = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: props.value };\r\n    }\r\n    getValue() {\r\n        return { [this.props.column.key]: this.state.value };\r\n    }\r\n\r\n    getInputNode() {\r\n        return this.ref.current ? this.ref.current : null;\r\n    }\r\n\r\n    onInputChange = () => {\r\n        let value = this.ref.current.value;\r\n        try {\r\n            value = parseInt(value);\r\n            if (isNaN(value)) {\r\n                value = 0;\r\n            }\r\n        }\r\n        catch {\r\n            value = 0;\r\n        }\r\n        this.setState({ value: value });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <input ref={this.ref} defaultValue={this.state.value} onBlur={this.onInputChange} onChange={this.onInputChange} />\r\n        )\r\n    }\r\n}\r\n\r\nconst style = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n};\r\n\r\nexport default class WrapperFormatter extends React.Component {\r\n\r\n    render() {\r\n        return (<div style={style}>{this.props.value}</div>)\r\n    }\r\n}\r\n\r\nconst columnSettings = {\r\n    editable: true,\r\n    editor: MatrixElementEditor,\r\n    formatter : WrapperFormatter,\r\n};\r\n\r\nexport const initialMatrix = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 1, col_3: -3, col_4: 4 },\r\n        { col_1: 2, col_2: -2, col_3: 1, col_4: 0 },\r\n        { col_1: 2, col_2: -1, col_3: -2, col_4: 4 },\r\n        { col_1: -6, col_2: 4, col_3: 3, col_4: -8 },\r\n    ]\r\n}\r\nexport const initialOutputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -1, col_3: 0, col_4: 1},\r\n    ]\r\n}\r\n\r\nexport const createNewColumn = (numberOfColumns) => {\r\n    const newNum = numberOfColumns + 1;\r\n    return { key: `col_${newNum}`, name: `C${newNum}`, ...columnSettings };\r\n}\r\n\r\nexport const createNewRow = (numberOfColumns) => {\r\n    let newRow = {};\r\n    for (let i = 1; i <= numberOfColumns; i++) {\r\n        newRow[`col_${i}`] = 0;\r\n    }\r\n    return newRow;\r\n}\r\n\r\nexport const gridTo2DArray = (rowsArray) => {\r\n    let keys = Object.keys(rowsArray[0]).sort();\r\n    let result = rowsArray.map((row) => {\r\n        return keys.map((k) => row[k]);\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const matrixToLatex = (matrix, {leftBracketOnly=false, rightBracketOnly=false, boldRows=[], transpose=false}) => {\r\n    let latex;\r\n    if (rightBracketOnly) {\r\n        latex = String.raw`\\left|\\matrix{`;\r\n    }\r\n    else {\r\n        latex = String.raw`\\left[\\matrix{`\r\n    }\r\n    const rowLength = matrix.length;\r\n    const colLength = matrix[0].length;\r\n    if (rowLength === 1) {\r\n        // 1D array\r\n        for (let i = 0; i < colLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            const content = String.raw` ${formatMatrixLatex(matrix[0][i])} `;\r\n            if (isBold) {\r\n                latex += String.raw` \\bf{${content}} `;\r\n            }\r\n            else {\r\n                latex += String.raw`${content}`;\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            for (let j = 0; j < colLength; j++){\r\n                let content = String.raw` ${formatMatrixLatex(matrix[i][j])} `;\r\n                if (isBold) {\r\n                    latex += String.raw` \\bf{${content}} `;\r\n                }\r\n                else {\r\n                    latex += String.raw`${content}`;\r\n                }\r\n                if (j !== colLength - 1) {\r\n                    latex += String.raw`&`;\r\n                }\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    if (leftBracketOnly) {\r\n        latex += String.raw`}\\right|`;\r\n    }\r\n    else {\r\n        latex += String.raw`}\\right]`;\r\n    }\r\n    return latex;\r\n}","import {formatLatex, formatMatrixLatex} from \"../../utils\";\r\nimport {initialMatrix, initialOutputColumn, createNewColumn, createNewRow, gridTo2DArray, matrixToLatex} from \"./matrix_utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".matrix-col-input\",\r\n        title: \"Column\",\r\n        content:\r\n        \"Add/Remove columns\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".matrix-row-input\",\r\n        title: \"Row\",\r\n        content:\r\n        \"Add/Remove rows\",\r\n    },\r\n    {\r\n        target: \".matrix-input\",\r\n        title: \"Matrix\",\r\n        content:\r\n        \"Specify the input matrix here.\",\r\n    },\r\n    {\r\n        target: \".output-col-input\",\r\n        title: \"Output\",\r\n        content:\r\n        \"Specify the output.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(0.5),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.primary,\r\n        margin: theme.spacing(1),\r\n    },\r\n    container: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    card: {\r\n        margin: theme.spacing(0),\r\n    },\r\n    cardContent: {\r\n        overflow: 'auto',\r\n        \"& > *\": {\r\n            margin: theme.spacing(0.5)\r\n        }\r\n    },\r\n    overflow: {\r\n        overflow: 'auto',\r\n    },\r\n    matrixCard: {\r\n        width: \"60vw\",\r\n    },\r\n    divider: {\r\n        width: '500 px',\r\n        height: '100px',\r\n        marginTop: '20px',\r\n        marginBottom: '20px',\r\n    },\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(4),\r\n        right: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction LinearGauss({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n        \r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    // Grid\r\n    const columnWidth = smallScreen ? 45 : 60;\r\n    const rowHeight = smallScreen ? 35 : 35;\r\n    const widthPadding = smallScreen ? 10 : 100;\r\n    const heightPadding = smallScreen ? 5 : 20;\r\n    const [gridState, setGridState] = useState(initialMatrix);\r\n    const [outputColumnState, setOutputColumnState] = useState(initialOutputColumn);\r\n    const onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n        const rows = gridState.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = { ...rows[i], ...updated };\r\n        }\r\n        setGridState({\r\n            ...gridState, rows\r\n        });\r\n    };\r\n    const onOutputColumnStateUpdated = ({ fromRow, toRow, updated }) => {\r\n        const rows = outputColumnState.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = { ...rows[i], ...updated };\r\n        }\r\n        setOutputColumnState({\r\n            ...outputColumnState, rows\r\n        });\r\n    };\r\n    const columnCallback = (add) => {\r\n        return () => {\r\n            const columns = gridState.columns.slice();\r\n            const rows = gridState.rows.slice();\r\n            if (add) {\r\n                columns.push(createNewColumn(columns.length));\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    rows[i][`col_${columns.length}`] = 0;\r\n                }\r\n            }\r\n            else {\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    delete rows[i][`col_${columns.length}`];\r\n                }\r\n                columns.pop();\r\n            }\r\n            setGridState({columns, rows});\r\n        };\r\n    }\r\n    const rowCallback = (add) => {\r\n        return () => {\r\n            const rows = gridState.rows.slice();\r\n            const outputColumns = outputColumnState.columns.slice();\r\n            const outputRows = outputColumnState.rows.slice();\r\n            if (add) {\r\n                rows.push(createNewRow(gridState.columns.length));\r\n                outputColumns.push(createNewColumn(outputColumns.length));\r\n                outputRows[0][`col_${outputColumns.length}`] = 0;\r\n            }\r\n            else {\r\n                rows.pop();\r\n                for (let i = 0; i < outputRows.length; i++) {\r\n                    delete outputRows[i][`col_${outputColumns.length}`];\r\n                }\r\n                outputColumns.pop();\r\n            }\r\n            setGridState({...gridState, rows});\r\n            setOutputColumnState({columns: outputColumns, rows: outputRows});\r\n        };\r\n    }\r\n\r\n    // Solve\r\n    let solve = true;\r\n    const originalMatrix = gridTo2DArray(gridState.rows);\r\n    let modifiedMatrix = JSON.parse(JSON.stringify(originalMatrix));\r\n    const originalOutput = gridTo2DArray(outputColumnState.rows);\r\n    let modifiedOutput = JSON.parse(JSON.stringify(originalOutput));\r\n    const rowLength = gridState.rows.length; // row dimension, also the output dimension\r\n    const colLength = gridState.columns.length; // column dimension\r\n    let results = [];\r\n    // Check is empty matrix\r\n    // Don't forget to slice every iteration\r\n    // Check for division by zero\r\n    let pivotLength = rowLength < colLength ? rowLength : colLength;\r\n    \r\n    for (let pivot  = 0; pivot < pivotLength - 1; pivot++) {\r\n        for (let row  = pivot + 1; row < pivotLength; row++) {\r\n            if (modifiedMatrix[row - 1][pivot] === 0 && modifiedMatrix[row][pivot] !== 0) {\r\n                let tempMatrixRow = modifiedMatrix[row - 1];\r\n                modifiedMatrix[row - 1] = modifiedMatrix[row];\r\n                modifiedMatrix[row] = tempMatrixRow;\r\n                let tempOutputElement = modifiedOutput[0][row - 1];\r\n                modifiedOutput[0][row - 1] = modifiedOutput[0][row];\r\n                modifiedOutput[0][row] = tempOutputElement;\r\n                    results.push({\r\n                    finalMatrix: JSON.parse(JSON.stringify(modifiedMatrix)),\r\n                    finalOutput: JSON.parse(JSON.stringify(modifiedOutput)),\r\n                    interchange: true,\r\n                    pivot: pivot + 1,\r\n                    row: row + 1,\r\n                });\r\n            }\r\n        }\r\n        for (let row  = pivot + 1; row < pivotLength; row++) {\r\n            let factor = modifiedMatrix[row][pivot] / modifiedMatrix[pivot][pivot];\r\n            let divisionByZero = false;\r\n            if (factor === 0) {\r\n                divisionByZero = true;\r\n            }\r\n            else if (isNaN(factor)) {\r\n                continue;\r\n            }\r\n            if (!divisionByZero) {\r\n                for (let col  = 0; col < colLength; col++) {\r\n                    modifiedMatrix[row][col] -= factor * modifiedMatrix[pivot][col];\r\n                }\r\n                modifiedOutput[0][row] -= factor * modifiedOutput[0][pivot];\r\n            }\r\n            results.push({\r\n                finalMatrix: JSON.parse(JSON.stringify(modifiedMatrix)),\r\n                finalOutput: JSON.parse(JSON.stringify(modifiedOutput)),\r\n                interchange: false,\r\n                factor,\r\n                pivot: pivot + 1,\r\n                row: row + 1,\r\n            });\r\n        }\r\n    }\r\n    \r\n    console.log(results);\r\n    let iterations = results.length;\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true)\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {originalMatrix, originalOutput, rowLength, colLength, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        This method is applied to matrices in the form of\r\n                        <MathComponent display={false} tex={String.raw`\\ Ax=B`} />\r\n                        . <Link rel=\"noopener noreferrer\" href=\"https://people.richland.edu/james/lecture/m116/matrices/pivot.html\" target=\"_blank\" aria-label=\"Pivoting\">Pivoting</Link> is also implemented.\r\n                        No backsubstitution or Gauss-Jordan form due to &nbsp;\r\n                        <Link color=\"error\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=vIci3C4JkL0\" target=\"_blank\" aria-label=\"laziness\">laziness</Link>.\r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Grid container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                        <Grid xs item className=\"matrix-col-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"flex-start\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Columns:\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={columnCallback(false)}>\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={columnCallback(true)}>\r\n                                                <AddCircleOutlineOutlinedIcon  />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"matrix-row-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"flex-start\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Rows:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={rowCallback(false)} >\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={rowCallback(true)} >\r\n                                                <AddCircleOutlineOutlinedIcon />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        \r\n                                        <Grid xs item>\r\n                                            <Typography variant=\"h6\">\r\n                                                Matrix, A:\r\n                                            </Typography>\r\n                                        </Grid>\r\n\r\n                                        <Grid xs item className=\"matrix-input\" container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                <ReactDataGrid\r\n                                                    columns={gridState.columns}\r\n                                                    rowGetter={i => gridState.rows[i]}\r\n                                                    rowsCount={gridState.rows.length}\r\n                                                    onGridRowsUpdated={onGridRowsUpdated}\r\n                                                    enableCellSelect={true}\r\n                                                    headerRowHeight={1}\r\n                                                    minColumnWidth={columnWidth}\r\n                                                    minWidth={columnWidth * gridState.columns.length + widthPadding}\r\n                                                    rowHeight={rowHeight}\r\n                                                    minHeight={rowHeight * gridState.rows.length + heightPadding}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid xs item>\r\n                                            <Typography variant=\"h6\">\r\n                                                Output, B:\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        \r\n                                        <Grid xs item className=\"output-col-input\" container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                <ReactDataGrid\r\n                                                    columns={outputColumnState.columns}\r\n                                                    rowGetter={i => outputColumnState.rows[i]}\r\n                                                    rowsCount={outputColumnState.rows.length}\r\n                                                    onGridRowsUpdated={onOutputColumnStateUpdated}\r\n                                                    enableCellSelect={true}\r\n                                                    headerRowHeight={1}\r\n                                                    minColumnWidth={columnWidth}\r\n                                                    minWidth={columnWidth * outputColumnState.columns.length + widthPadding}\r\n                                                    rowHeight={rowHeight}\r\n                                                    minHeight={rowHeight * outputColumnState.rows.length + heightPadding}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>                                    \r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps smallScreen={smallScreen} params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({smallScreen, params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let results = params.results;\r\n    let previousMatrix = currentIteration===1 ? params.originalMatrix : results[currentIteration - 2].finalMatrix;\r\n    let previousOutput = currentIteration===1 ? params.originalOutput : results[currentIteration - 2].finalOutput;\r\n    let currentResult = results[currentIteration - 1];\r\n    let latexContent;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        `;\r\n        if (!currentResult.interchange) {\r\n            latexContent += String.raw`\r\n            \\begin{array}{lcl}\r\n            \\\\ Factor &=& \\frac{A_{${currentResult.row}${currentResult.pivot}}}{A_{${currentResult.pivot}${currentResult.pivot}}}\r\n            \\\\        &=& ${formatLatex(currentResult.factor)}\r\n            \\end{array}\r\n            `;\r\n        }\r\n        latexContent += String.raw`\\\\ \\begin{array}{lcl} `;\r\n        const boldRows = currentResult.interchange ? [currentResult.row - 1, currentResult.row] : [currentResult.row, currentResult.pivot];\r\n        const finalLatex= String.raw`\\overbrace{${matrixToLatex(currentResult.finalMatrix, {leftBracketOnly:true, boldRows: boldRows})}}^{A}\r\n        \\overbrace{${matrixToLatex(currentResult.finalOutput, {rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n        if (!currentResult.interchange && currentResult.factor === 0) {\r\n            latexContent += String.raw`\r\n                \\\\ \\text{The factor is zero, so no elimination is done here.}\r\n                \\\\\r\n                \\\\ ${finalLatex}\r\n            `;\r\n        }\r\n        else {\r\n            \r\n            const initialLatex = String.raw`\r\n            \\overbrace{${matrixToLatex(previousMatrix, {leftBracketOnly: true, boldRows: boldRows})}}^{A}\r\n            \\overbrace{${matrixToLatex(previousOutput, {rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n            const operationLatex = currentResult.interchange ?\r\n            String.raw`R_{${currentResult.row - 1}} \\Leftrightarrow R_{${currentResult.row}}`\r\n            : String.raw`R_{${currentResult.row}} = R_{${currentResult.row}}-${formatMatrixLatex(currentResult.factor)}R_{${currentResult.pivot}}`;\r\n            if (smallScreen) {\r\n                latexContent += String.raw`\r\n                \\\\ ${initialLatex}\r\n                \\\\\r\n                \\\\ \\begin{array}{lcl}\r\n                       & \\downarrow &\r\n                    \\\\ & ${operationLatex} &\r\n                    \\\\ & \\downarrow &\r\n                    \\end{array}\r\n                \\\\\r\n                \\\\ ${finalLatex}\r\n                `;\r\n            }\r\n            else {\r\n                latexContent += String.raw`\r\n                \\\\ ${initialLatex}\r\n                & \\overrightarrow{${operationLatex}}\r\n                & ${finalLatex}\r\n                `;\r\n            }\r\n        }\r\n        latexContent += String.raw`\\end{array}`;\r\n        \r\n\r\n        latexContent += String.raw`\r\n        \\\\\r\n        \\begin{array}{lcl}\r\n        \\\\\r\n        \\end{array}\r\n        `;\r\n        latexContent += String.raw`\\end{array}`;\r\n    }\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n            <Grid className=\"results\" container direction=\"column\" alignItems=\"center\" justify=\"flex-start\">\r\n                <Grid xs item className=\"iteration-slider\">\r\n                    <Slide direction=\"left\" triggerOnce>\r\n                        <Box id=\"iteration-slider\" width=\"70vw\">\r\n                            <Slider\r\n                                orientation=\"horizontal\"\r\n                                onChangeCommitted={(event, value) => {setCurrentIteration(value)}}\r\n                                defaultValue={1}\r\n                                aria-labelledby=\"discrete-slider-small-steps\"\r\n                                step={1}\r\n                                marks\r\n                                min={1}\r\n                                max={params.iterations}\r\n                                valueLabelDisplay=\"on\"\r\n                            />\r\n                        </Box>\r\n                    </Slide>\r\n                </Grid>\r\n                <Grid xs item className=\"step-math\">\r\n                    <Slide direction=\"right\" triggerOnce>\r\n                        <Card className={styleClasses.card}>\r\n                            <CardContent className={styleClasses.cardContent}>\r\n                                <Typography variant=\"h6\">\r\n                                    Iteration {currentIteration}:\r\n                                </Typography>\r\n                                <MathComponent tex={latexContent}/>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Slide>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LinearGauss;"],"sourceRoot":""}