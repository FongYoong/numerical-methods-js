{"version":3,"sources":["components/methods/nonlinear/Secant.js","components/Graph.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","Steps","latexContent","graphCallback","params","styleClasses","useState","currentIteration","setCurrentIteration","currentResult","results","iterations","previousXLatex","String","raw","perturbedXLatex","newXLatex","formatLatex","previousX","perturbedX","funcResult","funcResult2","newX","errorX","calculator","current","setExpression","id","Desmos","BLUE","latex","functionLatex","GREEN","lineStyle","DOTTED","perturbation","ORANGE","pointStyle","POINT","label","showLabel","RED","smallScreen","useMediaQuery","useTheme","breakpoints","down","className","in","severity","direction","alignItems","justify","xs","item","triggerOnce","height","width","orientation","onChange","event","value","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","duration","variant","math","block","addStyles","NonlinearSecant","methodName","markdown","useEffect","document","functionValue","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","traverse","node","path","parent","type","mathjsKeywords","includes","name","e","setPerturbation","perturbationError","perturbationErrorText","setIterations","iterError","iterErrorText","Number","isInteger","initialX","setInitialX","initialXError","initialXErrorText","isNaN","hasError","solve","isValidMath","i","evaluate","x","Math","abs","push","runTour","setRunTour","cascade","disabled","mathField","mathquillDidMount","parseFloat","error","toString","helperText","parseInt","arrow","placement","aria-label","onClick","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","DialogTitle","withStyles","root","closeButton","top","grey","props","children","classes","onClose","other","disableTypography","DialogContent","defaultIteration","desmosDiv","useRef","updateGraph","useCallback","updateSettings","xAxisLabel","yAxisLabel","xAxisArrowMode","POSITIVE","yAxisArrowMode","style","keypad","expressions","expressionsTopbar","description","component","ref","Graph","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","open","dividers"],"mappings":"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","file":"static/js/38.6d5a6b16.chunk.js","sourcesContent":["import {isValidMath, mathjsKeywords, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport Graph from \"../../Graph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".perturbation-input\",\r\n        title: \"Perturbation\",\r\n        content:\r\n            \"Specify the perturbation fraction. Higher values produce a better approximation.\",\r\n    },\r\n    {\r\n        target: \".iteration-input\",\r\n        title: \"Iterations\",\r\n        content:\r\n            \"Specify the number of iterations to apply the modified secant method.\",\r\n    },\r\n    {\r\n        target: \".initialX-input\",\r\n        title: \"Initial x value\",\r\n        content:\r\n            \"Specify the initial/starting value of x.\",\r\n    },\r\n    {\r\n        target: \".results\",\r\n        title: \"Results\",\r\n        content:\r\n            \"The results are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps for each iteration are shown here.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction NonlinearSecant({methodName, markdown}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Derivative\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`x-\\cos\\left( x\\right)`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n        functionValue.traverse(function (node, path, parent) {\r\n            if (node.type === 'SymbolNode' && !mathjsKeywords.includes(node.name)) {\r\n                if (node.name !== 'x') {\r\n                    throw \"variableName\";\r\n                }\r\n            }\r\n        });\r\n    }\r\n    catch(e) {\r\n        functionError = true;\r\n        functionErrorText = e === \"variableName\" ? \"Only x variable is allowed.\" :  \"Invalid equation!\";\r\n    }\r\n\r\n    // Perturbation\r\n    const [perturbation, setPerturbation] = useState(0.01);\r\n    let perturbationError = false;\r\n    let perturbationErrorText = \"\";\r\n    if (perturbation <= 0) {\r\n        perturbationError = true;\r\n        perturbationErrorText = \"Perturbation must be a positive integer!\";\r\n    }\r\n\r\n    // Iterations\r\n    const [iterations, setIterations] = useState(10);\r\n    let iterError = false;\r\n    let iterErrorText = \"\";\r\n    if (!Number.isInteger(iterations) || iterations <= 0) {\r\n        iterError = true;\r\n        iterErrorText = \"Iterations must be a positive integer!\";\r\n    }\r\n\r\n    // Initial x\r\n    const [initialX, setInitialX] = useState(3.5);\r\n    let initialXError = false;\r\n    let initialXErrorText = \"\";\r\n    if (isNaN(initialX)) {\r\n        initialXError = true;\r\n        initialXErrorText = \"Initial x must be a number!\";\r\n    }\r\n\r\n    let hasError = functionError || perturbationError || iterError || initialXError;\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let results = [];\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        for (let i = 0; i < iterations; i++) {\r\n            let previousX = (i === 0) ? initialX: results[i - 1].newX;\r\n            let perturbedX = previousX * (1 + perturbation);\r\n            let funcResult, funcResult2;\r\n            try {\r\n                funcResult = functionValue.evaluate({x : previousX});\r\n                funcResult2 = functionValue.evaluate({x : perturbedX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            \r\n            let newX = previousX - perturbation * previousX * funcResult / (funcResult2 - funcResult);\r\n            let errorX = Math.abs(newX - previousX);\r\n            results.push({\r\n                previousX,\r\n                perturbedX,\r\n                funcResult,\r\n                funcResult2,\r\n                newX,\r\n                errorX,\r\n            });\r\n        }\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true);\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {functionLatex, perturbation, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName={methodName} markdown={markdown} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function, f(x):\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"perturbation-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Perturbation fraction, <TeX math={String.raw`\\delta`} />:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setPerturbation(parseFloat(event.target.value))}\r\n                                        error={perturbationError}\r\n                                        label={perturbationError?\"Error\":\"\"}\r\n                                        defaultValue={perturbation.toString()}\r\n                                        helperText={perturbationErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"iteration-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iterations:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setIterations(parseInt(event.target.value))}\r\n                                        error={iterError}\r\n                                        label={iterError?\"Error\":\"\"}\r\n                                        defaultValue={iterations.toString()}\r\n                                        helperText={iterErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"initialX-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Initial value, <TeX math={String.raw`x_0`} />:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setInitialX(parseFloat(event.target.value))}\r\n                                        error={initialXError}\r\n                                        label={initialXError?\"Error\":\"\"}\r\n                                        defaultValue={initialX.toString()}\r\n                                        helperText={initialXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n\r\n    let hasError = false;\r\n    let errorText = \"\";\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let previousXLatex = String.raw`x_{${currentIteration - 1}}`;\r\n        let perturbedXLatex = String.raw`${previousXLatex} + \\delta \\cdot ${previousXLatex}`;\r\n        let newXLatex = String.raw`x_{${currentIteration}}`;\r\n        latexContent =\r\n        String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\begin{array}{lcl}\r\n        \\\\ ${previousXLatex} &=& ${formatLatex(currentResult.previousX)}\r\n        \\\\ ${perturbedXLatex} &=& ${formatLatex(currentResult.perturbedX)}\r\n        \\\\ f(${previousXLatex}) &=& ${formatLatex(currentResult.funcResult)}\r\n        \\\\ f(${perturbedXLatex}) &=& ${formatLatex(currentResult.funcResult2)}\r\n        \\\\ ${newXLatex} &=& ${previousXLatex} - \\frac{\\delta \\cdot ${previousXLatex} \\cdot f(${previousXLatex})}{f(${perturbedXLatex}) - f(${previousXLatex})}\r\n        \\\\              &=& ${formatLatex(currentResult.newX)}\r\n        \\end{array}\r\n        \\\\\r\n        \\begin{array}{lcl}\r\n        \\\\ Error &=& |${newXLatex} - ${previousXLatex}|\r\n        \\\\       &=& |${formatLatex(currentResult.errorX)}|\r\n        \\end{array}\r\n        \\end{array}\r\n        `;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: params.functionLatex});\r\n            calculator.current.setExpression({ id: 'derivative', color: Desmos.Colors.GREEN, lineStyle: Desmos.Styles.DOTTED, latex:\r\n                `(y-${currentResult.funcResult})/(x-${currentResult.previousX})=${(currentResult.funcResult2 - currentResult.funcResult) / (params.perturbation * currentResult.previousX)}` });\r\n            calculator.current.setExpression({ id: 'initialX', color: Desmos.Colors.ORANGE, pointStyle: Desmos.Styles.POINT, label: \"initialX\", showLabel:true, latex:\r\n                `(${currentResult.previousX}, ${currentResult.funcResult})` });\r\n            calculator.current.setExpression({ id: 'root', color: Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, label: \"Root\", showLabel:true, latex:\r\n                `(${currentResult.newX}, 0)` });\r\n        }\r\n    }\r\n\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                <Slider\r\n                                    orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                    onChange={(event, value) => setCurrentIteration(value)}\r\n                                    defaultValue={1}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"step-math\">\r\n                            <Zoom duration={500} triggerOnce>\r\n                                <Card className={styleClasses.card}>\r\n                                    <CardContent className={styleClasses.cardContent}>\r\n                                        <Typography variant=\"h6\">\r\n                                            Iteration {currentIteration}:\r\n                                        </Typography>\r\n                                        <TeX math={latexContent} block />\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Zoom>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid xs item className=\"graph-button\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            <Graph params={{currentIteration, graphCallback, smallScreen, ...params}} />\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NonlinearSecant;","import {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.iterations > 0 ? params.results[currentIteration - 1] : null;\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            calculator.current.updateSettings({xAxisLabel: 'x', yAxisLabel: 'y',  xAxisArrowMode: Desmos.AxisArrowModes.POSITIVE, yAxisArrowMode: Desmos.AxisArrowModes.POSITIVE });\r\n            params.graphCallback(calculator, currentResult, currentIteration);\r\n        }\r\n    }, [calculator, currentResult, params, currentIteration]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            {params.description && <Box component=\"div\" overflow=\"visible\">\r\n                    <Typography variant=\"h6\">\r\n                        {params.description}\r\n                    </Typography>\r\n                </Box>\r\n            }\r\n            {params.functionLatex && <Box component=\"div\" overflow=\"visible\">\r\n                    <TeX math={`${params.functionLatex}`} block />\r\n                </Box>\r\n            }\r\n            <Typography variant=\"h6\">\r\n                {params.iterations > 0 ? `Iteration ${currentIteration}:` : <br />}\r\n            </Typography>\r\n            {params.iterations > 0 &&\r\n                <Box width=\"70%\">\r\n                    <Slider\r\n                        orientation=\"horizontal\"\r\n                        onChange={(event, value) => setCurrentIteration(value)}\r\n                        defaultValue={defaultIteration}\r\n                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                        step={1}\r\n                        marks\r\n                        min={1}\r\n                        max={params.iterations}\r\n                        valueLabelDisplay=\"auto\"\r\n                    />\r\n                </Box>\r\n            }\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction Graph({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Graph;"],"sourceRoot":""}