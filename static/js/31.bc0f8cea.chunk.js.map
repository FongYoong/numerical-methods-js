{"version":3,"sources":["components/methods/integral/Midpoint.js","components/Graph.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","addStyles","IntegralMidpoint","methodName","markdown","useEffect","document","functionValue","styleClasses","smallScreen","useMediaQuery","useTheme","breakpoints","down","useState","String","raw","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","traverse","node","path","parent","type","mathjsKeywords","includes","name","evaluate","x","e","lowerX","setLowerX","upperX","setUpperX","intervalError","lowerXErrorText","upperXErrorText","isNaN","subIntervals","setSubIntervals","subIntervalsError","subIntervalsErrorText","Number","isInteger","latexContent","graphCallback","hasError","solve","isValidMath","width","results","integralResult","i","x1","f","push","formatLatex","calculator","currentResult","current","setExpression","id","Desmos","BLUE","latex","RED","GREEN","BLACK","pointStyle","POINT","label","showLabel","runTour","setRunTour","className","duration","triggerOnce","cascade","variant","direction","alignItems","justify","xs","item","disabled","onChange","mathField","mathquillDidMount","in","severity","event","parseInt","value","error","defaultValue","toString","helperText","parseFloat","math","block","params","iterations","arrow","placement","aria-label","onClick","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","DialogTitle","withStyles","root","closeButton","top","grey","props","children","classes","onClose","other","disableTypography","DialogContent","currentIteration","setCurrentIteration","defaultIteration","desmosDiv","useRef","updateGraph","useCallback","updateSettings","xAxisLabel","yAxisLabel","xAxisArrowMode","POSITIVE","yAxisArrowMode","style","height","keypad","expressions","expressionsTopbar","description","component","orientation","aria-labelledby","step","marks","min","max","valueLabelDisplay","ref","Graph","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","open","dividers"],"mappings":"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","file":"static/js/31.bc0f8cea.chunk.js","sourcesContent":["import {isValidMath, mathjsKeywords, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport Graph from \"../../Graph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".subIntervals-input\",\r\n        title: \"Order\",\r\n        content:\r\n            \"Specify the number of subintervals, N.\",\r\n    },\r\n    {\r\n        target: \".interval-input\",\r\n        title: \"Interval\",\r\n        content:\r\n            \"Select the lower and upper bounds of x\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction IntegralMidpoint({methodName, markdown}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`\\left(x-3\\right)^{3}+2\\left(x-3\\right)^{2}-1`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n        functionValue.traverse(function (node, path, parent) {\r\n            if (node.type === 'SymbolNode' && !mathjsKeywords.includes(node.name)) {\r\n                if (node.name !== 'x') {\r\n                    throw \"variableName\";\r\n                }\r\n            }\r\n        });\r\n        functionValue.evaluate({x : 0});\r\n    }\r\n    catch(e) {\r\n        functionError = true;\r\n        functionErrorText = e === \"variableName\" ? \"Only x variable is allowed.\" :  \"Invalid equation!\";\r\n    }\r\n\r\n    // Interval\r\n    const [lowerX, setLowerX] = useState(1);\r\n    const [upperX, setUpperX] = useState(4);\r\n    let intervalError = false;\r\n    let lowerXErrorText = \"\";\r\n    let upperXErrorText = \"\";\r\n    if (isNaN(lowerX)) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"x value cannot be empty!\";\r\n    }\r\n    if (isNaN(upperX)) {\r\n        intervalError = true;\r\n        upperXErrorText = \"x value cannot be empty!\";\r\n    }\r\n    if (lowerX >= upperX) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"Lower x must be lower than upper x!\";\r\n        upperXErrorText = \"Upper x must be higher than lower x!\";\r\n    }\r\n\r\n    // Subintervals\r\n    const [subIntervals, setSubIntervals] = useState(10);\r\n    let subIntervalsError = false;\r\n    let subIntervalsErrorText = \"\";\r\n    if (isNaN(subIntervals) || !Number.isInteger(subIntervals) || subIntervals <= 0) {\r\n        subIntervalsError = true;\r\n        subIntervalsErrorText = \"Subintervals must be a positive integer!\";\r\n    }\r\n\r\n    let hasError = functionError || intervalError || subIntervalsError;\r\n\r\n    // Solve\r\n    let latexContent, graphCallback;\r\n    let solve = false;\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        const width = (upperX - lowerX) / subIntervals;\r\n        let results = [];\r\n        let integralResult = 0;\r\n        for (let i = 0; i < subIntervals; i++) {\r\n            const x1 = lowerX + i * width;\r\n            const x2 = x1 + width;\r\n            const x = (x1 + x2) / 2;\r\n            let f = functionValue.evaluate({x : x});\r\n            integralResult += f;\r\n            results.push(f);\r\n        }\r\n        integralResult *= width; \r\n        \r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\begin{array}{lcl}\r\n        \\\\ h &=& \\frac{ x_{upper} - x_{lower} }{N}\r\n        \\\\   &=& ${formatLatex(width)}\r\n        \\end{array}\r\n        \\\\\r\n        \\\\ x_i = x_{lower} + i \\cdot h\r\n        \\\\ x_{i+1} = x_i + h\r\n        \\\\\r\n        \\\\ \\hline\r\n        \\begin{array}{lcl}\r\n        \\\\ \\int_{${lowerX}}^{${upperX}} f(x) dx &=& h \\sum_{i=1}^{${subIntervals}} \\left[ f(\\frac{x_i + x_{i+1}}{2}) \\right]\r\n        \\\\`;\r\n        latexContent += String.raw`\r\n        \\\\ &=& ${formatLatex(width)} [`;\r\n        for (let i = 0; i < subIntervals; i++) {\r\n            latexContent += String.raw`f(\\frac{${formatLatex(lowerX + i * width)} + ${formatLatex(lowerX + (i+1) * width)}}{2}) ${i===subIntervals - 1 ? \"\" : \"+\"}`;\r\n        }\r\n        latexContent += String.raw`\r\n        ]\r\n        \\\\\r\n        \\\\ &=& ${formatLatex(width)} [`;\r\n        for (let i = 0; i < subIntervals; i++) {\r\n            latexContent += String.raw`${formatLatex(results[i])} ${i===subIntervals - 1 ? \"\" : \"+\"}`;\r\n        }\r\n        latexContent += String.raw`\r\n        ]\r\n        \\\\\r\n        \\\\ &=& ${formatLatex(integralResult)}\r\n        \\end{array}\\end{array}\r\n        `;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: \"f(x)=\"+functionLatex});\r\n            calculator.current.setExpression({ id: 'a', latex: \"a=\"+lowerX});\r\n            calculator.current.setExpression({ id: 'b', latex: \"b=\"+upperX});\r\n            calculator.current.setExpression({ id: 'N', latex: \"N=\"+subIntervals});\r\n            calculator.current.setExpression({ id: 'L', latex: String.raw`L=\\left[a,\\ a+\\frac{\\left(b-a\\right)}{N},\\ a+\\frac{2\\left(b-a\\right)}{N},...,a+\\frac{\\left(N-1\\right)\\left(b-a\\right)}{N}\\right]`});\r\n            calculator.current.setExpression({ id: 'R', latex: String.raw`R=\\left[a+\\frac{\\left(b-a\\right)}{N},a+\\frac{2\\left(b-a\\right)}{N},\\ ...,b\\right]`});\r\n            calculator.current.setExpression({ id: 'M', latex: String.raw`M=\\frac{\\left(f\\left(R\\right)-f\\left(L\\right)\\right)}{R-L}`});\r\n            calculator.current.setExpression({ id: 'm', latex: String.raw`m=\\left[a+\\frac{.5\\left(b-a\\right)}{N},a+\\frac{3}{2}\\cdot\\frac{\\left(b-a\\right)}{N},...,b-\\frac{\\left(\\frac{1}{2}\\right)\\left(b-a\\right)}{N}\\right]`});\r\n            calculator.current.setExpression({ id: 'xPos', color: Desmos.Colors.RED, latex: String.raw`x=R\\left\\{0\\le y\\le f\\left(m\\right)\\left\\{L\\le x\\le R\\right\\}\\right\\}`});\r\n            calculator.current.setExpression({ id: 'xNeg', color: Desmos.Colors.GREEN, latex: String.raw`x=R\\left\\{0>y>f\\left(m\\right)\\left\\{L\\le x\\le R\\right\\}\\right\\}`});\r\n            calculator.current.setExpression({ id: 'positive', color: Desmos.Colors.GREEN, latex: String.raw`0\\le y\\le f\\left(m\\right)\\left\\{L\\le x\\le R\\right\\}`});\r\n            calculator.current.setExpression({ id: 'negative', color: Desmos.Colors.RED, latex: String.raw`0\\ge y\\ge f\\left(m\\right)\\left\\{L\\le x\\le R\\right\\}`});\r\n            for (let i = 0; i < subIntervals; i++) {\r\n                const x1 = lowerX + i * width;\r\n                const x2 = x1 + width;\r\n                const x = (x1 + x2) / 2;\r\n                calculator.current.setExpression({ id: i, color: Desmos.Colors.BLACK, pointStyle: Desmos.Styles.POINT, label: i + 1, showLabel: subIntervals < 20, latex: String.raw`(${x}, ${results[i]})`});\r\n            }\r\n        }\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true);\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName={methodName} markdown={markdown} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        \r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function:\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"subIntervals-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Subintervals, N:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setSubIntervals(parseInt(event.target.value))}\r\n                                        error={subIntervalsError}\r\n                                        label={subIntervalsError?\"Error\":\"\"}\r\n                                        defaultValue={subIntervals.toString()}\r\n                                        helperText={subIntervalsErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid className=\"interval-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Lower x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setLowerX(parseFloat(event.target.value))}\r\n                                        error={intervalError}\r\n                                        label={intervalError?\"Error\":\"\"}\r\n                                        defaultValue={lowerX.toString()}\r\n                                        helperText={lowerXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Upper x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setUpperX(parseFloat(event.target.value))}\r\n                                        error={intervalError}\r\n                                        label={intervalError?\"Error\":\"\"}\r\n                                        defaultValue={upperX.toString()}\r\n                                        helperText={upperXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve &&\r\n                        <Container className={styleClasses.container}>\r\n                            <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                <Grid xs item className=\"step-math\">\r\n                                    <Slide direction=\"left\" triggerOnce>\r\n                                        <Card className={styleClasses.card}>\r\n                                            <CardContent className={styleClasses.cardContent}>\r\n                                                <TeX math={latexContent} block />\r\n                                            </CardContent>\r\n                                        </Card>\r\n                                    </Slide>\r\n                                </Grid>\r\n                                <Grid xs item className=\"graph-button\">\r\n                                    <Slide direction=\"right\" triggerOnce>\r\n                                        <Graph params={{iterations: 0, functionLatex, graphCallback, smallScreen}} />\r\n                                    </Slide>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Container>\r\n                        }\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default IntegralMidpoint;","import {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.iterations > 0 ? params.results[currentIteration - 1] : null;\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            calculator.current.updateSettings({xAxisLabel: 'x', yAxisLabel: 'y',  xAxisArrowMode: Desmos.AxisArrowModes.POSITIVE, yAxisArrowMode: Desmos.AxisArrowModes.POSITIVE });\r\n            params.graphCallback(calculator, currentResult, currentIteration);\r\n        }\r\n    }, [calculator, currentResult, params, currentIteration]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            {params.description && <Box component=\"div\" overflow=\"visible\">\r\n                    <Typography variant=\"h6\">\r\n                        {params.description}\r\n                    </Typography>\r\n                </Box>\r\n            }\r\n            {params.functionLatex && <Box component=\"div\" overflow=\"visible\">\r\n                    <TeX math={`${params.functionLatex}`} block />\r\n                </Box>\r\n            }\r\n            <Typography variant=\"h6\">\r\n                {params.iterations > 0 ? `Iteration ${currentIteration}:` : <br />}\r\n            </Typography>\r\n            {params.iterations > 0 &&\r\n                <Box width=\"70%\">\r\n                    <Slider\r\n                        orientation=\"horizontal\"\r\n                        onChange={(event, value) => setCurrentIteration(value)}\r\n                        defaultValue={defaultIteration}\r\n                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                        step={1}\r\n                        marks\r\n                        min={1}\r\n                        max={params.iterations}\r\n                        valueLabelDisplay=\"auto\"\r\n                    />\r\n                </Box>\r\n            }\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction Graph({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Graph;"],"sourceRoot":""}