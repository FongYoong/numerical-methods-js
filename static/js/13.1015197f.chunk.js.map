{"version":3,"sources":["components/methods/linear/SVD.js","components/methods/linear/matrix_utils.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","matrixCard","width","divider","height","marginTop","marginBottom","fab","position","bottom","right","LinearSVD","methodName","useEffect","document","state","stateSetter","styleClasses","smallScreen","useMediaQuery","useTheme","breakpoints","down","columnWidth","widthPadding","heightPadding","useState","initialMatrix4","gridState","setGridState","columnCallback","add","columns","slice","rows","push","createNewColumn","length","i","pop","rowCallback","createNewRow","originalMatrix","gridTo2DArray","rowLength","cloneArray","colLength","Array","keys","map","fill","runTour","setRunTour","className","duration","triggerOnce","cascade","variant","math","String","raw","direction","alignItems","justify","xs","item","onClick","rowGetter","rowsCount","onGridRowsUpdated","fromRow","toRow","updated","enableCellSelect","headerRowHeight","minColumnWidth","minWidth","rowHeight","minHeight","Math","random","in","arrow","placement","aria-label","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","action","MatrixElementEditor","props","ref","React","createRef","onInputChange","value","current","parseInt","isNaN","setState","this","column","key","defaultValue","onBlur","onChange","Component","style","display","justifyContent","flexDirection","columnSettings","editable","editor","formatter","numberOfColumns","newNum","name","newRow","rowsArray","Object","sort","row","k","array","JSON","parse","stringify","isDiagonallyDominant","matrix","diagonal","sum","j","abs","numberFactorials","nextPermutation","temp","generatePermutationMapping","original","mapping","alreadyCovered","includes","matrixToLatex","latex","single","leftBracketOnly","rightBracketOnly","boldRows","transpose","isBold","b","formatMatrixLatex","initialMatrix","col_1","col_2","col_3","col_4","initialOutputColumn","initialMatrix3","initialInputColumn3","initialOutputColumn3"],"mappings":"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","file":"static/js/13.1015197f.chunk.js","sourcesContent":["import {formatLatex, formatMatrixLatex} from \"../../utils\";\r\nimport {initialMatrix4, createNewColumn, createNewRow, gridTo2DArray, cloneArray, matrixToLatex} from \"./matrix_utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\n\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".matrix-col-input\",\r\n        title: \"Column\",\r\n        content:\r\n        \"Add/Remove columns\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".matrix-row-input\",\r\n        title: \"Row\",\r\n        content:\r\n        \"Add/Remove rows\",\r\n    },\r\n    {\r\n        target: \".matrix-input\",\r\n        title: \"Matrix\",\r\n        content:\r\n        \"Specify the matrix here.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(0.5),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.primary,\r\n        margin: theme.spacing(1),\r\n    },\r\n    container: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    card: {\r\n        margin: theme.spacing(0),\r\n    },\r\n    cardContent: {\r\n        overflow: 'auto',\r\n        \"& > *\": {\r\n            margin: theme.spacing(0.5)\r\n        }\r\n    },\r\n    overflow: {\r\n        overflow: 'auto',\r\n    },\r\n    matrixCard: {\r\n        width: \"60vw\",\r\n    },\r\n    divider: {\r\n        width: '500 px',\r\n        height: '100px',\r\n        marginTop: '20px',\r\n        marginBottom: '20px',\r\n    },\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(4),\r\n        right: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction LinearSVD({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n        \r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    // Grid\r\n    const columnWidth = smallScreen ? 45 : 60;\r\n    const rowHeight = smallScreen ? 35 : 35;\r\n    const widthPadding = smallScreen ? 10 : 100;\r\n    const heightPadding = smallScreen ? 5 : 20;\r\n    const [gridState, setGridState] = useState(initialMatrix4);\r\n    function generateGridCallback (state, stateSetter) {\r\n        return ({ fromRow, toRow, updated }) => {\r\n            const rows = state.rows.slice();\r\n            for (let i = fromRow; i <= toRow; i++) {\r\n                rows[i] = { ...rows[i], ...updated };\r\n            }\r\n            stateSetter({\r\n                ...state, rows\r\n            });\r\n        };\r\n    }\r\n    const columnCallback = (add) => {\r\n        return () => {\r\n            const columns = gridState.columns.slice();\r\n            const rows = gridState.rows.slice();\r\n            if (add) {\r\n                columns.push(createNewColumn(columns.length));\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    rows[i][`col_${columns.length}`] = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (columns.length === 2) {\r\n                    return;\r\n                }\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    delete rows[i][`col_${columns.length}`];\r\n                }\r\n                columns.pop();\r\n            }\r\n            setGridState({columns, rows});\r\n        };\r\n    }\r\n    const rowCallback = (add) => {\r\n        return () => {\r\n            const rows = gridState.rows.slice();\r\n            if (add) {\r\n                rows.push(createNewRow(gridState.columns.length));\r\n            }\r\n            else {\r\n                if (rows.length === 2) {\r\n                    return;\r\n                }\r\n                rows.pop();\r\n            }\r\n            setGridState({...gridState, rows});\r\n        };\r\n    }\r\n\r\n    // Solve\r\n    let solve = false;\r\n    const originalMatrix = gridTo2DArray(gridState.rows);\r\n    let modifiedMatrix = cloneArray(originalMatrix);\r\n    const rowLength = gridState.rows.length; // row dimension\r\n    const colLength = gridState.columns.length; // column dimension\r\n    let results = [];\r\n    let lowerMatrix = [...Array(rowLength).keys()].map(() => Array(colLength).fill(0));\r\n    let pivotLength = rowLength;\r\n\r\n    /*\r\n    \r\n    for (let pivot  = 0; pivot < pivotLength - 1; pivot++) {\r\n        lowerMatrix[pivot][pivot] = 1;\r\n        let validPivot = true;\r\n        if (modifiedMatrix[pivot][pivot] === 0 ) {\r\n            validPivot = false;\r\n            for (let row2 = pivot + 1; row2 < pivotLength; row2++) {\r\n                if (modifiedMatrix[row2][pivot] !== 0) {\r\n                    let tempMatrixRow = modifiedMatrix[pivot];\r\n                    modifiedMatrix[pivot] = modifiedMatrix[row2];\r\n                    modifiedMatrix[row2] = tempMatrixRow;\r\n                    results.push({\r\n                        finalMatrix: cloneArray(modifiedMatrix),\r\n                        interchange: true,\r\n                        pivot: pivot + 1,\r\n                        row: pivot + 1,\r\n                        row2: row2 + 1,\r\n                    });\r\n                    validPivot = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (validPivot) {\r\n            for (let row  = pivot + 1; row < pivotLength; row++) {\r\n                let factor = modifiedMatrix[row][pivot] / modifiedMatrix[pivot][pivot];\r\n                lowerMatrix[row][pivot] = factor;\r\n                let divisionByZero = false;\r\n                if (factor === 0) {\r\n                    divisionByZero = true;\r\n                }\r\n                else if (isNaN(factor)) {\r\n                    continue;\r\n                }\r\n                if (!divisionByZero) {\r\n                    for (let col  = 0; col < matrixSize; col++) {\r\n                        modifiedMatrix[row][col] -= factor * modifiedMatrix[pivot][col];\r\n                    }\r\n                }\r\n                results.push({\r\n                    finalMatrix: cloneArray(modifiedMatrix),\r\n                    interchange: false,\r\n                    factor,\r\n                    pivot: pivot + 1,\r\n                    row: row + 1,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    */\r\n    let iterations = results.length;\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true)\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {originalMatrix, rowLength, colLength, iterations, results, lowerMatrix};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        This method is applied to matrices in the form of\r\n                        <TeX math={String.raw`\\ Ax=B`} />.\r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Grid container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                        <Grid xs item className=\"matrix-col-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Columns:\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={columnCallback(false)}>\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={columnCallback(true)}>\r\n                                                <AddCircleOutlineOutlinedIcon  />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"matrix-row-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Rows:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={rowCallback(false)} >\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={rowCallback(true)} >\r\n                                                <AddCircleOutlineOutlinedIcon />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"matrix-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Matrix, A:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid xs item container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                                <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                    <ReactDataGrid\r\n                                                        columns={gridState.columns}\r\n                                                        rowGetter={i => gridState.rows[i]}\r\n                                                        rowsCount={gridState.rows.length}\r\n                                                        onGridRowsUpdated={generateGridCallback(gridState, setGridState)}\r\n                                                        enableCellSelect={true}\r\n                                                        headerRowHeight={1}\r\n                                                        minColumnWidth={columnWidth}\r\n                                                        minWidth={columnWidth * gridState.columns.length + widthPadding}\r\n                                                        rowHeight={rowHeight}\r\n                                                        minHeight={rowHeight * gridState.rows.length + heightPadding}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>                                    \r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps smallScreen={smallScreen} params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({smallScreen, params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let latexContent;\r\n\r\n    if (currentIteration <= 0) {\r\n        setCurrentIteration(1);\r\n    }\r\n    else if (params.iterations > 0 && currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else if (params.iterations >= 2) {\r\n        let results = params.results;\r\n        let previousMatrix = currentIteration===1 ? params.originalMatrix : results[currentIteration - 2].finalMatrix;\r\n        let currentResult = results[currentIteration - 1];\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        `;\r\n        if (!currentResult.interchange) {\r\n            latexContent += String.raw`\r\n            \\begin{array}{lcl}\r\n            \\\\ Factor, \\bf{f_{${currentResult.row}${currentResult.pivot}}} &=& \\frac{U_{${currentResult.row}${currentResult.pivot}}}{U_{${currentResult.pivot}${currentResult.pivot}}}\r\n            \\\\        &=& ${formatLatex(currentResult.factor)}\r\n            \\end{array}\r\n            `;\r\n        }\r\n        latexContent += String.raw`\\\\ \\begin{array}{lcl} `;\r\n        const boldRows = currentResult.interchange ? [currentResult.row, currentResult.row2] : [currentResult.row, currentResult.pivot];\r\n        const finalLatex= String.raw`\\overbrace{${matrixToLatex(currentResult.finalMatrix, {boldRows: boldRows})}}^{U}`;\r\n        if (!currentResult.interchange && currentResult.factor === 0) {\r\n            latexContent += String.raw`\r\n                \\\\ \\text{The factor is zero, so no elimination is done here.}\r\n                \\\\\r\n                \\\\ ${finalLatex}\r\n            `;\r\n        }\r\n        else {\r\n            const initialLatex = String.raw`\r\n            \\overbrace{${matrixToLatex(previousMatrix, {boldRows: boldRows})}}^{U}`;\r\n            const operationLatex = currentResult.interchange ?\r\n            String.raw`R_{${currentResult.row}} \\leftrightarrow R_{${currentResult.row2}}`\r\n            : String.raw`R_{${currentResult.row}} = R_{${currentResult.row}}-${formatMatrixLatex(currentResult.factor)}R_{${currentResult.pivot}}`;\r\n            if (smallScreen) {\r\n                latexContent += String.raw`\r\n                \\\\ ${initialLatex}\r\n                \\\\ \\begin{array}{lcl}\r\n                       & \\downarrow &\r\n                    \\\\ & ${operationLatex} &\r\n                    \\\\ & \\downarrow &\r\n                    \\end{array}\r\n                \\\\ ${finalLatex}\r\n                `;\r\n            }\r\n            else {\r\n                latexContent += String.raw`\r\n                \\\\ ${initialLatex}\r\n                & \\overrightarrow{${operationLatex}}\r\n                & ${finalLatex}\r\n                `;\r\n            }\r\n        }\r\n        if (currentIteration === params.iterations) {\r\n            let lowerMatrix = params.lowerMatrix;\r\n            let lowerFormulaLatex = String.raw`\\left[\\begin{matrix}`;\r\n            for (let i = 0; i < params.matrixSize; i++) {\r\n                for (let j = 0; j < params.matrixSize; j++) {\r\n                    if (j < i) {\r\n                        \r\n                        lowerFormulaLatex += String.raw` \\bf{f_{${i + 1}${j + 1}}} `;\r\n                    }\r\n                    else if (j === i) {\r\n                        lowerFormulaLatex += String.raw`1`;\r\n                    }\r\n                    else {\r\n                        lowerFormulaLatex += String.raw`0`;\r\n                    }\r\n                    if (j !== params.matrixSize - 1) {\r\n                        lowerFormulaLatex += String.raw`&`;\r\n                    }\r\n                }\r\n                lowerFormulaLatex += String.raw` \\cr`;\r\n            }\r\n            lowerFormulaLatex += String.raw`\\end{matrix}\\right]`;\r\n            let lowerLatex = String.raw`\\left[\\begin{matrix}`;\r\n            for (let i = 0; i < params.matrixSize; i++) {\r\n                for (let j = 0; j < params.matrixSize; j++) {\r\n                    if (j < i) {\r\n                        lowerLatex += String.raw`\\colorbox{aqua}{\\bf{${formatMatrixLatex(lowerMatrix[i][j])}}}`;\r\n                    }\r\n                    else if (j === i) {\r\n                        lowerLatex += String.raw`1`;\r\n                    }\r\n                    else {\r\n                        lowerLatex += String.raw`0`;\r\n                    }\r\n                    if (j !== params.matrixSize - 1) {\r\n                        lowerLatex += String.raw`&`;\r\n                    }\r\n                }\r\n                lowerLatex += String.raw`\\cr`;\r\n            }\r\n            lowerLatex += String.raw`\\end{matrix}\\right]`;\r\n            latexContent += String.raw`\r\n            \\\\ \r\n            \\\\ \\hline\r\n            \\\\ \\begin{array}{lcl}\r\n            \\\\ Upper, U &=& ${matrixToLatex(currentResult.finalMatrix)}\r\n            \\\\ \r\n            \\\\ Lower, L &=& ${lowerFormulaLatex}\r\n            \\\\\r\n            \\\\          &=& ${lowerLatex}\r\n                \\end{array}\r\n            `;\r\n        }\r\n        latexContent += String.raw`\\end{array}\\end{array}`;\r\n    }\r\n    else {\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\\\ \\text{Cannot do any elimination.}\r\n        \\\\ \\overbrace{${matrixToLatex(params.originalMatrix)}}^{A}\r\n        \\end{array}\r\n        `;\r\n    }\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n            <Grid container direction=\"column\" alignItems=\"center\" justify=\"flex-start\">\r\n                <Grid xs item className=\"iteration-slider\">\r\n                    <Slide direction=\"left\" triggerOnce>\r\n                        <Box id=\"iteration-slider\" width=\"70vw\">\r\n                            <Slider\r\n                                orientation=\"horizontal\"\r\n                                onChangeCommitted={(event, value) => {setCurrentIteration(value)}}\r\n                                defaultValue={1}\r\n                                aria-labelledby=\"discrete-slider-small-steps\"\r\n                                step={1}\r\n                                marks\r\n                                min={1}\r\n                                max={params.iterations<=0 ? 1 :params.iterations}\r\n                                valueLabelDisplay=\"on\"\r\n                            />\r\n                        </Box>\r\n                    </Slide>\r\n                </Grid>\r\n                <Grid xs item className=\"step-math\">\r\n                    <Slide direction=\"right\" triggerOnce>\r\n                        <Card className={styleClasses.card}>\r\n                            <CardContent className={styleClasses.cardContent}>\r\n                                <Typography variant=\"h6\">\r\n                                    Iteration {currentIteration}:\r\n                                </Typography>\r\n                                <TeX math={latexContent} block />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Slide>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LinearSVD;","import {formatMatrixLatex} from \"../../utils\";\r\nimport React from \"react\";\r\n\r\nexport class MatrixElementEditor extends React.Component {\r\n    ref = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: props.value };\r\n    }\r\n    getValue() {\r\n        return { [this.props.column.key]: this.state.value };\r\n    }\r\n\r\n    getInputNode() {\r\n        return this.ref.current ? this.ref.current : null;\r\n    }\r\n\r\n    onInputChange = () => {\r\n        let value = this.ref.current.value;\r\n        try {\r\n            value = parseInt(value);\r\n            if (isNaN(value)) {\r\n                value = 0;\r\n            }\r\n        }\r\n        catch {\r\n            value = 0;\r\n        }\r\n        this.setState({ value: value });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <input ref={this.ref} defaultValue={this.state.value} onBlur={this.onInputChange} onChange={this.onInputChange} />\r\n        )\r\n    }\r\n}\r\n\r\nconst style = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n};\r\n\r\nexport default class WrapperFormatter extends React.Component {\r\n\r\n    render() {\r\n        return (<div style={style}>{this.props.value}</div>)\r\n    }\r\n}\r\n\r\nconst columnSettings = {\r\n    editable: true,\r\n    editor: MatrixElementEditor,\r\n    formatter : WrapperFormatter,\r\n};\r\n\r\nexport const createNewColumn = (numberOfColumns) => {\r\n    const newNum = numberOfColumns + 1;\r\n    return { key: `col_${newNum}`, name: `C${newNum}`, ...columnSettings };\r\n}\r\n\r\nexport const createNewRow = (numberOfColumns) => {\r\n    let newRow = {};\r\n    for (let i = 1; i <= numberOfColumns; i++) {\r\n        newRow[`col_${i}`] = 0;\r\n    }\r\n    return newRow;\r\n}\r\n\r\nexport const gridTo2DArray = (rowsArray) => {\r\n    let keys = Object.keys(rowsArray[0]).sort();\r\n    let result = rowsArray.map((row) => {\r\n        return keys.map((k) => row[k]);\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const cloneArray = (array) => {\r\n    return JSON.parse(JSON.stringify(array));\r\n}\r\n\r\nexport const isDiagonallyDominant = (matrix) => {\r\n    // Strictly diagonal dominant\r\n    for (let i  = 0; i < matrix.length; i++) {\r\n        let diagonal = matrix[i][i];\r\n        let sum = 0;\r\n        for (let j  = 0; j < matrix.length; j++) {\r\n            if (j !== i) {\r\n                sum += matrix[i][j];\r\n            }\r\n        }\r\n        if (Math.abs(diagonal) <= Math.abs(sum)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// First 15 factorials.\r\nexport const numberFactorials = [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000];\r\n\r\nexport const nextPermutation = (array) => {\r\n    // Mutates array\r\n    // Find non-increasing suffix\r\n    let i = array.length - 1;\r\n    while (i > 0 && array[i - 1] >= array[i])\r\n        i--;\r\n    if (i <= 0)\r\n        return false;\r\n\r\n    // Find successor to pivot\r\n    let j = array.length - 1;\r\n    while (array[j] <= array[i - 1])\r\n        j--;\r\n    let temp = array[i - 1];\r\n    array[i - 1] = array[j];\r\n    array[j] = temp;\r\n\r\n    // Reverse suffix\r\n    j = array.length - 1;\r\n    while (i < j) {\r\n        temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        i++;\r\n        j--;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const generatePermutationMapping = (target, original=[...Array(target.length).keys()]) => {\r\n    let mapping = {};\r\n    let alreadyCovered = [];\r\n    for (let i = 0; i < original.length; i++) {\r\n        if (!alreadyCovered.includes(target[i]) && original[i] !== target[i]) {\r\n            mapping[i] = target[i];\r\n            alreadyCovered.push(original[i], target[i]);\r\n        }\r\n    }\r\n    return mapping;\r\n}\r\n\r\nexport const matrixToLatex = (matrix, {single=false, leftBracketOnly=false, rightBracketOnly=false, boldRows=[], transpose=false}={}) => {\r\n    let latex;\r\n    if (rightBracketOnly) {\r\n        latex = String.raw`\\left|\\begin{matrix}`;\r\n    }\r\n    else {\r\n        latex = String.raw`\\left[\\begin{matrix}`\r\n    }\r\n    const rowLength = matrix.length;\r\n    const colLength = matrix[0].length;\r\n    if (single) {\r\n        // 1D array\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            const content = String.raw` ${formatMatrixLatex(matrix[i])} `;\r\n            if (isBold) {\r\n                latex += String.raw` \\colorbox{aqua}{\\bf{${content}}} `;\r\n            }\r\n            else {\r\n                latex += String.raw`${content}`;\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            for (let j = 0; j < colLength; j++){\r\n                let content = String.raw` ${formatMatrixLatex(matrix[i][j])} `;\r\n                if (isBold) {\r\n                    latex += String.raw` \\colorbox{aqua}{\\bf{${content}}} `;\r\n                }\r\n                else {\r\n                    latex += String.raw`${content}`;\r\n                }\r\n                if (j !== colLength - 1) {\r\n                    latex += String.raw`&`;\r\n                }\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    if (leftBracketOnly) {\r\n        latex += String.raw`\\end{matrix}\\right|`;\r\n    }\r\n    else {\r\n        latex += String.raw`\\end{matrix}\\right]`;\r\n    }\r\n    return latex;\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////\r\n// Matrix initial values\r\n///////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////\r\nexport const initialMatrix = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 1, col_3: -3, col_4: 4 },\r\n        { col_1: 2, col_2: -2, col_3: 1, col_4: 0 },\r\n        { col_1: 2, col_2: -1, col_3: -2, col_4: 4 },\r\n        { col_1: -6, col_2: 4, col_3: 3, col_4: -8 },\r\n    ]\r\n}\r\nexport const initialInputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0, col_4: 0},\r\n    ]\r\n}\r\nexport const initialOutputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -1, col_3: 0, col_4: 1},\r\n    ]\r\n}\r\n\r\nexport const initialMatrix2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -10, col_3: 1 },\r\n        { col_1: 20, col_2: 1, col_3: -1 },\r\n        { col_1: -1, col_2: 1, col_3: 10 },\r\n    ]\r\n}\r\nexport const initialInputColumn2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0 },\r\n    ]\r\n}\r\nexport const initialOutputColumn2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 13, col_2: 17, col_3: 18 },\r\n    ]\r\n}\r\n\r\nexport const initialMatrix3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: -1, col_2: 11, col_3: -1, col_4: 3 },\r\n        { col_1: 10, col_2: -1, col_3: 2, col_4: 0 },\r\n        { col_1: 0, col_2: 3, col_3: -1, col_4: 8 },\r\n        { col_1: 2, col_2: -1, col_3: 10, col_4: -1 },\r\n    ]\r\n}\r\nexport const initialInputColumn3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0, col_4: 0 },\r\n    ]\r\n}\r\nexport const initialOutputColumn3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 25, col_2: 6, col_3: 15, col_4: -11, },\r\n    ]\r\n}\r\n\r\nexport const initialMatrix4 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 3, col_2: -0.1, col_3: -0.2 },\r\n        { col_1: 0.1, col_2: 7, col_3: -0.3 },\r\n        { col_1: 0.3, col_2: -0.2, col_3: 10 },\r\n    ]\r\n}"],"sourceRoot":""}