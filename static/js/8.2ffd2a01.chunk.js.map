{"version":3,"sources":["components/methods/nonlinear/DesmosGraph.js","components/methods/nonlinear/Newton.js"],"names":["DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","aria-label","onClick","DialogContent","params","useState","currentIteration","setCurrentIteration","defaultIteration","currentResult","results","desmosDiv","useRef","calculator","updateGraph","useCallback","current","graphCallback","useEffect","smallScreen","style","width","height","Desmos","keypad","expressions","expressionsTopbar","container","direction","alignItems","justify","component","overflow","tex","mathjsToLatex","functionValue","variant","orientation","onChange","event","value","defaultValue","aria-labelledby","step","marks","min","max","iterations","valueLabelDisplay","item","ref","NewtonDesmos","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","open","id","dividers","TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","paper","textAlign","text","primary","card","cardContent","fab","bottom","Steps","latexContent","styleClasses","previousXLatex","String","raw","newXLatex","formatLatex","previousX","funcResult","derivResult","newX","errorX","setExpression","BLUE","latex","GREEN","lineStyle","DOTTED","ORANGE","pointStyle","POINT","label","showLabel","RED","useMediaQuery","useTheme","breakpoints","down","in","severity","xs","triggerOnce","duration","addStyles","NonlinearNewton","methodName","document","derivValue","derivLatex","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","derivative","setIterations","iterError","iterErrorText","Number","isInteger","hasError","initialX","setInitialX","solve","isValidMath","i","evaluate","x","Math","abs","push","runTour","setRunTour","openErrorSnackbar","setOpenErrorSnackbar","errorSnackbarClose","reason","cascade","disabled","mathField","mathquillDidMount","type","parseInt","error","toString","helperText","parseFloat","arrow","placement","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","autoHideDuration"],"mappings":"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","file":"static/js/8.2ffd2a01.chunk.js","sourcesContent":["import {formatLatex, mathjsToLatex} from \"../../utils\";\r\nimport {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport { MathComponent } from 'mathjax-react';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.results[currentIteration - 1];\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            params.graphCallback(calculator, currentResult);\r\n        }\r\n    }, [calculator, currentResult, params]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            <Box component=\"div\" overflow=\"visible\">\r\n                <MathComponent tex={`${mathjsToLatex(params.functionValue)}`}/>\r\n            </Box>\r\n            <Typography variant=\"h6\">\r\n                Iteration {currentIteration}:\r\n            </Typography>\r\n            <Box width=\"70%\">\r\n                <Slider\r\n                    orientation=\"horizontal\"\r\n                    onChange={(event, value) => setCurrentIteration(value)}\r\n                    defaultValue={defaultIteration}\r\n                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                    step={1}\r\n                    marks\r\n                    min={1}\r\n                    max={params.iterations}\r\n                    valueLabelDisplay=\"auto\"\r\n                />\r\n            </Box>\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction NewtonDesmos({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewtonDesmos;","import {isValidMath, mathjsToLatex, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport DesmosGraph from \"./DesmosGraph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse, derivative } from 'mathjs';\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".derivative-input\",\r\n        title: \"Derivative\",\r\n        content:\r\n            \"The function's derivative will be shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-input\",\r\n        title: \"Iterations\",\r\n        content:\r\n            \"Specify the number of iterations to apply Newton's method.\",\r\n    },\r\n    {\r\n        target: \".initialX-input\",\r\n        title: \"Initial x value\",\r\n        content:\r\n            \"Specify the initial/starting value of x.\",\r\n    },\r\n    {\r\n        target: \".results\",\r\n        title: \"Results\",\r\n        content:\r\n            \"The results are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps for each iteration are shown here.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction NonlinearNewton({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Derivative\r\n    // Another sample would be: `3x^2+2x-8`\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`x-\\cos\\left( x\\right)`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue, derivValue, derivLatex;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n        derivValue = derivative(functionText, 'x');\r\n        derivLatex = mathjsToLatex(derivValue);\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Invalid equation!\";\r\n    }\r\n\r\n    // Iterations\r\n    const [iterations, setIterations] = useState(10);\r\n    let iterError = false;\r\n    let iterErrorText = \"\";\r\n    if (!Number.isInteger(iterations) || iterations <= 0) {\r\n        iterError = true;\r\n        iterErrorText = \"Iterations must be a positive integer!\";\r\n    }\r\n\r\n    let hasError = functionError || iterError;\r\n\r\n    // Initial x\r\n    const [initialX, setInitialX] = useState(0.0);\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let results = [];\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        for (let i = 0; i < iterations; i++) {\r\n            let previousX = (i === 0) ? initialX: results[i - 1].newX;\r\n            let funcResult, derivResult;\r\n            try {\r\n                funcResult = functionValue.evaluate({x : previousX});\r\n                derivResult = derivValue.evaluate({x : previousX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            \r\n            let newX = previousX - funcResult / derivResult;\r\n            let errorX = Math.abs(newX - previousX);\r\n            results.push({\r\n                previousX,\r\n                funcResult,\r\n                derivResult,\r\n                newX,\r\n                errorX,\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        solve = false;\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        if (hasError) {\r\n            setOpenErrorSnackbar(true);\r\n        }\r\n        else {\r\n            setRunTour(true)\r\n        }\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n    const [openErrorSnackbar, setOpenErrorSnackbar] = useState(false);\r\n\r\n    const errorSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenErrorSnackbar(false);\r\n    };\r\n\r\n    let params = {functionValue, derivValue, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function:\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"derivative-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Derivative:\r\n                                    </Typography>\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                    <Collapse in={!functionError}>\r\n                                        {!functionError && <Fade triggerOnce><MathComponent tex={derivLatex}/></Fade>}\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"iteration-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iterations:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setIterations(parseInt(event.target.value))}\r\n                                        error={iterError}\r\n                                        label={iterError?\"Error\":\"\"}\r\n                                        defaultValue={iterations.toString()}\r\n                                        helperText={iterErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"initialX-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Initial x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setInitialX(parseFloat(event.target.value))}\r\n                                        label={\"\"}\r\n                                        defaultValue={initialX.toString()}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider  />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n            <Snackbar open={openErrorSnackbar} autoHideDuration={2000} onClose={errorSnackbarClose}>\r\n                <Alert onClose={errorSnackbarClose} severity=\"error\">\r\n                    There is an error with the {functionError?\"function\":\"iterations\"}.\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n\r\n    let hasError = false;\r\n    let errorText = \"\";\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let previousXLatex = String.raw`x_{${currentIteration - 1}}`;\r\n        let newXLatex = String.raw`x_{${currentIteration}}`;\r\n        latexContent =\r\n        String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{lll}\r\n        \\\\ ${previousXLatex} &=& ${formatLatex(currentResult.previousX)}\r\n        \\\\ f(${previousXLatex}) &=& ${formatLatex(currentResult.funcResult)}\r\n        \\\\ f'(${previousXLatex}) &=& ${formatLatex(currentResult.derivResult)}\r\n        \\\\ ${newXLatex} &=& ${previousXLatex} - \\frac{f(${previousXLatex})}{f'(${previousXLatex})}\r\n        \\\\                       &=& ${formatLatex(currentResult.newX)}\r\n        \\\\ Error &=& |${newXLatex} - ${previousXLatex}|\r\n        \\\\       &=& |${formatLatex(currentResult.errorX)}|\r\n        \\end{array}\r\n        `;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: mathjsToLatex(params.functionValue)});\r\n            calculator.current.setExpression({ id: 'derivative', color: Desmos.Colors.GREEN, lineStyle: Desmos.Styles.DOTTED, latex:\r\n                `(y-${formatLatex(currentResult.funcResult)})/(x-${formatLatex(currentResult.previousX)})=${formatLatex(currentResult.derivResult)}` });\r\n            calculator.current.setExpression({ id: 'initialX', color: Desmos.Colors.ORANGE, pointStyle: Desmos.Styles.POINT, label: \"initialX\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.previousX)}, ${formatLatex(currentResult.funcResult)})` });\r\n            calculator.current.setExpression({ id: 'root', color: Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, label: \"Root\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.newX)}, 0)` });\r\n        }\r\n    }\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                <Slider\r\n                                    orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                    onChange={(event, value) => {setCurrentIteration(value)}}\r\n                                    defaultValue={1}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"step-math\">\r\n                            <Zoom duration={500} triggerOnce>\r\n                                <Card className={styleClasses.card}>\r\n                                    <CardContent className={styleClasses.cardContent}>\r\n                                        <Typography variant=\"h6\">\r\n                                            Iteration {currentIteration}:\r\n                                        </Typography>\r\n                                        <MathComponent tex={latexContent}/>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Zoom>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid xs item className=\"graph-button\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            <DesmosGraph params={{currentIteration, graphCallback, smallScreen, ...params}} />\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NonlinearNewton;"],"sourceRoot":""}