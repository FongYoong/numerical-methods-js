{"version":3,"sources":["components/methods/linear/JacobiSeidel.js","components/matrix_utils.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","matrixCard","width","divider","height","marginTop","marginBottom","fab","position","bottom","right","Steps","latexContent","smallScreen","params","styleClasses","useState","currentIteration","setCurrentIteration","hasError","exceedIterError","errorText","exceedIterErrorText","iterations","triedPermutating","String","raw","matrixToLatex","originalMatrix","leftBracketOnly","originalInput","single","originalOutput","results","currentResult","permutated","permutationMapping","generatePermutationMapping","rowIndexes","boldRows","Object","keys","map","v","parseInt","push","values","previousLatex","rightBracketOnly","operationLatex","entries","key","value","newLatex","newMatrix","newOutput","index","matrix","output","solverExpressionLatex","solverType","oldInput","i","matrixSize","formatMatrixLatex","j","newInput","restoredOutput","cloneArray","ind","formatLatex","errorInput","converged","errorThreshold","className","in","severity","direction","alignItems","justify","xs","item","triggerOnce","variant","id","orientation","onChangeCommitted","event","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","math","LinearJacobiSeidel","methodName","markdown","useEffect","document","useMediaQuery","useTheme","breakpoints","down","columnWidth","rowHeight","widthPadding","heightPadding","initialMatrix","gridState","setGridState","initialInputColumn","inputColumnState","setInputColumnState","initialOutputColumn","outputColumnState","setOutputColumnState","sizeCallback","add","columns","slice","rows","inputColumns","inputRows","outputColumns","outputRows","createNewColumn","length","createNewRow","pop","setSolverType","setErrorThreshold","thresholdError","thresholdErrorText","isNaN","solve","gridTo2DArray","modifiedInput","dominant","modifiedMatrix","modifiedOutput","console","log","isDiagonallyDominant","numPermutations","numberFactorials","Array","nextPermutation","permutatedMatrix","sum","k","Math","abs","runTour","setRunTour","duration","cascade","aria-label","name","onChange","control","label","onClick","rowGetter","rowsCount","onGridRowsUpdated","generateGridCallback","enableCellSelect","headerRowHeight","minColumnWidth","minWidth","minHeight","disabled","type","parseFloat","error","toString","helperText","arrow","placement","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","stateSetter","fromRow","toRow","updated","MatrixElementEditor","props","ref","React","createRef","onInputChange","current","setState","this","column","onBlur","Component","style","display","justifyContent","flexDirection","columnSettings","editable","editor","formatter","numberOfColumns","customName","newNum","newRow","rowsArray","sort","row","array","JSON","parse","stringify","diagonal","getBinomialCoefficient","n","temp","original","mapping","alreadyCovered","includes","latex","boldColumns","transpose","rowLength","colLength","isBold","b","isBoldRow","isBoldRowColumn","c","col_1","col_2","col_3","col_4","initialMatrix3","initialInputColumn3","initialOutputColumn3","initialMatrix4","initialMatrix6","initialMatrix12","initialInputColumn12","initialMatrix13","initialInputColumn13","initialMatrix14","initialInputColumn14","initialMatrix15","initialMatrix17","initialMatrix18","initialMatrix19","initialMatrix20","initialMatrix21","initialMatrix22"],"mappings":"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","file":"static/js/42.c85cf7fb.chunk.js","sourcesContent":["import {formatLatex, formatMatrixLatex} from \"../../utils\";\r\nimport {initialMatrix3 as initialMatrix, initialInputColumn3 as initialInputColumn, initialOutputColumn3 as initialOutputColumn,\r\ngenerateGridCallback, createNewColumn, createNewRow, gridTo2DArray, cloneArray,\r\nisDiagonallyDominant, numberFactorials, nextPermutation, generatePermutationMapping, matrixToLatex} from \"../../matrix_utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\n\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".solver-type-input\",\r\n        title: \"Solver Type\",\r\n        content:\r\n        \"Choose either Jacobi or Gauss-Seidel.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".matrix-size-input\",\r\n        title: \"Size\",\r\n        content:\r\n        \"Increase/Reduce the matrix's size\",\r\n    },\r\n    {\r\n        target: \".matrix-input\",\r\n        title: \"Matrix\",\r\n        content:\r\n        \"Specify the matrix here.\",\r\n    },\r\n    {\r\n        target: \".input-col-input\",\r\n        title: \"Input\",\r\n        content:\r\n        \"Specify the initial input vector.\",\r\n    },\r\n    {\r\n        target: \".output-col-input\",\r\n        title: \"Output\",\r\n        content:\r\n        \"Specify the output vector.\",\r\n    },\r\n    {\r\n        target: \".errorThreshold-input\",\r\n        title: \"Error Threshold\",\r\n        content:\r\n            \"Specify the minimum error threshold\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(0.5),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.primary,\r\n        margin: theme.spacing(1),\r\n    },\r\n    container: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    card: {\r\n        margin: theme.spacing(0),\r\n    },\r\n    cardContent: {\r\n        overflow: 'auto',\r\n        \"& > *\": {\r\n            margin: theme.spacing(0.5)\r\n        }\r\n    },\r\n    overflow: {\r\n        overflow: 'auto',\r\n    },\r\n    matrixCard: {\r\n        width: \"60vw\",\r\n    },\r\n    divider: {\r\n        width: '500 px',\r\n        height: '100px',\r\n        marginTop: '20px',\r\n        marginBottom: '20px',\r\n    },\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(4),\r\n        right: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction LinearJacobiSeidel({methodName, markdown}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n        \r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    // Grid\r\n    const columnWidth = smallScreen ? 45 : 60;\r\n    const rowHeight = smallScreen ? 35 : 35;\r\n    const widthPadding = smallScreen ? 10 : 100;\r\n    const heightPadding = smallScreen ? 5 : 20;\r\n    const [gridState, setGridState] = useState(initialMatrix);\r\n    const [inputColumnState, setInputColumnState] = useState(initialInputColumn);\r\n    const [outputColumnState, setOutputColumnState] = useState(initialOutputColumn);\r\n    const sizeCallback = (add) => {\r\n        return () => {\r\n            const columns = gridState.columns.slice();\r\n            const rows = gridState.rows.slice();\r\n            const inputColumns = inputColumnState.columns.slice();\r\n            const inputRows = inputColumnState.rows.slice();\r\n            const outputColumns = outputColumnState.columns.slice();\r\n            const outputRows = outputColumnState.rows.slice();\r\n            if (add) {\r\n                columns.push(createNewColumn(columns.length));\r\n                rows.push(createNewRow(gridState.columns.length));\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    rows[i][`col_${columns.length}`] = 0;\r\n                }\r\n                inputColumns.push(createNewColumn(inputColumns.length));\r\n                inputRows[0][`col_${inputColumns.length}`] = 0;\r\n                outputColumns.push(createNewColumn(outputColumns.length));\r\n                outputRows[0][`col_${outputColumns.length}`] = 0;\r\n            }\r\n            else {\r\n                if (columns.length === 2) {\r\n                    return;\r\n                }\r\n                rows.pop();\r\n                for (let i = 0; i < outputRows.length; i++) {\r\n                    delete outputRows[i][`col_${outputColumns.length}`];\r\n                }\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    delete rows[i][`col_${columns.length}`];\r\n                }\r\n                columns.pop();\r\n                for (let i = 0; i < inputRows.length; i++) {\r\n                    delete inputRows[i][`col_${inputColumns.length}`];\r\n                }\r\n                inputColumns.pop();\r\n                outputColumns.pop();\r\n            }\r\n            setGridState({columns, rows});\r\n            setInputColumnState({columns: inputColumns, rows: inputRows});\r\n            setOutputColumnState({columns: outputColumns, rows: outputRows});\r\n        };\r\n    }\r\n\r\n    // Solver Type\r\n    const [solverType, setSolverType] = useState(\"jacobi\");\r\n\r\n    // Error threshold\r\n    const [errorThreshold, setErrorThreshold] = useState(0.0002);\r\n    let thresholdError = false;\r\n    let thresholdErrorText = \"\";\r\n    if (isNaN(errorThreshold)) {\r\n        thresholdError = true;\r\n        thresholdErrorText = \"Threshold must be a number!\";\r\n    }\r\n    else if (errorThreshold < 0) {\r\n        thresholdError = true;\r\n        thresholdErrorText = \"Threshold cannot be negative!\";\r\n    }\r\n\r\n    let hasError = thresholdError;\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let exceedIterError = false;\r\n    let exceedIterErrorText = \"\";\r\n    const originalMatrix = gridTo2DArray(gridState.rows);\r\n    const originalOutput = gridTo2DArray(outputColumnState.rows)[0];\r\n    const originalInput = gridTo2DArray(inputColumnState.rows)[0];\r\n    let modifiedInput = cloneArray(originalInput);\r\n    const matrixSize = gridState.rows.length;\r\n    let results = [];\r\n    let iterations = 0;\r\n    let permutated = false;\r\n    let triedPermutating = false; // Failed to obtain a dominant matrix even after permutating.\r\n    if (!hasError) {\r\n        solve = true;\r\n        let dominant = false; // Strictly diagonally dominant\r\n        let modifiedMatrix = cloneArray(originalMatrix);\r\n        let modifiedOutput = cloneArray(originalOutput);\r\n        console.log(\"Original: \", modifiedMatrix);\r\n        if (!isDiagonallyDominant(modifiedMatrix)) {\r\n            console.log(\"Initially not dominant!\");\r\n            let numPermutations = numberFactorials[matrixSize];\r\n            let rowIndexes = [...Array(matrixSize).keys()];\r\n            for (let i = 0; i < numPermutations - 1; i++) {\r\n                nextPermutation(rowIndexes);\r\n                const permutatedMatrix = rowIndexes.map(ind => modifiedMatrix[ind]);\r\n                if (isDiagonallyDominant(permutatedMatrix)) {\r\n                    dominant = true;\r\n                    modifiedMatrix = permutatedMatrix;\r\n                    modifiedOutput = rowIndexes.map(ind => modifiedOutput[ind]);\r\n                    console.log(\"Found a dominant!\", modifiedMatrix, modifiedOutput, rowIndexes);\r\n                    break;\r\n                }\r\n            }\r\n            if (dominant) {\r\n                results.push({\r\n                    newMatrix: cloneArray(modifiedMatrix),\r\n                    newOutput: cloneArray(modifiedOutput),\r\n                    newInput: cloneArray(modifiedInput),\r\n                    permutated: true,\r\n                    rowIndexes: rowIndexes,\r\n                });\r\n                permutated = true;\r\n                iterations += 1;\r\n            }\r\n            else {\r\n                console.log(\"Tried permutating but failed!\");\r\n                triedPermutating = true;\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"Initially dominant!\");\r\n            dominant = true;\r\n        }\r\n        \r\n        if (dominant) {\r\n            console.log(\"Solve Dominant!\");\r\n            let i = 0;\r\n            while (true) {\r\n                let oldInput = (i === 0) ? originalInput : results[i - 1 + iterations].newInput;\r\n                let newInput = [];\r\n                for (let j = 0; j < matrixSize; j++) {\r\n                    let sum = modifiedOutput[j];\r\n                    if (solverType === \"jacobi\") {\r\n                        for (let k = 0; k < matrixSize; k++) {\r\n                            if (k !== j) {\r\n                                sum -= modifiedMatrix[j][k] * oldInput[k];\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (let k = 0; k < matrixSize; k++) {\r\n                            if (k < j) {\r\n                                sum -= modifiedMatrix[j][k] * newInput[k];\r\n                            }\r\n                            else if (k > j) {\r\n                                sum -= modifiedMatrix[j][k] * oldInput[k];\r\n                            }\r\n                        }\r\n                    }\r\n                    sum /= modifiedMatrix[j][j];\r\n                    newInput.push(sum);\r\n                }\r\n                let errorInput = newInput.map((v, index) => Math.abs(v - oldInput[index]));\r\n                let converged = true;\r\n                for (let j = 0; j < matrixSize; j++) {\r\n                    if (errorInput[j] >= errorThreshold) {\r\n                        converged = false;\r\n                        break;\r\n                    }\r\n                }\r\n                results.push({\r\n                    oldInput,\r\n                    newInput,\r\n                    errorInput,\r\n                    converged,\r\n                });\r\n                \r\n                i++;\r\n                if (converged) {\r\n                    console.log(\"Converged\");\r\n                    break;\r\n                }\r\n                if (i > 1000) {\r\n                    console.log(\"Exceeded 1000 iterations!\");\r\n                    exceedIterError = true;\r\n                    exceedIterErrorText = \"Exceeded 1000 iterations! Try increasing the error threshold.\";\r\n                    break;\r\n                }\r\n            }\r\n            iterations += i;\r\n        }\r\n    }\r\n    console.log(results);\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true)\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {solverType, originalMatrix, originalInput, originalOutput, matrixSize, errorThreshold, iterations, exceedIterError, exceedIterErrorText, results, permutated, triedPermutating};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName={methodName} markdown={markdown} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        This method is applied to matrices in the form of\r\n                        <TeX math={String.raw`\\ Ax=B`} /> .\r\n                        <br/>\r\n                        Warning: The process of finding a diagonally-dominant form may be slow for matrices 7x7 and beyond\r\n                        <br/>\r\n                        because it needs to search through all the possible permutations.\r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Grid container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                        <Grid xs item className=\"solver-type-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Typography variant=\"h6\">\r\n                                                Solver Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </Typography>\r\n                                            <RadioGroup aria-label=\"solverType\" name=\"solverType\" value={solverType} onChange={(event)=>setSolverType(event.target.value)}>\r\n                                                <FormControlLabel value=\"jacobi\" control={<Radio />} label=\"Jacobi\" />\r\n                                                <FormControlLabel value=\"seidel\" control={<Radio />} label=\"Gauss-Seidel\" />\r\n                                            </RadioGroup>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"matrix-size-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Typography variant=\"h6\">\r\n                                                Size:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={sizeCallback(false)} >\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={sizeCallback(true)} >\r\n                                                <AddCircleOutlineOutlinedIcon />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n\r\n                                        <Grid xs item className=\"matrix-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Matrix, A:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid xs item container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                                <Grid key={0} item className={styleClasses.overflow}>\r\n                                                    <ReactDataGrid\r\n                                                        columns={gridState.columns}\r\n                                                        rowGetter={i => gridState.rows[i]}\r\n                                                        rowsCount={gridState.rows.length}\r\n                                                        onGridRowsUpdated={generateGridCallback(gridState, setGridState)}\r\n                                                        enableCellSelect={true}\r\n                                                        headerRowHeight={1}\r\n                                                        minColumnWidth={columnWidth}\r\n                                                        minWidth={columnWidth * gridState.columns.length + widthPadding}\r\n                                                        rowHeight={rowHeight}\r\n                                                        minHeight={rowHeight * gridState.rows.length + heightPadding}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid xs item className=\"input-col-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Initial Input, <TeX math={String.raw`X^{(0)}`} />:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid xs item container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                                <Grid key={1} item className={styleClasses.overflow}>\r\n                                                    <ReactDataGrid\r\n                                                        columns={inputColumnState.columns}\r\n                                                        rowGetter={i => inputColumnState.rows[i]}\r\n                                                        rowsCount={inputColumnState.rows.length}\r\n                                                        onGridRowsUpdated={generateGridCallback(inputColumnState, setInputColumnState)}\r\n                                                        enableCellSelect={true}\r\n                                                        headerRowHeight={1}\r\n                                                        minColumnWidth={columnWidth}\r\n                                                        minWidth={columnWidth * inputColumnState.columns.length + widthPadding}\r\n                                                        rowHeight={rowHeight}\r\n                                                        minHeight={rowHeight * inputColumnState.rows.length + heightPadding}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"output-col-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Output, B:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid xs item container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                                <Grid key={2} item className={styleClasses.overflow}>\r\n                                                    <ReactDataGrid\r\n                                                        columns={outputColumnState.columns}\r\n                                                        rowGetter={i => outputColumnState.rows[i]}\r\n                                                        rowsCount={outputColumnState.rows.length}\r\n                                                        onGridRowsUpdated={generateGridCallback(outputColumnState, setOutputColumnState)}\r\n                                                        enableCellSelect={true}\r\n                                                        headerRowHeight={1}\r\n                                                        minColumnWidth={columnWidth}\r\n                                                        minWidth={columnWidth * outputColumnState.columns.length + widthPadding}\r\n                                                        rowHeight={rowHeight}\r\n                                                        minHeight={rowHeight * outputColumnState.rows.length + heightPadding}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"errorThreshold-input\">\r\n                                            <Card className={styleClasses.card}>\r\n                                                <CardContent className={styleClasses.cardContent}>\r\n                                                    <Typography variant=\"h6\">\r\n                                                        Error threshold:\r\n                                                    </Typography>\r\n                                                    <TextField\r\n                                                        disabled={false}\r\n                                                        type=\"number\"\r\n                                                        onChange={(event)=>setErrorThreshold(parseFloat(event.target.value))}\r\n                                                        error={thresholdError}\r\n                                                        label={thresholdError?\"Error\":\"\"}\r\n                                                        defaultValue={errorThreshold.toString()}\r\n                                                        helperText={thresholdErrorText}\r\n                                                        variant=\"outlined\"\r\n                                                    />\r\n                                                </CardContent>\r\n                                            </Card>\r\n                                        </Grid>\r\n                                    </Grid>                                    \r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps smallScreen={smallScreen} params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({smallScreen, params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let hasError = params.exceedIterError;\r\n    let errorText = params.exceedIterErrorText;\r\n    let latexContent;\r\n\r\n    if (currentIteration <= 0) {\r\n        setCurrentIteration(1);\r\n    }\r\n    else if (params.iterations > 0 && currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else if (params.triedPermutating) {\r\n        // Failed even after permutating the matrix\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\\\ \\text{Cannot find a diagonally dominant matrix.}\r\n        \\\\ \\overbrace{${matrixToLatex(params.originalMatrix, {leftBracketOnly: true})}}^{A}\r\n           \\overbrace{${matrixToLatex(params.originalInput, {single: true})}}^{X_{0}}\r\n        &=&\\overbrace{${matrixToLatex(params.originalOutput, {single: true})}}^{B}\r\n        \\end{array}\r\n        `;\r\n    }\r\n    else if (params.iterations > 0) {\r\n        let results = params.results;\r\n        let currentResult = results[currentIteration - 1];\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\\\ \\begin{array}{lcl}\r\n        `;\r\n        if (currentResult.permutated) {\r\n            const permutationMapping = generatePermutationMapping(currentResult.rowIndexes);\r\n            const boldRows = Object.keys(permutationMapping).map((v) => parseInt(v) + 1);\r\n            boldRows.push(...Object.values(permutationMapping).map((v) => v + 1));\r\n            const previousLatex = String.raw`\r\n            \\overbrace{${matrixToLatex(params.originalMatrix, {leftBracketOnly: true, boldRows: boldRows})}}^{A}\r\n            \\overbrace{${matrixToLatex(params.originalOutput, {single:true, rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n            let operationLatex =  String.raw`\\begin{array}{l}`;\r\n            for (const [key, value] of Object.entries(permutationMapping)) {\r\n                operationLatex += String.raw`R_{${parseInt(key) + 1}} \\leftrightarrow R_{${value + 1}}\\\\`;\r\n            }\r\n            operationLatex += String.raw`\\end{array}`;\r\n            const newLatex= String.raw`\r\n            \\overbrace{${matrixToLatex(currentResult.newMatrix, {leftBracketOnly:true, boldRows: boldRows})}}^{A}\r\n            \\overbrace{${matrixToLatex(currentResult.newOutput, {single:true, rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n            latexContent += String.raw`\r\n            \\\\ \\text{The matrix's rows are } \\textbf{permutated} ${smallScreen?\"\\\\\\\\\":\"\"} \\text{ to make it } \\textbf{strictly diagonally dominant.}\r\n            \\\\`\r\n            if (smallScreen) {\r\n                latexContent += String.raw`\r\n                \\\\ ${previousLatex}\r\n                \\\\ \\begin{array}{lcl}\r\n                    & \\downarrow &\r\n                    \\\\ & ${operationLatex} &\r\n                    \\\\ & \\downarrow &\r\n                    \\end{array}\r\n                \\\\ ${newLatex}\r\n                `;\r\n            }\r\n            else {\r\n                latexContent += String.raw`\r\n                \\\\ \\begin{array}{lcl}\r\n                \\\\ ${previousLatex}\r\n                    & \\overrightarrow{${operationLatex}}\r\n                    & ${newLatex}\r\n                    \\end{array}\r\n                `;\r\n            }\r\n        }\r\n        else {\r\n            let index = params.permutated ? currentIteration - 1: currentIteration;\r\n            let matrix = params.permutated ? results[0].newMatrix : params.originalMatrix;\r\n            let output = params.permutated ? results[0].newOutput : params.originalOutput;\r\n            let solverExpressionLatex = params.solverType === \"jacobi\" ?\r\n            String.raw`\r\n            X^{(${index})}_i &=& \\frac{1}{A_{ii}}\r\n                \\left[ B_i - \\sum_{\\substack{j = 1, \\\\ j \\ne i}}^n \\left( A_{ij} \\cdot X^{(${index - 1})}_j \\right)\r\n                \\right]`\r\n            :\r\n            String.raw`\r\n            X^{(${index})}_i &=& \\frac{1}{A_{ii}}\r\n                \\left[ B_i - \\sum_{\\substack{j = 1}}^{i-1} \\left( A_{ij} \\cdot X^{(${index})}_j \\right)\r\n                           - \\sum_{\\substack{j = i+1}}^{n} \\left( A_{ij} \\cdot X^{(${index - 1})}_j \\right)\r\n\r\n                \\right]`;\r\n            latexContent += String.raw`\r\n            \\\\\r\n            \\overbrace{${matrixToLatex(matrix, {leftBracketOnly:true})}}^{A}\r\n            \\overbrace{${matrixToLatex(currentResult.oldInput, {single: true})}}^{X^{(${index - 1})}}\r\n            = \\overbrace{${matrixToLatex(output, {single:true})}}^{B}\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${solverExpressionLatex}\r\n            \\\\\r\n            \\\\ &=& \\left[\\begin{matrix}\r\n            `;\r\n            for (let i = 0; i < params.matrixSize; i++) {\r\n                latexContent += String.raw`\\frac{1}{${formatMatrixLatex(matrix[i][i])}} \\left[ ${formatMatrixLatex(output[i])}`;\r\n                if (params.solverType === \"jacobi\") {\r\n                    for (let j = 0; j < params.matrixSize; j++) {\r\n                        if (j !== i) {\r\n                            latexContent += String.raw`- (${formatMatrixLatex(matrix[i][j])}) (${formatMatrixLatex(currentResult.oldInput[j])}) `;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (let j = 0; j < params.matrixSize; j++) {\r\n                        if (j < i) {\r\n                            //sum -= modifiedMatrix[i][j] * newInput[j];\r\n                            latexContent += String.raw`- (${formatMatrixLatex(matrix[i][j])}) (${formatMatrixLatex(currentResult.newInput[j])}) `;\r\n                        }\r\n                        else if (j > i) {\r\n                            //sum -= modifiedMatrix[i][j] * oldInput[j];\r\n                            latexContent += String.raw`- (${formatMatrixLatex(matrix[i][j])}) (${formatMatrixLatex(currentResult.oldInput[j])}) `;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                latexContent += String.raw`\\right] \\cr`;\r\n            }\r\n\r\n            latexContent += String.raw`\r\n            \\end{matrix}\\right]\r\n            \\\\\r\n            \\\\ X^{(${index})} &=& ${matrixToLatex(currentResult.newInput, {single: true})}\r\n            \\end{array}\r\n            `;\r\n            if (results[0].permutated) {\r\n                // Reorder the equations\r\n                let restoredOutput = cloneArray(currentResult.newInput);\r\n                restoredOutput = results[0].rowIndexes.map(ind => restoredOutput[ind]);\r\n                latexContent += String.raw`\r\n                \\\\\r\n                \\\\ \\hline\r\n                \\\\ \\text {Given that the matrix A has been permutated in iteration 1, }\r\n                \\\\ \\text {we must restore it to the original order:}\r\n                \\\\\r\n                \\\\ X^{(${index})}_{restored} = ${matrixToLatex(restoredOutput, {single: true})}\r\n                `;\r\n            }\r\n            latexContent += String.raw`\r\n            \\\\\r\n            \\\\ \\hline\r\n            \\begin{array}{lcl}\r\n            \\\\ Error &=& |X^{(${index})} - X^{(${index - 1})}|\r\n            \\\\       &=& |${formatLatex(currentResult.errorInput)}|\r\n            \\end{array}\r\n            `;\r\n            if (currentResult.converged) {\r\n                latexContent += String.raw`\r\n                \\\\\r\n                \\\\ \\hline\r\n                \\\\ \\text{Converged because:}\r\n                \\\\\r\n                \\\\ Error < Error Threshold\r\n                \\\\ ${formatLatex(currentResult.errorInput)} < ${formatLatex(params.errorThreshold)}\r\n                `;\r\n            }\r\n        }\r\n        latexContent += String.raw`\\end{array}\\end{array}`;\r\n        \r\n    }\r\n    else {\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{lcl}\r\n        \\\\ \\text{Cannot do anything.}\r\n        \\\\ \\overbrace{${matrixToLatex(params.originalMatrix, {leftBracketOnly: true})}}^{A}\r\n           \\overbrace{${matrixToLatex(params.originalInput, {single: true})}}^{X_{0}}\r\n        &=&\\overbrace{${matrixToLatex(params.originalOutput, {single: true})}}^{B}\r\n        \\end{array}\r\n        `;\r\n    }\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid container direction=\"column\" alignItems=\"center\" justify=\"flex-start\">\r\n                    <Grid xs item>\r\n                        <Zoom triggerOnce>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Converged after {params.iterations} iterations\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Zoom>\r\n                    </Grid>\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" width=\"70vw\">\r\n                                <Slider\r\n                                    orientation=\"horizontal\"\r\n                                    onChangeCommitted={(event, value) => {setCurrentIteration(value)}}\r\n                                    defaultValue={currentIteration}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations<=0 ? 1 :params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item className=\"step-math\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iteration {currentIteration}:\r\n                                    </Typography>\r\n                                    <TeX math={latexContent} />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n            </Collapse>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LinearJacobiSeidel;","import {formatMatrixLatex} from \"./utils\";\r\nimport React from \"react\";\r\n\r\nexport function generateGridCallback (state, stateSetter) {\r\n    return ({ fromRow, toRow, updated }) => {\r\n        const rows = state.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = { ...rows[i], ...updated };\r\n        }\r\n        stateSetter({\r\n            ...state, rows\r\n        });\r\n    };\r\n}\r\n\r\nclass MatrixElementEditor extends React.Component {\r\n    ref = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: props.value };\r\n    }\r\n    getValue() {\r\n        return { [this.props.column.key]: this.state.value };\r\n    }\r\n\r\n    getInputNode() {\r\n        return this.ref.current ? this.ref.current : null;\r\n    }\r\n\r\n    onInputChange = () => {\r\n        let value = this.ref.current.value;\r\n        try {\r\n            value = parseFloat(value);\r\n            if (isNaN(value)) {\r\n                value = 0;\r\n            }\r\n        }\r\n        catch {\r\n            value = 0;\r\n        }\r\n        this.setState({ value: value });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <input ref={this.ref} defaultValue={this.state.value} onBlur={this.onInputChange} onChange={this.onInputChange} />\r\n        )\r\n    }\r\n}\r\n\r\nconst style = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n};\r\n\r\nclass WrapperFormatter extends React.Component {\r\n\r\n    render() {\r\n        return (<div style={style}>{this.props.value}</div>)\r\n    }\r\n}\r\n\r\nconst columnSettings = {\r\n    editable: true,\r\n    editor: MatrixElementEditor,\r\n    formatter : WrapperFormatter,\r\n};\r\n\r\nexport const createNewColumn = (numberOfColumns, customName = \"\") => {\r\n    const newNum = numberOfColumns + 1;\r\n    if (customName) {\r\n        return { key: `col_${newNum}`, name: customName, ...columnSettings };\r\n    }\r\n    else {\r\n        return { key: `col_${newNum}`, name: `C${newNum}`, ...columnSettings };\r\n    }\r\n}\r\n\r\nexport const createNewRow = (numberOfColumns) => {\r\n    let newRow = {};\r\n    for (let i = 1; i <= numberOfColumns; i++) {\r\n        newRow[`col_${i}`] = 0;\r\n    }\r\n    return newRow;\r\n}\r\n\r\nexport const gridTo2DArray = (rowsArray) => {\r\n    let keys = Object.keys(rowsArray[0]).sort();\r\n    let result = rowsArray.map((row) => {\r\n        return keys.map((k) => row[k]);\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const cloneArray = (array) => {\r\n    return JSON.parse(JSON.stringify(array));\r\n}\r\n\r\nexport const isDiagonallyDominant = (matrix) => {\r\n    // Strictly diagonal dominant\r\n    for (let i  = 0; i < matrix.length; i++) {\r\n        let diagonal = matrix[i][i];\r\n        let sum = 0;\r\n        for (let j  = 0; j < matrix.length; j++) {\r\n            if (j !== i) {\r\n                sum += matrix[i][j];\r\n            }\r\n        }\r\n        if (Math.abs(diagonal) <= Math.abs(sum)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// First 15 factorials.\r\nexport const numberFactorials = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000];\r\n\r\nexport const getBinomialCoefficient = (n, k) => {\r\n    return numberFactorials[n] / numberFactorials[k] / numberFactorials[n - k];\r\n}\r\n\r\nexport const nextPermutation = (array) => {\r\n    // Mutates array\r\n    // Find non-increasing suffix\r\n    let i = array.length - 1;\r\n    while (i > 0 && array[i - 1] >= array[i])\r\n        i--;\r\n    if (i <= 0)\r\n        return false;\r\n\r\n    // Find successor to pivot\r\n    let j = array.length - 1;\r\n    while (array[j] <= array[i - 1])\r\n        j--;\r\n    let temp = array[i - 1];\r\n    array[i - 1] = array[j];\r\n    array[j] = temp;\r\n\r\n    // Reverse suffix\r\n    j = array.length - 1;\r\n    while (i < j) {\r\n        temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        i++;\r\n        j--;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const generatePermutationMapping = (target, original=[...Array(target.length).keys()]) => {\r\n    let mapping = {};\r\n    let alreadyCovered = [];\r\n    for (let i = 0; i < original.length; i++) {\r\n        if (!alreadyCovered.includes(target[i]) && original[i] !== target[i]) {\r\n            mapping[i] = target[i];\r\n            alreadyCovered.push(original[i], target[i]);\r\n        }\r\n    }\r\n    return mapping;\r\n}\r\n\r\nexport const matrixToLatex = (matrix, {single=false, leftBracketOnly=false, rightBracketOnly=false, boldRows=[], boldColumns=[], transpose=false}={}) => {\r\n    let latex;\r\n    if (rightBracketOnly) {\r\n        latex = String.raw`\\left|\\begin{matrix}`;\r\n    }\r\n    else {\r\n        latex = String.raw`\\left[\\begin{matrix}`\r\n    }\r\n    const rowLength = matrix.length;\r\n    const colLength = matrix[0].length;\r\n    if (single) {\r\n        // 1D array\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            const content = String.raw` ${formatMatrixLatex(matrix[i])} `;\r\n            if (isBold) {\r\n                latex += String.raw` \\colorbox{aqua}{\\bf{${content}}} `;\r\n            }\r\n            else {\r\n                latex += String.raw`${content}`;\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBoldRow = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBoldRow = true;\r\n                    break;\r\n                }\r\n            }\r\n            for (let j = 0; j < colLength; j++){\r\n                let isBoldRowColumn = false;\r\n                for (let c = 0; c < boldColumns.length; c++) {\r\n                    if (boldColumns[c] === j + 1) {\r\n                        isBoldRowColumn = true;\r\n                        break;\r\n                    }\r\n                }\r\n                let content = String.raw` ${formatMatrixLatex(matrix[i][j])} `;\r\n                if (isBoldRow || isBoldRowColumn) {\r\n                    latex += String.raw` \\colorbox{aqua}{\\bf{${content}}} `;\r\n                }\r\n                else {\r\n                    latex += String.raw`${content}`;\r\n                }\r\n                if (j !== colLength - 1) {\r\n                    latex += String.raw`&`;\r\n                }\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    if (leftBracketOnly) {\r\n        latex += String.raw`\\end{matrix}\\right|`;\r\n    }\r\n    else {\r\n        latex += String.raw`\\end{matrix}\\right]`;\r\n    }\r\n    return latex;\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////\r\n// Matrix initial values\r\n///////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////\r\nexport const initialMatrix = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 1, col_3: -3, col_4: 4 },\r\n        { col_1: 2, col_2: -2, col_3: 1, col_4: 0 },\r\n        { col_1: 2, col_2: -1, col_3: -2, col_4: 4 },\r\n        { col_1: -6, col_2: 4, col_3: 3, col_4: -8 },\r\n    ]\r\n}\r\nexport const initialInputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0, col_4: 0},\r\n    ]\r\n}\r\nexport const initialOutputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -1, col_3: 0, col_4: 1},\r\n    ]\r\n}\r\n\r\nexport const initialMatrix2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -10, col_3: 1 },\r\n        { col_1: 20, col_2: 1, col_3: -1 },\r\n        { col_1: -1, col_2: 1, col_3: 10 },\r\n    ]\r\n}\r\nexport const initialInputColumn2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0 },\r\n    ]\r\n}\r\nexport const initialOutputColumn2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 13, col_2: 17, col_3: 18 },\r\n    ]\r\n}\r\n\r\nexport const initialMatrix3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: -1, col_2: 11, col_3: -1, col_4: 3 },\r\n        { col_1: 10, col_2: -1, col_3: 2, col_4: 0 },\r\n        { col_1: 0, col_2: 3, col_3: -1, col_4: 8 },\r\n        { col_1: 2, col_2: -1, col_3: 10, col_4: -1 },\r\n    ]\r\n}\r\nexport const initialInputColumn3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0, col_4: 0 },\r\n    ]\r\n}\r\nexport const initialOutputColumn3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 25, col_2: 6, col_3: 15, col_4: -11, },\r\n    ]\r\n}\r\n\r\nexport const initialMatrix4 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 3, col_2: -0.1, col_3: -0.2 },\r\n        { col_1: 0.1, col_2: 7, col_3: -0.3 },\r\n        { col_1: 0.3, col_2: -0.2, col_3: 10 },\r\n    ]\r\n}\r\n\r\nexport const initialMatrix5 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 5, col_2: 5 },\r\n        { col_1: -1, col_2: 7 },\r\n    ]\r\n}\r\n\r\nexport const initialMatrix6 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 3, col_2: 5, col_3: 2 },\r\n        { col_1: 2, col_2: 3, col_3: -2 },\r\n    ]\r\n}\r\nexport const initialMatrix7 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 2, col_2: 4 },\r\n        { col_1: 1, col_2: 3 },\r\n        { col_1: 0, col_2: 0 },\r\n        { col_1: 0, col_2: 0 },\r\n    ]\r\n}\r\nexport const initialMatrix8 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -2, col_3: 3 },\r\n        { col_1: 5, col_2: 8, col_3: -1 },\r\n        { col_1: 2, col_2: 1, col_3: 1 },\r\n        { col_1: -1, col_2: 4, col_3: -3 },\r\n    ]\r\n}\r\nexport const initialMatrix9 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: 2, col_3: 3 },\r\n        { col_1: 3, col_2: 4, col_3: 5 },\r\n        { col_1: 5, col_2: 6, col_3: 7},\r\n        { col_1: 7, col_2: 8, col_3: 9 },\r\n    ]\r\n}\r\nexport const initialMatrix10 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 6, col_2: -7, col_3: 2 },\r\n        { col_1: 4, col_2: -5, col_3: 2 },\r\n        { col_1: 1, col_2: -1, col_3: 1 },\r\n    ]\r\n}\r\nexport const initialMatrix11 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 2, col_2: 1, col_3: 2 },\r\n        { col_1: 1, col_2: 0, col_3: 1 },\r\n        { col_1: 4, col_2: 1, col_3: 4 },\r\n    ]\r\n}\r\nexport const initialMatrix12 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 4, col_2: -2 },\r\n        { col_1: 3, col_2: -1 },\r\n    ]\r\n}\r\nexport const initialInputColumn12 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: 0},\r\n    ]\r\n}\r\nexport const initialMatrix13 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 2, col_2: 3 },\r\n        { col_1: 4, col_2: 1 },\r\n    ]\r\n}\r\nexport const initialInputColumn13 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: -0.7, col_2: 1},\r\n    ]\r\n}\r\nexport const initialMatrix14 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 7, col_2: -2 },\r\n        { col_1: 3, col_2: -1 },\r\n    ]\r\n}\r\nexport const initialInputColumn14 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: 0},\r\n    ]\r\n}\r\nexport const initialMatrix15 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 5, col_2: 0, col_3: 0, col_4: -1, },\r\n        { col_1: 1, col_2: 0, col_3: -1, col_4: 1, },\r\n        { col_1: -1.5, col_2: 1, col_3: -2, col_4: 1, },\r\n        { col_1: -1, col_2: 1, col_3: 3, col_4: -3, },\r\n    ]\r\n}\r\nexport const initialMatrix16 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -1},\r\n        { col_1: 2, col_2: -1},\r\n    ]\r\n}\r\nexport const initialMatrix17 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"x\", ...columnSettings },\r\n        { key: \"col_2\", name: \"y\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0},\r\n    ]\r\n}\r\nexport const initialMatrix18 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"x\", ...columnSettings },\r\n        { key: \"col_2\", name: \"y\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 1},\r\n    ]\r\n}\r\nexport const initialMatrix19 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"x\", ...columnSettings },\r\n        { key: \"col_2\", name: \"y\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: 1},\r\n    ]\r\n}\r\nexport const initialMatrix20 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"x\", ...columnSettings },\r\n        { key: \"col_2\", name: \"y\", ...columnSettings },\r\n        { key: \"col_3\", name: \"u\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 1, col_3: 2},\r\n    ]\r\n}\r\nexport const initialMatrix21 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"a\", ...columnSettings },\r\n        { key: \"col_2\", name: \"y(a)\", ...columnSettings },\r\n        { key: \"col_3\", name: \"b\", ...columnSettings },\r\n        { key: \"col_4\", name: \"y(b)\", ...columnSettings }\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 1, col_4: 2},\r\n    ]\r\n}\r\nexport const initialMatrix22 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"a\", ...columnSettings },\r\n        { key: \"col_2\", name: \"y(a)\", ...columnSettings },\r\n        { key: \"col_3\", name: \"b\", ...columnSettings },\r\n        { key: \"col_4\", name: \"y(b)\", ...columnSettings }\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 1, col_4: 5},\r\n    ]\r\n}"],"sourceRoot":""}