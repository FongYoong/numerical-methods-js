{"version":3,"sources":["components/methods/nonlinear/FalsePosition.js","components/methods/nonlinear/DesmosGraph.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","Steps","latexContent","graphCallback","params","styleClasses","useState","currentIteration","setCurrentIteration","hasError","exceedIterError","errorText","exceedIterErrorText","results","currentResult","iterations","oldLowerXLatex","String","raw","oldUpperXLatex","newLowerXLatex","newUpperXLatex","newRootXLatex","formatLatex","oldLowerX","oldUpperX","rootX","rootFound","lowerFuncResult","rootFuncResult","product","newLowerX","newUpperX","oldRootXLatex","errorX","errorThreshold","calculator","current","setExpression","id","Desmos","BLUE","latex","mathjsToLatex","functionValue","GREEN","pointStyle","POINT","label","showLabel","upperFuncResult","RED","smallScreen","useMediaQuery","useTheme","breakpoints","down","className","in","severity","direction","alignItems","justify","xs","item","triggerOnce","variant","height","width","orientation","onChangeCommitted","event","value","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","duration","tex","addStyles","NonlinearFalsePosition","methodName","useEffect","document","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","lowerX","setLowerX","upperX","setUpperX","intervalError","lowerXErrorText","upperXErrorText","setErrorThreshold","thresholdError","thresholdErrorText","solve","isValidMath","i","evaluate","x","Math","abs","push","runTour","setRunTour","openErrorSnackbar","setOpenErrorSnackbar","errorSnackbarClose","reason","cascade","disabled","onChange","mathField","mathquillDidMount","type","parseFloat","error","toString","helperText","arrow","placement","aria-label","onClick","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","open","autoHideDuration","onClose","DialogTitle","withStyles","root","closeButton","top","grey","props","children","classes","other","disableTypography","DialogContent","defaultIteration","desmosDiv","useRef","updateGraph","useCallback","style","keypad","expressions","expressionsTopbar","component","ref","NewtonDesmos","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","dividers"],"mappings":"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","file":"static/js/9.e56cda70.chunk.js","sourcesContent":["import {isValidMath, mathjsToLatex, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport DesmosGraph from \"./DesmosGraph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide, JackInTheBox } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".interval-input\",\r\n        title: \"Interval\",\r\n        content:\r\n            \"Select the lower and upper bounds of x\",\r\n    },\r\n    {\r\n        target: \".errorThreshold-input\",\r\n        title: \"Error Threshold\",\r\n        content:\r\n            \"Specify the minimum error threshold\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction NonlinearFalsePosition({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Function\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`x-\\cos\\left( x\\right)`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Invalid equation!\";\r\n    }\r\n\r\n    // Interval\r\n    const [lowerX, setLowerX] = useState(0);\r\n    const [upperX, setUpperX] = useState(3);\r\n    let intervalError = false;\r\n    let lowerXErrorText = \"\";\r\n    let upperXErrorText = \"\";\r\n    if (lowerX >= upperX) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"Lower x must be lower than upper x!\";\r\n        upperXErrorText = \"Upper x must be higher than lower x!\";\r\n    }\r\n\r\n    // Error threshold\r\n    const [errorThreshold, setErrorThreshold] = useState(0.0005);\r\n    let thresholdError = false;\r\n    let thresholdErrorText = \"\";\r\n    if (errorThreshold < 0) {\r\n        thresholdError = true;\r\n        thresholdErrorText = \"Threshold cannot be negative!\";\r\n    }\r\n\r\n    let hasError = functionError || intervalError || thresholdError;\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let exceedIterError = false;\r\n    let exceedIterErrorText = \"\";\r\n    let results = [];\r\n    let iterations = 1;\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        let i = 0;\r\n        while (true) {\r\n            let oldLowerX = (i === 0) ? lowerX: results[i - 1].newLowerX;\r\n            let oldUpperX = (i === 0) ? upperX: results[i - 1].newUpperX;\r\n            let newLowerX = oldLowerX;\r\n            let newUpperX = oldUpperX;\r\n            let lowerFuncResult, upperFuncResult, rootX, rootFuncResult, errorX;\r\n            try {\r\n                lowerFuncResult = functionValue.evaluate({x : oldLowerX});\r\n                upperFuncResult = functionValue.evaluate({x : oldUpperX}); // upperFuncResult is for visualisation purposes, no relevance in the calculations\r\n                rootX = oldUpperX - upperFuncResult * (oldLowerX - oldUpperX) / (lowerFuncResult - upperFuncResult);\r\n                rootFuncResult = functionValue.evaluate({x : rootX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            let rootFound = false;\r\n            let product = lowerFuncResult * rootFuncResult;\r\n            if (product < 0) {\r\n                newUpperX = rootX;\r\n            }\r\n            else if (product > 0) {\r\n                newLowerX = rootX;\r\n            }\r\n            else {\r\n                rootFound = true;\r\n            }\r\n\r\n            if (!rootFound && i !== 0) {\r\n                // Check if root error is lower than threshold\r\n                errorX = Math.abs(rootX - results[i - 1].rootX);\r\n                if (errorX < errorThreshold){\r\n                    rootFound = true;\r\n                }\r\n            }\r\n            results.push({\r\n                oldLowerX,\r\n                newLowerX,\r\n                oldUpperX,\r\n                newUpperX,\r\n                rootX,\r\n                lowerFuncResult,\r\n                upperFuncResult,\r\n                rootFuncResult,\r\n                errorX,\r\n            });\r\n            i++;\r\n            if (rootFound) {\r\n                break;\r\n            }\r\n            if (i > 10000) {\r\n                exceedIterError = true;\r\n                exceedIterErrorText = \"Exceeded 10000 iterations!\";\r\n                break;\r\n            }\r\n        }\r\n        iterations = i;\r\n    }\r\n    else {\r\n        solve = false;\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        if (hasError) {\r\n            setOpenErrorSnackbar(true);\r\n        }\r\n        else {\r\n            setRunTour(true)\r\n        }\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n    const [openErrorSnackbar, setOpenErrorSnackbar] = useState(false);\r\n\r\n    const errorSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenErrorSnackbar(false);\r\n    };\r\n\r\n    let params = {functionValue, errorThreshold, iterations, exceedIterError, exceedIterErrorText, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function:\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"lowerX-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Lower x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setLowerX(parseFloat(event.target.value))}\r\n                                        error={intervalError}\r\n                                        label={intervalError?\"Error\":\"\"}\r\n                                        defaultValue={lowerX.toString()}\r\n                                        helperText={lowerXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"upperX-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Upper x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setUpperX(parseFloat(event.target.value))}\r\n                                        error={intervalError}\r\n                                        label={intervalError?\"Error\":\"\"}\r\n                                        defaultValue={upperX.toString()}\r\n                                        helperText={upperXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"errorThreshold-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Error threshold:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setErrorThreshold(parseFloat(event.target.value))}\r\n                                        error={thresholdError}\r\n                                        label={thresholdError?\"Error\":\"\"}\r\n                                        defaultValue={errorThreshold.toString()}\r\n                                        helperText={thresholdErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider  />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n            <Snackbar open={openErrorSnackbar} autoHideDuration={2000} onClose={errorSnackbarClose}>\r\n                <Alert onClose={errorSnackbarClose} severity=\"error\">\r\n                    There is an error with the {functionError?\"function\":\"iterations\"}.\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let hasError = params.exceedIterError;\r\n    let errorText = params.exceedIterErrorText;\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let oldLowerXLatex = String.raw`x_{lower_{${currentIteration - 1}}}`;\r\n        let oldUpperXLatex = String.raw`x_{upper_{${currentIteration - 1}}}`;\r\n        let newLowerXLatex = String.raw`x_{lower_{${currentIteration}}}`;\r\n        let newUpperXLatex = String.raw`x_{upper_{${currentIteration}}}`;\r\n        let newRootXLatex = String.raw`x_{root_{${currentIteration - 1}}}`;\r\n        latexContent=String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\begin{array}{lcl}\r\n        \\\\ ${oldLowerXLatex} &=& ${formatLatex(currentResult.oldLowerX)}\r\n        \\\\ ${oldUpperXLatex} &=& ${formatLatex(currentResult.oldUpperX)}\r\n        \\\\ ${newRootXLatex} &=&  ${oldUpperXLatex}-\\frac{f(${oldUpperXLatex})(${oldLowerXLatex} - ${oldUpperXLatex})}{f(${oldLowerXLatex}) - f(${oldUpperXLatex})}\r\n        \\\\                       &=& ${formatLatex(currentResult.rootX)}\r\n        \\\\\r\n        `;\r\n\r\n        let rootFound = false;\r\n        latexContent += String.raw`\r\n        \\\\ f(${oldLowerXLatex}) &=& ${formatLatex(currentResult.lowerFuncResult)}\r\n        \\\\ f(${newRootXLatex}) &=& ${formatLatex(currentResult.rootFuncResult)}\r\n        \\\\\r\n        \\\\\r\n        `;\r\n        let product = currentResult.lowerFuncResult * currentResult.rootFuncResult;\r\n        if (product < 0) {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\text{Given that } f(${oldLowerXLatex})f(${newRootXLatex}) < 0,\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${newLowerXLatex} &=& ${oldLowerXLatex}\r\n            \\\\                   &=& ${formatLatex(currentResult.newLowerX)}\r\n            \\\\ ${newUpperXLatex} &=& ${newRootXLatex}\r\n            \\\\                   &=& ${formatLatex(currentResult.newUpperX)}\r\n            `;\r\n        }\r\n        else if (product > 0) {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\text{Given that } f(${oldLowerXLatex})f(${newRootXLatex}) > 0,\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${newLowerXLatex} &=& ${newRootXLatex}\r\n            \\\\                   &=& ${formatLatex(currentResult.newLowerX)}\r\n            \\\\ ${newUpperXLatex} &=& ${oldUpperXLatex}\r\n            \\\\                   &=& ${formatLatex(currentResult.newUpperX)}\r\n            `;\r\n        }\r\n        else {\r\n            rootFound = true;\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\text{Root found because }\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ f(${oldLowerXLatex})f(${newRootXLatex}) == 0.\r\n            `;\r\n        }\r\n        \r\n        if (!rootFound && currentIteration > 1) {\r\n            let oldRootXLatex = String.raw`x_{root_{${currentIteration - 2}}}`;\r\n            latexContent += String.raw`\r\n            \\\\ ${oldRootXLatex} &=& ${formatLatex(results[currentIteration - 2].rootX)}\r\n            \\\\ Error &=& |${newRootXLatex} - ${oldRootXLatex}|\r\n            \\\\       &=& |${formatLatex(currentResult.errorX)}|\r\n            \\\\\r\n            `;\r\n            if (currentResult.errorX < params.errorThreshold) {\r\n                latexContent += String.raw`\r\n                \\end{array}\r\n                \\\\\r\n                \\\\ \\text{Root found because:}\r\n                \\\\\r\n                \\begin{array}{lcl}\r\n                \\\\ Error &<& Error Threshold\r\n                \\\\ ${formatLatex(currentResult.errorX)} &<& ${formatLatex(params.errorThreshold)}\r\n                `;\r\n            }\r\n        }\r\n        latexContent += String.raw`\\end{array}\\end{array}`;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: mathjsToLatex(params.functionValue)});\r\n            calculator.current.setExpression({ id: 'lowerX', color: Desmos.Colors.GREEN, pointStyle: Desmos.Styles.POINT, label: \"Lower\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.oldLowerX)}, ${formatLatex(currentResult.lowerFuncResult)})` });\r\n            calculator.current.setExpression({ id: 'upperX', color: Desmos.Colors.GREEN, pointStyle: Desmos.Styles.POINT, label: \"Upper\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.oldUpperX)}, ${formatLatex(currentResult.upperFuncResult)})` });\r\n            calculator.current.setExpression({ id: 'root', color: Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, label: \"Root\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.rootX)}, 0)` });\r\n        }\r\n    }\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                    <Grid xs item>\r\n                        <Zoom triggerOnce>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Converged after {params.iterations} iterations\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Zoom>\r\n                    </Grid>\r\n                \r\n                    <Grid container xs item direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                        <Grid xs item className=\"iteration-slider\">\r\n                            <Slide direction=\"left\" triggerOnce>\r\n                                <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                    <Slider\r\n                                        orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                        onChangeCommitted={(event, value) => setCurrentIteration(value)}\r\n                                        defaultValue={1}\r\n                                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                                        step={1}\r\n                                        marks\r\n                                        min={1}\r\n                                        max={params.iterations}\r\n                                        valueLabelDisplay=\"on\"\r\n                                    />\r\n                                    \r\n                                </Box>\r\n                            </Slide>\r\n                        </Grid>\r\n                        <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                            <Grid xs item className=\"step-math\">\r\n                                <Zoom duration={500} triggerOnce>\r\n                                    <Card className={styleClasses.card}>\r\n                                        <CardContent className={styleClasses.cardContent}>\r\n                                            <Typography variant=\"h6\">\r\n                                                Iteration {currentIteration}:\r\n                                            </Typography>\r\n                                            <MathComponent tex={latexContent}/>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Zoom>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid xs item className=\"graph-button\">\r\n                            <Slide direction=\"right\" triggerOnce>\r\n                                <DesmosGraph params={{currentIteration, graphCallback, smallScreen, ...params}} />\r\n                            </Slide>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NonlinearFalsePosition;","import {formatLatex, mathjsToLatex} from \"../../utils\";\r\nimport {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport { MathComponent } from 'mathjax-react';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.results[currentIteration - 1];\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            params.graphCallback(calculator, currentResult);\r\n        }\r\n    }, [calculator, currentResult, params]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            <Box component=\"div\" overflow=\"visible\">\r\n                <MathComponent tex={`${mathjsToLatex(params.functionValue)}`}/>\r\n            </Box>\r\n            <Typography variant=\"h6\">\r\n                Iteration {currentIteration}:\r\n            </Typography>\r\n            <Box width=\"70%\">\r\n                <Slider\r\n                    orientation=\"horizontal\"\r\n                    onChange={(event, value) => setCurrentIteration(value)}\r\n                    defaultValue={defaultIteration}\r\n                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                    step={1}\r\n                    marks\r\n                    min={1}\r\n                    max={params.iterations}\r\n                    valueLabelDisplay=\"auto\"\r\n                />\r\n            </Box>\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction NewtonDesmos({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewtonDesmos;"],"sourceRoot":""}