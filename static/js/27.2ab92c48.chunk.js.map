{"version":3,"sources":["components/Graph.js","components/methods/optimisation/GoldenSearch.js"],"names":["DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","aria-label","onClick","DialogContent","params","useState","currentIteration","setCurrentIteration","defaultIteration","currentResult","iterations","results","desmosDiv","useRef","calculator","updateGraph","useCallback","current","graphCallback","useEffect","smallScreen","style","width","height","Desmos","keypad","expressions","expressionsTopbar","container","direction","alignItems","justify","functionValue","component","overflow","math","mathjsToLatex","block","variant","orientation","onChange","event","value","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","item","ref","Graph","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","open","id","dividers","TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","paper","textAlign","text","primary","card","cardContent","fab","bottom","Steps","latexContent","styleClasses","hasError","exceedIterError","errorText","exceedIterErrorText","oldLowerXLatex","String","raw","oldUpperXLatex","newLowerXLatex","newUpperXLatex","formatLatex","oldLowerX","oldUpperX","d","aX","bX","lowerFuncResult","upperFuncResult","newLowerX","newUpperX","interval","intervalThreshold","setExpression","BLUE","latex","GREEN","pointStyle","POINT","label","showLabel","useMediaQuery","useTheme","breakpoints","down","in","severity","xs","triggerOnce","onChangeCommitted","duration","addStyles","OptiGoldenSearch","methodName","document","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","lowerX","setLowerX","upperX","setUpperX","intervalError","lowerXErrorText","upperXErrorText","lowerXError","isNaN","upperXError","setIntervalThreshold","thresholdError","thresholdErrorText","goldenRatio","Math","sqrt","solve","isValidMath","i","evaluate","x","abs","push","runTour","setRunTour","cascade","disabled","mathField","mathquillDidMount","type","parseFloat","error","toString","helperText","arrow","placement","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action"],"mappings":"4UA+BMA,EAAcC,aAbC,SAACC,GAAD,MAAY,CAC7BC,KAAM,CACFC,OAAQ,EACRC,QAASH,EAAMI,QAAQ,IAE3BC,YAAa,CACTC,SAAU,WACVC,MAAOP,EAAMI,QAAQ,GACrBI,IAAKR,EAAMI,QAAQ,GACnBK,MAAOT,EAAMU,QAAQC,KAAK,SAIdZ,EAAyB,SAACa,GACOA,EAAzCC,SAD6C,IACnCC,EAA+BF,EAA/BE,QAASC,EAAsBH,EAAtBG,QAAYC,EADa,YACHJ,EADG,kCAEpD,OACE,cAAC,IAAD,yBAAgBK,mBAAiB,EAACC,UAAWJ,EAAQb,MAAUe,GAA/D,aACGD,EACC,cAAC,IAAD,CAAYI,aAAW,QAAQD,UAAWJ,EAAQT,YAAae,QAASL,EAAxE,SACE,cAAC,IAAD,MAEA,WAKNM,EAAiBtB,aAAW,SAACC,GAAD,MAAY,CAC1CC,KAAM,CACFE,QAASH,EAAMI,QAAQ,OAFRL,EAInB,SAACa,GACD,IAAMU,EAASV,EAAMU,OADV,EAEqCC,mBAASD,EAAOE,kBAFrD,mBAEJA,EAFI,KAEcC,EAFd,KAGLC,EAAmBJ,EAAOE,iBAC1BG,EAAgBL,EAAOM,WAAa,EAAIN,EAAOO,QAAQL,EAAmB,GAAK,KAC/EM,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAEpBE,EAAcC,uBAAY,WACxBF,EAAWG,SACXb,EAAOc,cAAcJ,EAAYL,KAEtC,CAACK,EAAYL,EAAeL,IAkB/B,OAjBAW,IAEAI,qBAAU,WACN,GAAIP,EAAUK,QAAQ,CAClB,IAAMG,EAAc1B,EAAM0B,YAC1BR,EAAUK,QAAQI,MAAMC,MAAQF,EAAY,OAAO,OACnDR,EAAUK,QAAQI,MAAME,OAASH,EAAY,OAAO,OAMpDN,EAAWG,QAAUO,qBAA0BZ,EAAUK,QALnC,CAClBQ,QAAQ,EACRC,aAAa,EACbC,mBAAmB,IAGvBZ,OAEL,IAIC,eAAC,IAAD,CAAMa,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,QAAQ,SAA/D,UACK3B,EAAO4B,eAAiB,cAAC,IAAD,CAAKC,UAAU,MAAMC,SAAS,UAA9B,SACjB,cAAC,IAAD,CAAKC,KAAI,UAAKC,YAAchC,EAAO4B,gBAAkBK,OAAK,MAGlE,cAAC,IAAD,CAAYC,QAAQ,KAApB,SACKlC,EAAOM,WAAa,EAApB,oBAAqCJ,EAArC,KAA2D,yBAE/DF,EAAOM,WAAa,GACjB,cAAC,IAAD,CAAKY,MAAM,MAAX,SACI,cAAC,IAAD,CACIiB,YAAY,aACZC,SAAU,SAACC,EAAOC,GAAR,OAAkBnC,EAAoBmC,IAChDC,aAAcnC,EACdoC,kBAAgB,8BAChBC,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK5C,EAAOM,WACZuC,kBAAkB,WAI9B,cAAC,IAAD,CAAMC,MAAI,EAAV,SACI,qBAAKC,IAAKvC,YAiCXwC,IA1Bf,YAAuC,IAAvBhD,EAAsB,EAAtBA,OAAQgB,EAAc,EAAdA,YAAc,EACEf,oBAAS,GADX,mBAC3BgD,EAD2B,KACfC,EADe,KAM1BC,EAAc,WAClBD,GAAc,IAGlB,OACI,qCACI,cAAC,IAAD,CAAQhB,QAAQ,YAAY/C,MAAM,UAAUiE,QAAS,cAAC,IAAD,IAAiBtD,QATtD,WACpBoD,GAAc,IAQV,wBAIA,cAAC,IAAD,CAAQG,OAAO,QAAQC,UAAU,EAAOC,WAAYvC,EAAavB,QAAS0D,EAAaX,kBAAgB,0BAA0BgB,KAAMP,EAAvI,SACI,eAAC,IAAD,WACI,cAACzE,EAAD,CAAaiF,GAAG,0BAA0BhE,QAAS0D,IACnD,cAACpD,EAAD,CAAe2D,UAAQ,EAAC1C,YAAaA,EAAahB,OAAQA,c,sWClGxE2D,EAA4B,CAC9B,CACIC,OAAQ,kBACRC,MAAO,WACPC,QACA,4FACAC,eAAe,GAEnB,CACIH,OAAQ,kBACRC,MAAO,WACPC,QACI,0CAER,CACIF,OAAQ,2BACRC,MAAO,qBACPC,QACI,0CAER,CACIF,OAAQ,oBACRC,MAAO,mBACPC,QACI,0DAER,CACIF,OAAQ,gBACRC,MAAO,aACPC,QACI,yCAKNE,EAAYC,aAAW,SAACvF,GAAD,MAAY,CACvCwF,MAAO,CACLrF,QAASH,EAAMI,QAAQ,GACvBqF,UAAW,SACXhF,MAAOT,EAAMU,QAAQgF,KAAKC,QAC1BzF,OAAQF,EAAMI,QAAQ,IAExB0C,UAAW,CACT,QAAS,CACL5C,OAAQF,EAAMI,QAAQ,KAG5BwF,KAAM,CACJ1F,OAAQF,EAAMI,QAAQ,KAExByF,YAAa,CACXzC,SAAU,OACV,QAAS,CACLlD,OAAQF,EAAMI,QAAQ,MAG5B0F,IAAK,CACHxF,SAAU,QACVyF,OAAQ/F,EAAMI,QAAQ,GACtBG,MAAOP,EAAMI,QAAQ,QA2QzB,SAAS4F,EAAT,GAA0B,IAWlBC,EAAc7D,EAXNd,EAAS,EAATA,OAEN4E,EAAeZ,IAFA,EAI2B/D,mBAAS,GAJpC,mBAIdC,EAJc,KAIIC,EAJJ,KAKjB0E,EAAW7E,EAAO8E,gBAClBC,EAAY/E,EAAOgF,oBAGnB3E,EADUL,EAAOO,QACOL,EAAmB,GAI/C,GAAIA,EAAmBF,EAAOM,WAC1BH,EAAoBH,EAAOM,gBAE1B,CACD,IAAI2E,EAAiBC,OAAOC,IAAV,wCAA0BjF,EAAmB,GAC3DkF,EAAiBF,OAAOC,IAAV,wCAA0BjF,EAAmB,GAC3DmF,EAAiBH,OAAOC,IAAV,wCAA0BjF,GACxCoF,EAAiBJ,OAAOC,IAAV,wCAA0BjF,GAC5CyE,EAAeO,OAAOC,IAAV,42BAIPF,EAAsBM,YAAYlF,EAAcmF,WAChDJ,EAAsBG,YAAYlF,EAAcoF,WAEvCL,EAAoBH,EACvBM,YAAYlF,EAAcqF,GAExBN,EACAG,YAAYlF,EAAcsF,IAC1BV,EACAM,YAAYlF,EAAcuF,IAEvBL,YAAYlF,EAAcwF,iBAC1BN,YAAYlF,EAAcyF,kBAItCzF,EAAcwF,gBAAkBxF,EAAcyF,gBAC9CnB,GAAgBO,OAAOC,IAAX,0oBAMPE,EAAsBJ,EACAM,YAAYlF,EAAc0F,WAChDT,EACsBC,YAAYlF,EAAc2F,YAGhD3F,EAAcwF,gBAAkBxF,EAAcyF,gBACnDnB,GAAgBO,OAAOC,IAAX,0oBAMPE,EACsBE,YAAYlF,EAAc0F,WAChDT,EAAsBF,EACAG,YAAYlF,EAAc2F,YAIrDrB,GAAgBO,OAAOC,IAAX,0oBAMPE,EACsBE,YAAYlF,EAAc0F,WAChDT,EACsBC,YAAYlF,EAAc2F,YAGzDrB,GAAgBO,OAAOC,IAAX,qSAE0BG,EAAoBD,EACpBE,YAAYlF,EAAc4F,WAE5D/F,IAAqBF,EAAOM,aAC5BqE,GAAgBO,OAAOC,IAAX,olBAQPI,YAAYlF,EAAc4F,UAAiBV,YAAYvF,EAAOkG,qBAIvEvB,GAAgBO,OAAOC,IAAX,2EAEZrE,EAAgB,SAACJ,EAAYL,GACzBK,EAAWG,QAAQsF,cAAc,CAAE1C,GAAI,WAAYtE,MAAOiC,SAAcgF,KAAMC,MAAOrE,YAAchC,EAAO4B,iBAC1GlB,EAAWG,QAAQsF,cAAc,CAAE1C,GAAI,MAAOtE,MAAOiC,SAAckF,MAAOC,WAAYnF,SAAcoF,MAAOC,MAAO,MAAOC,WAAU,EAAML,MAAM,IAAD,OACtId,YAAYlF,EAAcsF,IAD4G,aACpGJ,YAAYlF,EAAcwF,iBAD0E,OAE9InF,EAAWG,QAAQsF,cAAc,CAAE1C,GAAI,MAAOtE,MAAOiC,SAAckF,MAAOC,WAAYnF,SAAcoF,MAAOC,MAAO,MAAOC,WAAU,EAAML,MAAM,IAAD,OACtId,YAAYlF,EAAcuF,IAD4G,aACpGL,YAAYlF,EAAcyF,iBAD0E,QAKtJ,IAAM9E,EAAc2F,YAAcC,cAAWC,YAAYC,KAAK,OAE9D,OACI,eAAC,IAAD,CAAWlH,UAAWgF,EAAapD,UAAnC,UACI,cAAC,IAAD,CAAUuF,GAAIlC,EAAd,SACI,cAAC,IAAD,CAAOmC,SAAS,QAAhB,SACKjC,MAGT,cAAC,IAAD,CAAUgC,IAAKlC,EAAf,SACI,eAAC,IAAD,CAAMjF,UAAU,UAAU4B,WAAS,EAAC1C,QAAS,EAAG2C,UAAU,SAASC,WAAW,SAASC,QAAQ,SAA/F,UACI,cAAC,IAAD,CAAMsF,IAAE,EAACnE,MAAI,EAAb,SACI,cAAC,IAAD,CAAMoE,aAAW,EAAjB,SACI,cAAC,IAAD,CAAMtH,UAAWgF,EAAaN,KAA9B,SACI,cAAC,IAAD,CAAa1E,UAAWgF,EAAaL,YAArC,SACI,eAAC,IAAD,CAAYrC,QAAQ,KAApB,6BACqBlC,EAAOM,WAD5B,yBAQhB,eAAC,IAAD,CAAMkB,WAAS,EAACyF,IAAE,EAACnE,MAAI,EAACrB,UAAWT,EAAY,SAAS,MAAOU,WAAW,SAASC,QAAQ,eAA3F,UACI,cAAC,IAAD,CAAMsF,IAAE,EAACnE,MAAI,EAAClD,UAAU,mBAAxB,SACI,cAAC,IAAD,CAAO6B,UAAU,OAAOyF,aAAW,EAAnC,SACI,cAAC,IAAD,CAAKzD,GAAG,mBAAmBtC,OAAQH,EAAY,KAAK,QAASE,MAAOF,EAAY,OAAO,KAAvF,SACI,cAAC,IAAD,CACImB,YAAanB,EAAY,aAAa,WACtCmG,kBAAmB,SAAC9E,EAAOC,GAAR,OAAkBnC,EAAoBmC,IACzDC,aAAc,EACdC,kBAAgB,8BAChBC,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK5C,EAAOM,WACZuC,kBAAkB,aAMlC,cAAC,IAAD,CAAMoE,IAAE,EAACnE,MAAI,EAACtB,WAAS,EAAC1C,QAAS,EAAG2C,UAAU,SAASC,WAAW,SAASC,QAAQ,SAAnF,SACI,cAAC,IAAD,CAAMsF,IAAE,EAACnE,MAAI,EAAClD,UAAU,YAAxB,SACI,cAAC,IAAD,CAAMwH,SAAU,IAAKF,aAAW,EAAhC,SACI,cAAC,IAAD,CAAMtH,UAAWgF,EAAaN,KAA9B,SACI,eAAC,IAAD,CAAa1E,UAAWgF,EAAaL,YAArC,UACI,eAAC,IAAD,CAAYrC,QAAQ,KAApB,uBACehC,EADf,OAGA,cAAC,IAAD,CAAK6B,KAAM4C,EAAc1C,OAAK,eAMlD,cAAC,IAAD,CAAMgF,IAAE,EAACnE,MAAI,EAAClD,UAAU,eAAxB,SACI,cAAC,IAAD,CAAO6B,UAAU,QAAQyF,aAAW,EAApC,SACI,cAAC,IAAD,CAAOlH,OAAM,aAAGE,mBAAkBY,gBAAeE,eAAgBhB,oBA9ajGqH,sBAwbeC,UAtbf,YAAyC,IAAdC,EAAa,EAAbA,WACvBxG,qBAAU,WAENyG,SAAS3D,MAAQ0D,KAGrB,IAMI3F,EANEgD,EAAeZ,IANe,EASM/D,mBAASiF,OAAOC,IAAP,IAAD,gCATd,mBAS7BsC,EAT6B,KASdC,EATc,OAUIzH,mBAAS,IAVb,mBAU7B0H,EAV6B,KAUfC,EAVe,KAahCC,GAAgB,EAChBC,EAAoB,GACxB,IACIlG,EAAgBmG,YAAMJ,GAE1B,UACIE,GAAgB,EAChBC,EAAoB,oBApBY,MAwBR7H,oBAAU,GAxBF,mBAwB7B+H,EAxB6B,KAwBrBC,EAxBqB,OAyBRhI,mBAAS,GAzBD,mBAyB7BiI,EAzB6B,KAyBrBC,EAzBqB,KA0BhCC,GAAgB,EAChBC,EAAkB,GAClBC,EAAkB,GAClBN,GAAUE,IACVE,GAAgB,EAChBC,EAAkB,sCAClBC,EAAkB,wCAEtB,IAAIC,GAAc,EACdC,MAAMR,KACNO,GAAc,EACdF,EAAkB,6BAEtB,IAAII,GAAc,EACdD,MAAMN,KACNO,GAAc,EACdH,EAAkB,6BA1Cc,OA8CcrI,mBAAS,KA9CvB,qBA8C7BiG,GA9C6B,MA8CVwC,GA9CU,MA+ChCC,IAAiB,EACjBC,GAAqB,GACrB1C,GAAoB,IACpByC,IAAiB,EACjBC,GAAqB,iCAGzB,IAAI/D,GAAWgD,GAAiBO,GAAiBG,GAAeE,GAAeE,GAGzEE,IAAeC,KAAKC,KAAK,GAAK,GAAK,EACrCC,IAAQ,EACRlE,IAAkB,EAClBE,GAAsB,GACtBzE,GAAU,GACVD,GAAa,EACjB,GAAI2I,YAAYrH,KAAmBiD,GAAU,CACzCmE,IAAQ,EAER,IADA,IAAIE,GAAI,IACK,CACT,IAAI1D,GAAmB,IAAN0D,GAAWlB,EAAQzH,GAAQ2I,GAAI,GAAGnD,UAC/CN,GAAmB,IAANyD,GAAWhB,EAAQ3H,GAAQ2I,GAAI,GAAGlD,UAC7CN,GAAImD,IAAepD,GAAYD,IACjCG,GAAKF,GAAYC,GACjBE,GAAKJ,GAAYE,GACjBK,GAAYJ,GACZK,GAAYJ,GACZC,QAAe,EAAEC,QAAe,EACpC,IACID,GAAkBjE,EAAcuH,SAAS,CAACC,EAAIzD,KAC9CG,GAAkBlE,EAAcuH,SAAS,CAACC,EAAIxD,KAElD,UACIf,IAAW,EACXgD,GAAgB,EAChBC,EAAoB,8BACpBkB,IAAQ,EACR,MAEAnD,GAAkBC,GAClBC,GAAYP,GAEPK,GAAkBC,KACvBE,GAAYP,IAGhB,IAAMQ,GAAW6C,KAAKO,IAAIrD,GAAYD,IAetC,GAbAxF,GAAQ+I,KAAK,CACT9D,aACAO,aACAN,aACAO,aACAN,KACAC,MACAC,MACAC,mBACAC,mBACAG,gBAEJiD,GACQ,IAAO,CACXpE,IAAkB,EAClBE,GAAsB,6BACtB,MAEJ,GAAIiB,GAAWC,GACX,MAGR5F,GAAa4I,GArHmB,OAyHNjJ,oBAAS,GAzHH,qBAyH7BsJ,GAzH6B,MAyHpBC,GAzHoB,MAmIhCxJ,GAAS,CAAC4B,gBAAesE,qBAAmB2C,eAAavI,cAAYwE,mBAAiBE,uBAAqBzE,YAE/G,OACI,qCACI,cAAC,IAAD,CAAQgH,WAAcA,IACtB,cAAC,IAAD,CAAO3H,UAAWgF,EAAaV,MAA/B,SACI,cAAC,IAAD,CAAWtE,UAAWgF,EAAapD,UAAnC,SACA,eAAC,IAAD,CAAM4F,SAAU,IAAKF,aAAW,EAACuC,SAAO,EAAxC,UACI,cAAC,IAAD,CAAMjI,WAAS,EAAC1C,QAAS,EAAG2C,UAAU,MAAMC,WAAW,SAASC,QAAQ,SAAxE,SACI,cAAC,IAAD,CAAMsF,IAAE,EAACnE,MAAI,EAAClD,UAAU,iBAAxB,SACI,cAAC,IAAD,CAAMA,UAAWgF,EAAaN,KAA9B,SACI,eAAC,IAAD,CAAa1E,UAAWgF,EAAaL,YAArC,UACI,cAAC,IAAD,CAAYrC,QAAQ,KAApB,uBAGA,cAAC,oBAAD,CACIwH,UAAU,EACVrD,MAAOoB,EACPrF,SAAU,SAACuH,GACP/B,EAAgB+B,EAAUvF,QAC1BsD,EAAiBiC,EAAUtD,UAE/BuD,kBAAmB,SAACD,GAChB/B,EAAgB+B,EAAUvF,WAGlC,cAAC,IAAD,CAAU2C,GAAIc,EAAd,SACI,cAAC,IAAD,CAAOb,SAAS,QAAhB,SACKc,eAQzB,eAAC,IAAD,CAAMlI,UAAU,iBAAiB4B,WAAS,EAAC1C,QAAS,EAAG2C,UAAU,MAAMC,WAAW,SAASC,QAAQ,SAAnG,UACI,cAAC,IAAD,CAAMsF,IAAE,EAACnE,MAAI,EAAb,SACI,cAAC,IAAD,CAAMlD,UAAWgF,EAAaN,KAA9B,SACI,eAAC,IAAD,CAAa1E,UAAWgF,EAAaL,YAArC,UACI,cAAC,IAAD,CAAYrC,QAAQ,KAApB,4BAGA,cAAC,IAAD,CACIwH,UAAU,EACVG,KAAK,SACLzH,SAAU,SAACC,GAAD,OAAS4F,EAAU6B,WAAWzH,EAAMuB,OAAOtB,SACrDyH,MAAO3B,GAAiBG,EACxB9B,MAAO2B,GAAiBG,EAAa,QAAQ,GAC7ChG,aAAcyF,EAAOgC,WACrBC,WAAY5B,EACZnG,QAAQ,oBAKxB,cAAC,IAAD,CAAM+E,IAAE,EAACnE,MAAI,EAAb,SACI,cAAC,IAAD,CAAMlD,UAAWgF,EAAaN,KAA9B,SACI,eAAC,IAAD,CAAa1E,UAAWgF,EAAaL,YAArC,UACI,cAAC,IAAD,CAAYrC,QAAQ,KAApB,4BAGA,cAAC,IAAD,CACIwH,UAAU,EACVG,KAAK,SACLzH,SAAU,SAACC,GAAD,OAAS8F,EAAU2B,WAAWzH,EAAMuB,OAAOtB,SACrDyH,MAAO3B,GAAiBK,EACxBhC,MAAO2B,GAAiBK,EAAa,QAAQ,GAC7ClG,aAAc2F,EAAO8B,WACrBC,WAAY3B,EACZpG,QAAQ,uBAM5B,cAAC,IAAD,CAAMV,WAAS,EAAC1C,QAAS,EAAG2C,UAAU,MAAMC,WAAW,SAASC,QAAQ,SAAxE,SACI,cAAC,IAAD,CAAMsF,IAAE,EAACnE,MAAI,EAAClD,UAAU,0BAAxB,SACI,cAAC,IAAD,CAAMA,UAAWgF,EAAaN,KAA9B,SACI,eAAC,IAAD,CAAa1E,UAAWgF,EAAaL,YAArC,UACI,cAAC,IAAD,CAAYrC,QAAQ,KAApB,iCAGA,cAAC,IAAD,CACIwH,UAAU,EACVG,KAAK,SACLzH,SAAU,SAACC,GAAD,OAASqG,GAAqBoB,WAAWzH,EAAMuB,OAAOtB,SAChEyH,MAAOpB,GACPlC,MAAOkC,GAAe,QAAQ,GAC9BpG,aAAc2D,GAAkB8D,WAChCC,WAAYrB,GACZ1G,QAAQ,6BAUpC,cAAC,IAAD,IAEA,cAAC,IAAD,CAAU6E,GAAIiC,GAAd,SACI,cAAC,IAAD,CAAM9B,aAAW,EAAjB,SACI,cAAC,IAAD,CAAOtH,UAAWgF,EAAaV,MAA/B,SACK8E,IAAS,cAACtE,EAAD,CAAO1E,OAAQA,WAIrC,cAAC,IAAD,CAASkK,OAAK,EAACrG,MAAM,OAAOsG,UAAU,MAAtC,SACI,cAAC,IAAD,CAAKhL,MAAM,YAAYU,aAAW,OAAOD,UAAWgF,EAAaJ,IAAK1E,QAxHjE,WACb0J,IAAW,IAuHH,SACI,cAAC,IAAD,QAGR,cAAC,IAAD,CACIY,mBAAiB,EACjBC,IAAKd,GACLe,MAAO3G,EACP4G,YAAY,EACZC,gBAAgB,EACZC,OAAQ,CACRC,KAAM,YAEVC,SAlIY,SAACC,GACA,UAAjBA,EAAMC,QAAuC,UAAjBD,EAAMC,QAClCrB,IAAW","file":"static/js/27.2ab92c48.chunk.js","sourcesContent":["import {mathjsToLatex} from \"./utils\";\r\nimport {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.iterations > 0 ? params.results[currentIteration - 1] : null;\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            params.graphCallback(calculator, currentResult);\r\n        }\r\n    }, [calculator, currentResult, params]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            {params.functionValue && <Box component=\"div\" overflow=\"visible\">\r\n                    <TeX math={`${mathjsToLatex(params.functionValue)}`} block />\r\n                </Box>\r\n            }\r\n            <Typography variant=\"h6\">\r\n                {params.iterations > 0 ? `Iteration ${currentIteration}:` : <br />}\r\n            </Typography>\r\n            {params.iterations > 0 &&\r\n                <Box width=\"70%\">\r\n                    <Slider\r\n                        orientation=\"horizontal\"\r\n                        onChange={(event, value) => setCurrentIteration(value)}\r\n                        defaultValue={defaultIteration}\r\n                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                        step={1}\r\n                        marks\r\n                        min={1}\r\n                        max={params.iterations}\r\n                        valueLabelDisplay=\"auto\"\r\n                    />\r\n                </Box>\r\n            }\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction Graph({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Graph;","import {isValidMath, mathjsToLatex, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport Graph from \"../../Graph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".interval-input\",\r\n        title: \"Interval\",\r\n        content:\r\n            \"Select the lower and upper bounds of x\",\r\n    },\r\n    {\r\n        target: \".intervalThreshold-input\",\r\n        title: \"Interval Threshold\",\r\n        content:\r\n            \"Specify the minimum interval threshold\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction OptiGoldenSearch({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Function\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`3+6x-4x^2`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Invalid equation!\";\r\n    }\r\n\r\n    // Interval\r\n    const [lowerX, setLowerX] = useState(-1);\r\n    const [upperX, setUpperX] = useState(2);\r\n    let intervalError = false;\r\n    let lowerXErrorText = \"\";\r\n    let upperXErrorText = \"\";\r\n    if (lowerX >= upperX) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"Lower x must be lower than upper x!\";\r\n        upperXErrorText = \"Upper x must be higher than lower x!\";\r\n    }\r\n    let lowerXError = false;\r\n    if (isNaN(lowerX)) {\r\n        lowerXError = true;\r\n        lowerXErrorText = \"Lower x must be a number!\";\r\n    }\r\n    let upperXError = false;\r\n    if (isNaN(upperX)) {\r\n        upperXError = true;\r\n        upperXErrorText = \"Upper x must be a number!\";\r\n    }\r\n\r\n    // Interval threshold\r\n    const [intervalThreshold, setIntervalThreshold] = useState(0.25);\r\n    let thresholdError = false;\r\n    let thresholdErrorText = \"\";\r\n    if (intervalThreshold < 0) {\r\n        thresholdError = true;\r\n        thresholdErrorText = \"Threshold cannot be negative!\";\r\n    }\r\n\r\n    let hasError = functionError || intervalError || lowerXError || upperXError || thresholdError;\r\n\r\n    // Solve\r\n    const goldenRatio = (Math.sqrt(5) - 1) / 2;\r\n    let solve = false;\r\n    let exceedIterError = false;\r\n    let exceedIterErrorText = \"\";\r\n    let results = [];\r\n    let iterations = 1;\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        let i = 0;\r\n        while (true) {\r\n            let oldLowerX = (i === 0) ? lowerX: results[i - 1].newLowerX;\r\n            let oldUpperX = (i === 0) ? upperX: results[i - 1].newUpperX;\r\n            const d = goldenRatio * (oldUpperX - oldLowerX);\r\n            let aX = oldUpperX - d;\r\n            let bX = oldLowerX + d;\r\n            let newLowerX = aX;\r\n            let newUpperX = bX;\r\n            let lowerFuncResult, upperFuncResult;\r\n            try {\r\n                lowerFuncResult = functionValue.evaluate({x : aX});\r\n                upperFuncResult = functionValue.evaluate({x : bX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            if (lowerFuncResult > upperFuncResult) {\r\n                newLowerX = oldLowerX;\r\n            }\r\n            else if (lowerFuncResult < upperFuncResult) {\r\n                newUpperX = oldUpperX;\r\n            }\r\n            // Check if interval is lower than threshold\r\n            const interval = Math.abs(newUpperX - newLowerX);\r\n            \r\n            results.push({\r\n                oldLowerX,\r\n                newLowerX,\r\n                oldUpperX,\r\n                newUpperX,\r\n                d,\r\n                aX,\r\n                bX,\r\n                lowerFuncResult,\r\n                upperFuncResult,\r\n                interval,\r\n            });\r\n            i++;\r\n            if (i > 10000) {\r\n                exceedIterError = true;\r\n                exceedIterErrorText = \"Exceeded 10000 iterations!\";\r\n                break;\r\n            }\r\n            if (interval < intervalThreshold){\r\n                break;\r\n            }\r\n        }\r\n        iterations = i;\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true)\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {functionValue, intervalThreshold, goldenRatio, iterations, exceedIterError, exceedIterErrorText, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function:\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid className=\"interval-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Lower x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setLowerX(parseFloat(event.target.value))}\r\n                                        error={intervalError || lowerXError}\r\n                                        label={intervalError || lowerXError ?\"Error\":\"\"}\r\n                                        defaultValue={lowerX.toString()}\r\n                                        helperText={lowerXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Upper x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setUpperX(parseFloat(event.target.value))}\r\n                                        error={intervalError || upperXError}\r\n                                        label={intervalError || upperXError ?\"Error\":\"\"}\r\n                                        defaultValue={upperX.toString()}\r\n                                        helperText={upperXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"intervalThreshold-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Interval threshold:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setIntervalThreshold(parseFloat(event.target.value))}\r\n                                        error={thresholdError}\r\n                                        label={thresholdError?\"Error\":\"\"}\r\n                                        defaultValue={intervalThreshold.toString()}\r\n                                        helperText={thresholdErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let hasError = params.exceedIterError;\r\n    let errorText = params.exceedIterErrorText;\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let oldLowerXLatex = String.raw`x_{lower_{${currentIteration - 1}}}`;\r\n        let oldUpperXLatex = String.raw`x_{upper_{${currentIteration - 1}}}`;\r\n        let newLowerXLatex = String.raw`x_{lower_{${currentIteration}}}`;\r\n        let newUpperXLatex = String.raw`x_{upper_{${currentIteration}}}`;\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\begin{array}{lcl}\r\n        \\\\ ${oldLowerXLatex} &=& ${formatLatex(currentResult.oldLowerX)}\r\n        \\\\ ${oldUpperXLatex} &=& ${formatLatex(currentResult.oldUpperX)}\r\n        \\\\\r\n        \\\\ d &=& R (${oldUpperXLatex} - ${oldLowerXLatex})\r\n        \\\\   &=& ${formatLatex(currentResult.d)}\r\n        \\\\\r\n        \\\\ x_a &=& ${oldUpperXLatex} - d\r\n        \\\\     &=& ${formatLatex(currentResult.aX)}\r\n        \\\\ x_b &=& ${oldLowerXLatex} + d\r\n        \\\\     &=& ${formatLatex(currentResult.bX)}\r\n        \\\\\r\n        \\\\ f(x_a) &=& ${formatLatex(currentResult.lowerFuncResult)}\r\n        \\\\ f(x_b) &=& ${formatLatex(currentResult.upperFuncResult)}\r\n        \\\\\r\n        \\\\\r\n        `;\r\n        if (currentResult.lowerFuncResult > currentResult.upperFuncResult) {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\hline\r\n            \\\\ \\text{Given that } f(x_a) > f(x_b),\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${newLowerXLatex} &=& ${oldLowerXLatex}\r\n            \\\\                   &=& ${formatLatex(currentResult.newLowerX)}\r\n            \\\\ ${newUpperXLatex} &=& x_b\r\n            \\\\                   &=& ${formatLatex(currentResult.newUpperX)}\r\n            `;\r\n        }\r\n        else if (currentResult.lowerFuncResult < currentResult.upperFuncResult) {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\hline\r\n            \\\\ \\text{Given that } f(x_a) < f(x_b),\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${newLowerXLatex} &=& x_a\r\n            \\\\                   &=& ${formatLatex(currentResult.newLowerX)}\r\n            \\\\ ${newUpperXLatex} &=& ${oldUpperXLatex}\r\n            \\\\                   &=& ${formatLatex(currentResult.newUpperX)}\r\n            `;\r\n        }\r\n        else {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\hline\r\n            \\\\ \\text{Given that } f(x_a) = f(x_b),\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${newLowerXLatex} &=& x_a\r\n            \\\\                   &=& ${formatLatex(currentResult.newLowerX)}\r\n            \\\\ ${newUpperXLatex} &=& x_b\r\n            \\\\                   &=& ${formatLatex(currentResult.newUpperX)}\r\n            `;\r\n        }\r\n        latexContent += String.raw`\r\n        \\\\\r\n        \\\\ \\text{Uncertainty Interval} &=& |${newUpperXLatex} - ${newLowerXLatex}|\r\n        \\\\                             &=& |${formatLatex(currentResult.interval)}|\r\n        `;\r\n        if (currentIteration === params.iterations) {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\\r\n            \\\\ \\hline\r\n            \\\\ \\text{Stop searching because:}\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ \\text{Uncertainty Interval} &<& \\text{Interval Threshold}\r\n            \\\\ ${formatLatex(currentResult.interval)} &<& ${formatLatex(params.intervalThreshold)}\r\n            `;\r\n        }\r\n        \r\n        latexContent += String.raw`\\end{array}\\end{array}`;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: mathjsToLatex(params.functionValue)});\r\n            calculator.current.setExpression({ id: 'x_a', color: Desmos.Colors.GREEN, pointStyle: Desmos.Styles.POINT, label: \"x_a\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.aX)}, ${formatLatex(currentResult.lowerFuncResult)})` });\r\n            calculator.current.setExpression({ id: 'x_b', color: Desmos.Colors.GREEN, pointStyle: Desmos.Styles.POINT, label: \"x_b\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.bX)}, ${formatLatex(currentResult.upperFuncResult)})` });\r\n        }\r\n    }\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                    <Grid xs item>\r\n                        <Zoom triggerOnce>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Converged after {params.iterations} iterations\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Zoom>\r\n                    </Grid>\r\n                \r\n                    <Grid container xs item direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                        <Grid xs item className=\"iteration-slider\">\r\n                            <Slide direction=\"left\" triggerOnce>\r\n                                <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                    <Slider\r\n                                        orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                        onChangeCommitted={(event, value) => setCurrentIteration(value)}\r\n                                        defaultValue={1}\r\n                                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                                        step={1}\r\n                                        marks\r\n                                        min={1}\r\n                                        max={params.iterations}\r\n                                        valueLabelDisplay=\"on\"\r\n                                    />\r\n                                    \r\n                                </Box>\r\n                            </Slide>\r\n                        </Grid>\r\n                        <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                            <Grid xs item className=\"step-math\">\r\n                                <Zoom duration={500} triggerOnce>\r\n                                    <Card className={styleClasses.card}>\r\n                                        <CardContent className={styleClasses.cardContent}>\r\n                                            <Typography variant=\"h6\">\r\n                                                Iteration {currentIteration}:\r\n                                            </Typography>\r\n                                            <TeX math={latexContent} block />\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Zoom>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid xs item className=\"graph-button\">\r\n                            <Slide direction=\"right\" triggerOnce>\r\n                                <Graph params={{currentIteration, graphCallback, smallScreen, ...params}} />\r\n                            </Slide>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\nexport default OptiGoldenSearch;"],"sourceRoot":""}