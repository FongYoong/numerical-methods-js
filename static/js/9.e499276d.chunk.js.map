{"version":3,"sources":["components/methods/linear/matrix_utils.js","components/methods/linear/Gauss.js"],"names":["MatrixElementEditor","props","ref","React","createRef","onInputChange","value","current","parseInt","isNaN","setState","state","this","column","key","defaultValue","onBlur","onChange","Component","style","display","justifyContent","alignItems","flexDirection","columnSettings","editable","editor","formatter","createNewColumn","numberOfColumns","newNum","name","createNewRow","newRow","i","gridTo2DArray","rowsArray","keys","Object","sort","map","row","k","cloneArray","array","JSON","parse","stringify","isDiagonallyDominant","matrix","length","diagonal","sum","j","Math","abs","numberFactorials","nextPermutation","temp","generatePermutationMapping","target","original","Array","mapping","alreadyCovered","includes","push","matrixToLatex","latex","single","leftBracketOnly","rightBracketOnly","boldRows","transpose","String","raw","rowLength","colLength","isBold","b","content","formatMatrixLatex","initialMatrix","columns","rows","col_1","col_2","col_3","col_4","initialOutputColumn","initialMatrix3","initialInputColumn3","initialOutputColumn3","TOUR_STEPS","title","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","matrixCard","width","divider","height","marginTop","marginBottom","fab","position","bottom","right","Steps","latexContent","smallScreen","params","styleClasses","useState","currentIteration","setCurrentIteration","iterations","results","previousMatrix","originalMatrix","finalMatrix","previousOutput","originalOutput","finalOutput","currentResult","interchange","pivot","formatLatex","factor","finalLatex","initialLatex","operationLatex","className","direction","justify","xs","item","triggerOnce","id","orientation","onChangeCommitted","event","aria-labelledby","step","marks","min","max","valueLabelDisplay","variant","math","block","LinearGauss","methodName","useEffect","document","useMediaQuery","useTheme","breakpoints","down","columnWidth","widthPadding","heightPadding","gridState","setGridState","outputColumnState","setOutputColumnState","generateGridCallback","stateSetter","fromRow","toRow","updated","slice","columnCallback","add","pop","rowCallback","outputColumns","outputRows","modifiedMatrix","modifiedOutput","pivotLength","tempMatrixRow","tempOutputElement","divisionByZero","col","runTour","setRunTour","duration","cascade","rel","href","aria-label","onClick","rowGetter","rowsCount","onGridRowsUpdated","enableCellSelect","headerRowHeight","minColumnWidth","minWidth","rowHeight","minHeight","random","in","arrow","placement","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","action"],"mappings":"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","file":"static/js/9.e499276d.chunk.js","sourcesContent":["import {formatMatrixLatex} from \"../../utils\";\r\nimport React from \"react\";\r\n\r\nexport class MatrixElementEditor extends React.Component {\r\n    ref = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: props.value };\r\n    }\r\n    getValue() {\r\n        return { [this.props.column.key]: this.state.value };\r\n    }\r\n\r\n    getInputNode() {\r\n        return this.ref.current ? this.ref.current : null;\r\n    }\r\n\r\n    onInputChange = () => {\r\n        let value = this.ref.current.value;\r\n        try {\r\n            value = parseInt(value);\r\n            if (isNaN(value)) {\r\n                value = 0;\r\n            }\r\n        }\r\n        catch {\r\n            value = 0;\r\n        }\r\n        this.setState({ value: value });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <input ref={this.ref} defaultValue={this.state.value} onBlur={this.onInputChange} onChange={this.onInputChange} />\r\n        )\r\n    }\r\n}\r\n\r\nconst style = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n};\r\n\r\nexport default class WrapperFormatter extends React.Component {\r\n\r\n    render() {\r\n        return (<div style={style}>{this.props.value}</div>)\r\n    }\r\n}\r\n\r\nconst columnSettings = {\r\n    editable: true,\r\n    editor: MatrixElementEditor,\r\n    formatter : WrapperFormatter,\r\n};\r\n\r\nexport const createNewColumn = (numberOfColumns) => {\r\n    const newNum = numberOfColumns + 1;\r\n    return { key: `col_${newNum}`, name: `C${newNum}`, ...columnSettings };\r\n}\r\n\r\nexport const createNewRow = (numberOfColumns) => {\r\n    let newRow = {};\r\n    for (let i = 1; i <= numberOfColumns; i++) {\r\n        newRow[`col_${i}`] = 0;\r\n    }\r\n    return newRow;\r\n}\r\n\r\nexport const gridTo2DArray = (rowsArray) => {\r\n    let keys = Object.keys(rowsArray[0]).sort();\r\n    let result = rowsArray.map((row) => {\r\n        return keys.map((k) => row[k]);\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const cloneArray = (array) => {\r\n    return JSON.parse(JSON.stringify(array));\r\n}\r\n\r\nexport const isDiagonallyDominant = (matrix) => {\r\n    // Strictly diagonal dominant\r\n    for (let i  = 0; i < matrix.length; i++) {\r\n        let diagonal = matrix[i][i];\r\n        let sum = 0;\r\n        for (let j  = 0; j < matrix.length; j++) {\r\n            if (j !== i) {\r\n                sum += matrix[i][j];\r\n            }\r\n        }\r\n        if (Math.abs(diagonal) <= Math.abs(sum)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// First 15 factorials.\r\nexport const numberFactorials = [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000];\r\n\r\nexport const nextPermutation = (array) => {\r\n    // Mutates array\r\n    // Find non-increasing suffix\r\n    let i = array.length - 1;\r\n    while (i > 0 && array[i - 1] >= array[i])\r\n        i--;\r\n    if (i <= 0)\r\n        return false;\r\n\r\n    // Find successor to pivot\r\n    let j = array.length - 1;\r\n    while (array[j] <= array[i - 1])\r\n        j--;\r\n    let temp = array[i - 1];\r\n    array[i - 1] = array[j];\r\n    array[j] = temp;\r\n\r\n    // Reverse suffix\r\n    j = array.length - 1;\r\n    while (i < j) {\r\n        temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        i++;\r\n        j--;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const generatePermutationMapping = (target, original=[...Array(target.length).keys()]) => {\r\n    let mapping = {};\r\n    let alreadyCovered = [];\r\n    for (let i = 0; i < original.length; i++) {\r\n        if (!alreadyCovered.includes(target[i]) && original[i] !== target[i]) {\r\n            mapping[i] = target[i];\r\n            alreadyCovered.push(original[i], target[i]);\r\n        }\r\n    }\r\n    return mapping;\r\n}\r\n\r\nexport const matrixToLatex = (matrix, {single=false, leftBracketOnly=false, rightBracketOnly=false, boldRows=[], transpose=false}={}) => {\r\n    let latex;\r\n    if (rightBracketOnly) {\r\n        latex = String.raw`\\left|\\begin{matrix}`;\r\n    }\r\n    else {\r\n        latex = String.raw`\\left[\\begin{matrix}`\r\n    }\r\n    const rowLength = matrix.length;\r\n    const colLength = matrix[0].length;\r\n    if (single) {\r\n        // 1D array\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            const content = String.raw` ${formatMatrixLatex(matrix[i])} `;\r\n            if (isBold) {\r\n                latex += String.raw` \\colorbox{aqua}{\\bf{${content}}} `;\r\n            }\r\n            else {\r\n                latex += String.raw`${content}`;\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            for (let j = 0; j < colLength; j++){\r\n                let content = String.raw` ${formatMatrixLatex(matrix[i][j])} `;\r\n                if (isBold) {\r\n                    latex += String.raw` \\colorbox{aqua}{\\bf{${content}}} `;\r\n                }\r\n                else {\r\n                    latex += String.raw`${content}`;\r\n                }\r\n                if (j !== colLength - 1) {\r\n                    latex += String.raw`&`;\r\n                }\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    if (leftBracketOnly) {\r\n        latex += String.raw`\\end{matrix}\\right|`;\r\n    }\r\n    else {\r\n        latex += String.raw`\\end{matrix}\\right]`;\r\n    }\r\n    return latex;\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////\r\n// Matrix initial values\r\n///////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////\r\nexport const initialMatrix = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 1, col_3: -3, col_4: 4 },\r\n        { col_1: 2, col_2: -2, col_3: 1, col_4: 0 },\r\n        { col_1: 2, col_2: -1, col_3: -2, col_4: 4 },\r\n        { col_1: -6, col_2: 4, col_3: 3, col_4: -8 },\r\n    ]\r\n}\r\nexport const initialInputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0, col_4: 0},\r\n    ]\r\n}\r\nexport const initialOutputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -1, col_3: 0, col_4: 1},\r\n    ]\r\n}\r\n\r\nexport const initialMatrix2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -10, col_3: 1 },\r\n        { col_1: 20, col_2: 1, col_3: -1 },\r\n        { col_1: -1, col_2: 1, col_3: 10 },\r\n    ]\r\n}\r\nexport const initialInputColumn2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0 },\r\n    ]\r\n}\r\nexport const initialOutputColumn2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 13, col_2: 17, col_3: 18 },\r\n    ]\r\n}\r\n\r\nexport const initialMatrix3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: -1, col_2: 11, col_3: -1, col_4: 3 },\r\n        { col_1: 10, col_2: -1, col_3: 2, col_4: 0 },\r\n        { col_1: 0, col_2: 3, col_3: -1, col_4: 8 },\r\n        { col_1: 2, col_2: -1, col_3: 10, col_4: -1 },\r\n    ]\r\n}\r\nexport const initialInputColumn3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0, col_4: 0 },\r\n    ]\r\n}\r\nexport const initialOutputColumn3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 25, col_2: 6, col_3: 15, col_4: -11, },\r\n    ]\r\n}","import {formatLatex, formatMatrixLatex} from \"../../utils\";\r\nimport {initialMatrix, initialOutputColumn, createNewColumn, createNewRow, gridTo2DArray, cloneArray, matrixToLatex} from \"./matrix_utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\n\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".matrix-col-input\",\r\n        title: \"Column\",\r\n        content:\r\n        \"Add/Remove columns\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".matrix-row-input\",\r\n        title: \"Row\",\r\n        content:\r\n        \"Add/Remove rows\",\r\n    },\r\n    {\r\n        target: \".matrix-input\",\r\n        title: \"Matrix\",\r\n        content:\r\n        \"Specify the matrix here.\",\r\n    },\r\n    {\r\n        target: \".output-col-input\",\r\n        title: \"Output\",\r\n        content:\r\n        \"Specify the output vector.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(0.5),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.primary,\r\n        margin: theme.spacing(1),\r\n    },\r\n    container: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    card: {\r\n        margin: theme.spacing(0),\r\n    },\r\n    cardContent: {\r\n        overflow: 'auto',\r\n        \"& > *\": {\r\n            margin: theme.spacing(0.5)\r\n        }\r\n    },\r\n    overflow: {\r\n        overflow: 'auto',\r\n    },\r\n    matrixCard: {\r\n        width: \"60vw\",\r\n    },\r\n    divider: {\r\n        width: '500 px',\r\n        height: '100px',\r\n        marginTop: '20px',\r\n        marginBottom: '20px',\r\n    },\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(4),\r\n        right: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction LinearGauss({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n        \r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    // Grid\r\n    const columnWidth = smallScreen ? 45 : 60;\r\n    const rowHeight = smallScreen ? 35 : 35;\r\n    const widthPadding = smallScreen ? 10 : 100;\r\n    const heightPadding = smallScreen ? 5 : 20;\r\n    const [gridState, setGridState] = useState(initialMatrix);\r\n    const [outputColumnState, setOutputColumnState] = useState(initialOutputColumn);\r\n    function generateGridCallback (state, stateSetter) {\r\n        return ({ fromRow, toRow, updated }) => {\r\n            const rows = state.rows.slice();\r\n            for (let i = fromRow; i <= toRow; i++) {\r\n                rows[i] = { ...rows[i], ...updated };\r\n            }\r\n            stateSetter({\r\n                ...state, rows\r\n            });\r\n        };\r\n    }\r\n    /*\r\n    const onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n        const rows = gridState.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = { ...rows[i], ...updated };\r\n        }\r\n        setGridState({\r\n            ...gridState, rows\r\n        });\r\n    };\r\n    const onOutputColumnStateUpdated = ({ fromRow, toRow, updated }) => {\r\n        const rows = outputColumnState.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = { ...rows[i], ...updated };\r\n        }\r\n        setOutputColumnState({\r\n            ...outputColumnState, rows\r\n        });\r\n    };\r\n    */\r\n    const columnCallback = (add) => {\r\n        return () => {\r\n            const columns = gridState.columns.slice();\r\n            const rows = gridState.rows.slice();\r\n            if (add) {\r\n                columns.push(createNewColumn(columns.length));\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    rows[i][`col_${columns.length}`] = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (columns.length === 1) {\r\n                    return;\r\n                }\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    delete rows[i][`col_${columns.length}`];\r\n                }\r\n                columns.pop();\r\n            }\r\n            setGridState({columns, rows});\r\n        };\r\n    }\r\n    const rowCallback = (add) => {\r\n        return () => {\r\n            const rows = gridState.rows.slice();\r\n            const outputColumns = outputColumnState.columns.slice();\r\n            const outputRows = outputColumnState.rows.slice();\r\n            if (add) {\r\n                rows.push(createNewRow(gridState.columns.length));\r\n                outputColumns.push(createNewColumn(outputColumns.length));\r\n                outputRows[0][`col_${outputColumns.length}`] = 0;\r\n            }\r\n            else {\r\n                if (rows.length === 1) {\r\n                    return;\r\n                }\r\n                rows.pop();\r\n                for (let i = 0; i < outputRows.length; i++) {\r\n                    delete outputRows[i][`col_${outputColumns.length}`];\r\n                }\r\n                outputColumns.pop();\r\n            }\r\n            setGridState({...gridState, rows});\r\n            setOutputColumnState({columns: outputColumns, rows: outputRows});\r\n        };\r\n    }\r\n\r\n    // Solve\r\n    let solve = true;\r\n    const originalMatrix = gridTo2DArray(gridState.rows);\r\n    let modifiedMatrix = cloneArray(originalMatrix);\r\n    const originalOutput = gridTo2DArray(outputColumnState.rows)[0];\r\n    let modifiedOutput = cloneArray(originalOutput);\r\n    const rowLength = gridState.rows.length; // row dimension, also the output dimension\r\n    const colLength = gridState.columns.length; // column dimension\r\n    let results = [];\r\n    let pivotLength = rowLength;\r\n    \r\n    for (let pivot  = 0; pivot < pivotLength - 1; pivot++) {\r\n        for (let row  = pivot + 1; row < pivotLength; row++) {\r\n            if (modifiedMatrix[row - 1][pivot] === 0 && modifiedMatrix[row][pivot] !== 0) {\r\n                let tempMatrixRow = modifiedMatrix[row - 1];\r\n                modifiedMatrix[row - 1] = modifiedMatrix[row];\r\n                modifiedMatrix[row] = tempMatrixRow;\r\n                let tempOutputElement = modifiedOutput[row - 1];\r\n                modifiedOutput[row - 1] = modifiedOutput[row];\r\n                modifiedOutput[row] = tempOutputElement;\r\n                    results.push({\r\n                    finalMatrix: cloneArray(modifiedMatrix),\r\n                    finalOutput: cloneArray(modifiedOutput),\r\n                    interchange: true,\r\n                    pivot: pivot + 1,\r\n                    row: row + 1,\r\n                });\r\n            }\r\n        }\r\n        for (let row  = pivot + 1; row < pivotLength; row++) {\r\n            let factor = modifiedMatrix[row][pivot] / modifiedMatrix[pivot][pivot];\r\n            let divisionByZero = false;\r\n            if (factor === 0) {\r\n                divisionByZero = true;\r\n            }\r\n            else if (isNaN(factor)) {\r\n                continue;\r\n            }\r\n            if (!divisionByZero) {\r\n                for (let col  = 0; col < colLength; col++) {\r\n                    modifiedMatrix[row][col] -= factor * modifiedMatrix[pivot][col];\r\n                }\r\n                modifiedOutput[row] -= factor * modifiedOutput[pivot];\r\n            }\r\n            results.push({\r\n                finalMatrix: cloneArray(modifiedMatrix),\r\n                finalOutput: cloneArray(modifiedOutput),\r\n                interchange: false,\r\n                factor,\r\n                pivot: pivot + 1,\r\n                row: row + 1,\r\n            });\r\n        }\r\n    }\r\n    let iterations = results.length;\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true)\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {originalMatrix, originalOutput, rowLength, colLength, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        This method is applied to matrices in the form of\r\n                        <TeX math={String.raw`\\ Ax=B`} />\r\n                        . <Link rel=\"noopener noreferrer\" href=\"https://people.richland.edu/james/lecture/m116/matrices/pivot.html\" target=\"_blank\" aria-label=\"Pivoting\">Pivoting</Link> is also implemented.\r\n                        No backsubstitution or Gauss-Jordan form due to&nbsp;\r\n                        <Link color=\"error\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=vIci3C4JkL0\" target=\"_blank\" aria-label=\"laziness\">laziness</Link>.\r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Grid container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                        <Grid xs item className=\"matrix-col-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Columns:\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={columnCallback(false)}>\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={columnCallback(true)}>\r\n                                                <AddCircleOutlineOutlinedIcon  />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"matrix-row-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Rows:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={rowCallback(false)} >\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={rowCallback(true)} >\r\n                                                <AddCircleOutlineOutlinedIcon />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"matrix-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Matrix, A:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                <ReactDataGrid\r\n                                                    columns={gridState.columns}\r\n                                                    rowGetter={i => gridState.rows[i]}\r\n                                                    rowsCount={gridState.rows.length}\r\n                                                    onGridRowsUpdated={generateGridCallback(gridState, setGridState)}\r\n                                                    enableCellSelect={true}\r\n                                                    headerRowHeight={1}\r\n                                                    minColumnWidth={columnWidth}\r\n                                                    minWidth={columnWidth * gridState.columns.length + widthPadding}\r\n                                                    rowHeight={rowHeight}\r\n                                                    minHeight={rowHeight * gridState.rows.length + heightPadding}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"output-col-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Output, B:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                <ReactDataGrid\r\n                                                    columns={outputColumnState.columns}\r\n                                                    rowGetter={i => outputColumnState.rows[i]}\r\n                                                    rowsCount={outputColumnState.rows.length}\r\n                                                    onGridRowsUpdated={generateGridCallback(outputColumnState, setOutputColumnState)}\r\n                                                    enableCellSelect={true}\r\n                                                    headerRowHeight={1}\r\n                                                    minColumnWidth={columnWidth}\r\n                                                    minWidth={columnWidth * outputColumnState.columns.length + widthPadding}\r\n                                                    rowHeight={rowHeight}\r\n                                                    minHeight={rowHeight * outputColumnState.rows.length + heightPadding}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>                                    \r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps smallScreen={smallScreen} params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({smallScreen, params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let latexContent;\r\n\r\n    if (currentIteration <= 0) {\r\n        setCurrentIteration(1);\r\n    }\r\n    else if (params.iterations > 0 && currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else if (params.iterations >= 2 ) {\r\n        let results = params.results;\r\n        let previousMatrix = currentIteration===1 ? params.originalMatrix : results[currentIteration - 2].finalMatrix;\r\n        let previousOutput = currentIteration===1 ? params.originalOutput : results[currentIteration - 2].finalOutput;\r\n        let currentResult = results[currentIteration - 1];\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        `;\r\n        if (!currentResult.interchange) {\r\n            latexContent += String.raw`\r\n            \\begin{array}{lcl}\r\n            \\\\ Factor &=& \\frac{A_{${currentResult.row}${currentResult.pivot}}}{A_{${currentResult.pivot}${currentResult.pivot}}}\r\n            \\\\        &=& ${formatLatex(currentResult.factor)}\r\n            \\end{array}\r\n            `;\r\n        }\r\n        latexContent += String.raw`\\\\ \\begin{array}{lcl} `;\r\n        const boldRows = currentResult.interchange ? [currentResult.row - 1, currentResult.row] : [currentResult.row, currentResult.pivot];\r\n        const finalLatex= String.raw`\\overbrace{${matrixToLatex(currentResult.finalMatrix, {leftBracketOnly:true, boldRows: boldRows})}}^{A}\r\n        \\overbrace{${matrixToLatex(currentResult.finalOutput, {single:true, rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n        if (!currentResult.interchange && currentResult.factor === 0) {\r\n            latexContent += String.raw`\r\n                \\\\ \\text{The factor is zero, so no elimination is done here.}\r\n                \\\\\r\n                \\\\ ${finalLatex}\r\n            `;\r\n        }\r\n        else {\r\n            const initialLatex = String.raw`\r\n            \\overbrace{${matrixToLatex(previousMatrix, {leftBracketOnly: true, boldRows: boldRows})}}^{A}\r\n            \\overbrace{${matrixToLatex(previousOutput, {single:true, rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n            const operationLatex = currentResult.interchange ?\r\n            String.raw`R_{${currentResult.row - 1}} \\leftrightarrow R_{${currentResult.row}}`\r\n            : String.raw`R_{${currentResult.row}} = R_{${currentResult.row}}-${formatMatrixLatex(currentResult.factor)}R_{${currentResult.pivot}}`;\r\n            if (smallScreen) {\r\n                latexContent += String.raw`\r\n                \\\\ ${initialLatex}\r\n                \\\\ \\begin{array}{lcl}\r\n                       & \\downarrow &\r\n                    \\\\ & ${operationLatex} &\r\n                    \\\\ & \\downarrow &\r\n                    \\end{array}\r\n                \\\\ ${finalLatex}\r\n                `;\r\n            }\r\n            else {\r\n                latexContent += String.raw`\r\n                \\\\ ${initialLatex}\r\n                & \\overrightarrow{${operationLatex}}\r\n                & ${finalLatex}\r\n                `;\r\n            }\r\n        }\r\n        latexContent += String.raw`\\end{array}\\end{array}`;\r\n    }\r\n    else {\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\\\ \\text{Cannot do any elimination.}\r\n        \\\\ \\overbrace{${matrixToLatex(params.originalMatrix, {leftBracketOnly: true})}}^{A}\r\n            \\overbrace{${matrixToLatex(params.originalOutput, {single:true, rightBracketOnly:true})}}^{B}\r\n        \\end{array}\r\n        `;\r\n    }\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n            <Grid container direction=\"column\" alignItems=\"center\" justify=\"flex-start\">\r\n                <Grid xs item className=\"iteration-slider\">\r\n                    <Slide direction=\"left\" triggerOnce>\r\n                        <Box id=\"iteration-slider\" width=\"70vw\">\r\n                            <Slider\r\n                                orientation=\"horizontal\"\r\n                                onChangeCommitted={(event, value) => {setCurrentIteration(value)}}\r\n                                defaultValue={1}\r\n                                aria-labelledby=\"discrete-slider-small-steps\"\r\n                                step={1}\r\n                                marks\r\n                                min={1}\r\n                                max={params.iterations<=0 ? 1 :params.iterations}\r\n                                valueLabelDisplay=\"on\"\r\n                            />\r\n                        </Box>\r\n                    </Slide>\r\n                </Grid>\r\n                <Grid xs item className=\"step-math\">\r\n                    <Slide direction=\"right\" triggerOnce>\r\n                        <Card className={styleClasses.card}>\r\n                            <CardContent className={styleClasses.cardContent}>\r\n                                <Typography variant=\"h6\">\r\n                                    Iteration {currentIteration}:\r\n                                </Typography>\r\n                                <TeX math={latexContent} block />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Slide>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LinearGauss;"],"sourceRoot":""}