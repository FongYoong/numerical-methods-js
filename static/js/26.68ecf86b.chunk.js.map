{"version":3,"sources":["components/Graph.js","components/methods/nonlinear/Secant.js"],"names":["DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","aria-label","onClick","DialogContent","params","useState","currentIteration","setCurrentIteration","defaultIteration","currentResult","iterations","results","desmosDiv","useRef","calculator","updateGraph","useCallback","current","graphCallback","useEffect","smallScreen","style","width","height","Desmos","keypad","expressions","expressionsTopbar","container","direction","alignItems","justify","functionValue","component","overflow","math","mathjsToLatex","block","variant","orientation","onChange","event","value","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","item","ref","Graph","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","open","id","dividers","TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","paper","textAlign","text","primary","card","cardContent","fab","bottom","Steps","latexContent","styleClasses","previousXLatex","String","raw","perturbedXLatex","newXLatex","formatLatex","previousX","perturbedX","funcResult","funcResult2","newX","errorX","setExpression","BLUE","latex","GREEN","lineStyle","DOTTED","perturbation","ORANGE","pointStyle","POINT","label","showLabel","RED","useMediaQuery","useTheme","breakpoints","down","in","severity","xs","triggerOnce","duration","addStyles","NonlinearSecant","methodName","document","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","setPerturbation","perturbationError","perturbationErrorText","setIterations","iterError","iterErrorText","Number","isInteger","hasError","initialX","setInitialX","solve","isValidMath","i","evaluate","x","Math","abs","push","runTour","setRunTour","cascade","disabled","mathField","mathquillDidMount","type","parseFloat","error","toString","helperText","parseInt","arrow","placement","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action"],"mappings":"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","file":"static/js/26.68ecf86b.chunk.js","sourcesContent":["import {mathjsToLatex} from \"./utils\";\r\nimport {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.iterations > 0 ? params.results[currentIteration - 1] : null;\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            params.graphCallback(calculator, currentResult);\r\n        }\r\n    }, [calculator, currentResult, params]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            {params.functionValue && <Box component=\"div\" overflow=\"visible\">\r\n                    <TeX math={`${mathjsToLatex(params.functionValue)}`} block />\r\n                </Box>\r\n            }\r\n            <Typography variant=\"h6\">\r\n                {params.iterations > 0 ? `Iteration ${currentIteration}:` : <br />}\r\n            </Typography>\r\n            {params.iterations > 0 &&\r\n                <Box width=\"70%\">\r\n                    <Slider\r\n                        orientation=\"horizontal\"\r\n                        onChange={(event, value) => setCurrentIteration(value)}\r\n                        defaultValue={defaultIteration}\r\n                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                        step={1}\r\n                        marks\r\n                        min={1}\r\n                        max={params.iterations}\r\n                        valueLabelDisplay=\"auto\"\r\n                    />\r\n                </Box>\r\n            }\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction Graph({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Graph;","import {isValidMath, mathjsToLatex, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport Graph from \"../../Graph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".perturbation-input\",\r\n        title: \"Perturbation\",\r\n        content:\r\n            \"Specify the perturbation fraction. Higher values produce a better approximation.\",\r\n    },\r\n    {\r\n        target: \".iteration-input\",\r\n        title: \"Iterations\",\r\n        content:\r\n            \"Specify the number of iterations to apply the modified secant method.\",\r\n    },\r\n    {\r\n        target: \".initialX-input\",\r\n        title: \"Initial x value\",\r\n        content:\r\n            \"Specify the initial/starting value of x.\",\r\n    },\r\n    {\r\n        target: \".results\",\r\n        title: \"Results\",\r\n        content:\r\n            \"The results are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps for each iteration are shown here.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction NonlinearSecant({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Derivative\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`x-\\cos\\left( x\\right)`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Invalid equation!\";\r\n    }\r\n\r\n    // Perturbation\r\n    const [perturbation, setPerturbation] = useState(0.01);\r\n    let perturbationError = false;\r\n    let perturbationErrorText = \"\";\r\n    if (perturbation <= 0) {\r\n        perturbationError = true;\r\n        perturbationErrorText = \"Perturbation must be a positive integer!\";\r\n    }\r\n\r\n    // Iterations\r\n    const [iterations, setIterations] = useState(10);\r\n    let iterError = false;\r\n    let iterErrorText = \"\";\r\n    if (!Number.isInteger(iterations) || iterations <= 0) {\r\n        iterError = true;\r\n        iterErrorText = \"Iterations must be a positive integer!\";\r\n    }\r\n\r\n    let hasError = functionError || perturbationError || iterError;\r\n\r\n    // Initial x\r\n    const [initialX, setInitialX] = useState(3.5);\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let results = [];\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        for (let i = 0; i < iterations; i++) {\r\n            let previousX = (i === 0) ? initialX: results[i - 1].newX;\r\n            let perturbedX = previousX * (1 + perturbation);\r\n            let funcResult, funcResult2;\r\n            try {\r\n                funcResult = functionValue.evaluate({x : previousX});\r\n                funcResult2 = functionValue.evaluate({x : perturbedX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            \r\n            let newX = previousX - perturbation * previousX * funcResult / (funcResult2 - funcResult);\r\n            let errorX = Math.abs(newX - previousX);\r\n            results.push({\r\n                previousX,\r\n                perturbedX,\r\n                funcResult,\r\n                funcResult2,\r\n                newX,\r\n                errorX,\r\n            });\r\n        }\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true);\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {functionValue, perturbation, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function:\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"perturbation-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Perturbation fraction, <TeX math={String.raw`\\delta`} />:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setPerturbation(parseFloat(event.target.value))}\r\n                                        error={perturbationError}\r\n                                        label={perturbationError?\"Error\":\"\"}\r\n                                        defaultValue={perturbation.toString()}\r\n                                        helperText={perturbationErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"iteration-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iterations:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setIterations(parseInt(event.target.value))}\r\n                                        error={iterError}\r\n                                        label={iterError?\"Error\":\"\"}\r\n                                        defaultValue={iterations.toString()}\r\n                                        helperText={iterErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"initialX-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Initial value, <TeX math={String.raw`x_0`} />:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setInitialX(parseFloat(event.target.value))}\r\n                                        label={\"\"}\r\n                                        defaultValue={initialX.toString()}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n\r\n    let hasError = false;\r\n    let errorText = \"\";\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let previousXLatex = String.raw`x_{${currentIteration - 1}}`;\r\n        let perturbedXLatex = String.raw`${previousXLatex} + \\delta \\cdot ${previousXLatex}`;\r\n        let newXLatex = String.raw`x_{${currentIteration}}`;\r\n        latexContent =\r\n        String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\begin{array}{lcl}\r\n        \\\\ ${previousXLatex} &=& ${formatLatex(currentResult.previousX)}\r\n        \\\\ ${perturbedXLatex} &=& ${formatLatex(currentResult.perturbedX)}\r\n        \\\\ f(${previousXLatex}) &=& ${formatLatex(currentResult.funcResult)}\r\n        \\\\ f(${perturbedXLatex}) &=& ${formatLatex(currentResult.funcResult2)}\r\n        \\\\ ${newXLatex} &=& ${previousXLatex} - \\frac{\\delta \\cdot ${previousXLatex} \\cdot f(${previousXLatex})}{f(${perturbedXLatex}) - f(${previousXLatex})}\r\n        \\\\              &=& ${formatLatex(currentResult.newX)}\r\n        \\end{array}\r\n        \\\\\r\n        \\begin{array}{lcl}\r\n        \\\\ Error &=& |${newXLatex} - ${previousXLatex}|\r\n        \\\\       &=& |${formatLatex(currentResult.errorX)}|\r\n        \\end{array}\r\n        \\end{array}\r\n        `;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: mathjsToLatex(params.functionValue)});\r\n            calculator.current.setExpression({ id: 'derivative', color: Desmos.Colors.GREEN, lineStyle: Desmos.Styles.DOTTED, latex:\r\n                `(y-${formatLatex(currentResult.funcResult)})/(x-${formatLatex(currentResult.previousX)})=${formatLatex((currentResult.funcResult2 - currentResult.funcResult) / (params.perturbation * currentResult.previousX))}` });\r\n            calculator.current.setExpression({ id: 'initialX', color: Desmos.Colors.ORANGE, pointStyle: Desmos.Styles.POINT, label: \"initialX\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.previousX)}, ${formatLatex(currentResult.funcResult)})` });\r\n            calculator.current.setExpression({ id: 'root', color: Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, label: \"Root\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.newX)}, 0)` });\r\n        }\r\n    }\r\n\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                <Slider\r\n                                    orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                    onChange={(event, value) => setCurrentIteration(value)}\r\n                                    defaultValue={1}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"step-math\">\r\n                            <Zoom duration={500} triggerOnce>\r\n                                <Card className={styleClasses.card}>\r\n                                    <CardContent className={styleClasses.cardContent}>\r\n                                        <Typography variant=\"h6\">\r\n                                            Iteration {currentIteration}:\r\n                                        </Typography>\r\n                                        <TeX math={latexContent} block />\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Zoom>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid xs item className=\"graph-button\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            <Graph params={{currentIteration, graphCallback, smallScreen, ...params}} />\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NonlinearSecant;"],"sourceRoot":""}