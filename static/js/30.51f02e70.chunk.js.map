{"version":3,"sources":["../node_modules/@material-ui/icons/Replay.js","components/methods/integral/MonteCarlo.js","components/Graph.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","addStyles","IntegralMonteCarlo","methodName","markdown","useEffect","document","functionNode","styleClasses","smallScreen","useMediaQuery","useTheme","breakpoints","down","useState","String","raw","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","traverse","node","path","parent","type","mathjsKeywords","includes","name","evaluate","x","e","lowerX","setLowerX","upperX","setUpperX","intervalError","lowerXErrorText","upperXErrorText","isNaN","points","setPoints","pointsError","pointsErrorText","Number","isInteger","latexContent","graphCallback","hasError","plotDesmosPoints","results","solve","isValidMath","yMin","yMax","multiple","i","y","pointsInsidePositive","pointsInsideNegative","randomX","Math","random","actualY","randomY","inside","push","rectArea","positiveIntegral","negativeIntegral","integralResult","formatLatex","calculator","currentResult","current","setExpression","id","Desmos","BLUE","latex","ORANGE","length","floor","GREEN","RED","pointStyle","POINT","forEach","regenerate","setRegenerate","runTour","setRunTour","className","duration","triggerOnce","cascade","variant","direction","alignItems","justify","xs","item","disabled","onChange","mathField","mathquillDidMount","in","severity","event","parseInt","error","label","defaultValue","toString","helperText","parseFloat","endIcon","onClick","math","block","params","iterations","description","arrow","placement","aria-label","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","DialogTitle","withStyles","root","closeButton","top","grey","props","children","classes","onClose","other","disableTypography","DialogContent","currentIteration","setCurrentIteration","defaultIteration","desmosDiv","useRef","updateGraph","useCallback","updateSettings","xAxisLabel","yAxisLabel","xAxisArrowMode","POSITIVE","yAxisArrowMode","style","width","height","keypad","expressions","expressionsTopbar","component","orientation","aria-labelledby","step","marks","min","max","valueLabelDisplay","ref","Graph","openDialog","setOpenDialog","handleClose","scroll","maxWidth","fullScreen","open","dividers"],"mappings":"qIAEA,IAAIA,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAAQN,EAAwBD,EAAQ,IAIxCQ,GAAW,EAFMT,EAAuBC,EAAQ,KAElBM,SAAuBC,EAAME,cAAc,OAAQ,CACnFC,EAAG,0GACD,UAEJN,EAAQE,QAAUE,G,4VCaZG,EAA4B,CAC9B,CACIC,OAAQ,kBACRC,MAAO,WACPC,QACA,4FACAC,eAAe,GAEnB,CACIH,OAAQ,gBACRC,MAAO,gBACPC,QACI,wCAER,CACIF,OAAQ,kBACRC,MAAO,WACPC,QACI,0CAER,CACIF,OAAQ,qBACRC,MAAO,2BACPC,QACI,2CAER,CACIF,OAAQ,aACRC,MAAO,QACPC,QACI,6BAER,CACIF,OAAQ,gBACRC,MAAO,aACPC,QACI,yCAKNE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,QAASF,EAAMG,QAAQ,GACvBC,UAAW,SACXC,MAAOL,EAAMM,QAAQC,KAAKC,QAC1BC,OAAQT,EAAMG,QAAQ,IAExBO,UAAW,CACT,QAAS,CACLD,OAAQT,EAAMG,QAAQ,KAG5BQ,KAAM,CACJF,OAAQT,EAAMG,QAAQ,KAExBS,YAAa,CACXC,SAAU,OACV,QAAS,CACLJ,OAAQT,EAAMG,QAAQ,MAG5BW,IAAK,CACHC,SAAU,QACVC,OAAQhB,EAAMG,QAAQ,GACtBc,MAAOjB,EAAMG,QAAQ,QAIzBe,sBAoVeC,UAlVf,YAAqD,IAAxBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,SACrCC,qBAAU,WAENC,SAAS5B,MAAQyB,KAGrB,IAOII,EAPEC,EAAe3B,IACf4B,EAAcC,YAAcC,cAAWC,YAAYC,KAAK,OAPd,EAUNC,mBAASC,OAAOC,IAAP,IAAD,sHAVF,mBAUzCC,EAVyC,KAU1BC,EAV0B,OAWRJ,mBAAS,IAXD,mBAWzCK,EAXyC,KAW3BC,EAX2B,KAc5CC,GAAgB,EAChBC,GAAoB,GACxB,KACIf,EAAegB,YAAMJ,IACRK,UAAS,SAAUC,EAAMC,EAAMC,GACxC,GAAkB,eAAdF,EAAKG,OAA0BC,IAAeC,SAASL,EAAKM,OAC1C,MAAdN,EAAKM,KACL,KAAM,kBAIlBxB,EAAayB,SAAS,CAACC,EAAI,IAE/B,MAAMC,IACFb,GAAgB,EAChBC,GAA0B,iBAANY,GAAuB,8BAAiC,oBA7BhC,OAiCpBpB,mBAAS,GAjCW,qBAiCzCqB,GAjCyC,MAiCjCC,GAjCiC,SAkCpBtB,mBAAS,GAlCW,qBAkCzCuB,GAlCyC,MAkCjCC,GAlCiC,MAmC5CC,IAAgB,EAChBC,GAAkB,GAClBC,GAAkB,GAClBC,MAAMP,MACNI,IAAgB,EAChBC,GAAkB,4BAElBE,MAAML,MACNE,IAAgB,EAChBE,GAAkB,4BAElBN,IAAUE,KACVE,IAAgB,EAChBC,GAAkB,sCAClBC,GAAkB,wCAjD0B,OAqDpB3B,mBAAS,KArDW,qBAqDzC6B,GArDyC,MAqDjCC,GArDiC,MAsD5CC,IAAc,EACdC,GAAkB,IAClBJ,MAAMC,MAAYI,OAAOC,UAAUL,KAAWA,IAAU,KACxDE,IAAc,EACdC,GAAkB,6CAGtB,IAIIG,GAAcC,GAJdC,GAAW9B,GAAiBkB,IAAiBM,GAG3CO,GAAmB,IAErBC,GAAU,GACVC,IAAQ,EACZ,GAAIC,YAAYhD,KAAkB4C,GAAU,CACxCG,IAAQ,EAQR,IANA,IAAIE,GAAO,EACPC,GAAO,EAGLC,IAAYrB,GAASF,IADT,IAGTwB,GAAI,EAAGA,IAHE,IAGcA,KAAK,CACjC,IAAM1B,GAAIE,GAASwB,GAAID,GACjBE,GAAIrD,EAAayB,SAAS,CAACC,EAAIA,KACjC2B,GAAIH,GACJA,GAAOG,GAEFA,GAAIJ,KACTA,GAAOI,IASf,IALA,IAEIC,GAAuB,EACvBC,GAAuB,EAElBH,GAAI,EAAGA,GAAIhB,GAAQgB,KAAK,CAC7B,IAAMI,GAAU5B,GANH,GAMwBE,GAASF,GAAS,GAAgB6B,KAAKC,SACtEC,GAAU3D,EAAayB,SAAS,CAACC,EAAI8B,KACrCI,GAAUX,GAPH,GAOsBC,GAAOD,GAAO,GAAgBQ,KAAKC,SAClEG,IAAS,EACTF,IAAW,GAAKC,IAAW,GAAKA,IAAWD,IAC3CE,IAAS,EACTP,IAAwB,GAEnBK,GAAU,GAAKC,GAAU,GAAKA,IAAWD,KAC9CE,IAAS,EACTN,IAAwB,GAE5BT,GAAQgB,KAAK,CAACpC,EAAG8B,GAASH,EAAGO,GAASC,YAE1C,IAAME,IAAYb,GAAOD,KAASnB,GAASF,IACrCoC,GAAmBD,GAAWT,GAAuBlB,GACrD6B,GAAmBF,GAAWR,GAAuBnB,GACrD8B,GAAiBF,GAAmBC,GAE1CvB,GAAelC,OAAOC,IAAV,u7EAIG0D,YAAYjB,IACZiB,YAAYlB,IAKKkB,YAAYJ,IAKAI,YAAYb,IACZa,YAAYZ,IAM/CY,YAAYJ,IAAyBI,YAAYb,IAA0Ba,YAAY/B,IAEvF+B,YAAYH,IAIZG,YAAYJ,IAAyBI,YAAYZ,IAA0BY,YAAY/B,IAEvF+B,YAAYF,IAGME,YAAYD,KAIvCvB,GAAgB,SAACyB,EAAYC,GASzB,GARAD,EAAWE,QAAQC,cAAc,CAAEC,GAAI,WAAY3F,MAAO4F,SAAcC,KAAMC,MAAO,QAAQjE,IAC7F0D,EAAWE,QAAQC,cAAc,CAAEC,GAAI,IAAKG,MAAO,KAAK/C,KACxDwC,EAAWE,QAAQC,cAAc,CAAEC,GAAI,IAAKG,MAAO,KAAK7C,KACxDsC,EAAWE,QAAQC,cAAc,CAAEC,GAAI,aAAcG,MAAOnE,OAAOC,IAAT,oZAC1D2D,EAAWE,QAAQC,cAAc,CAAEC,GAAI,eAAgB3F,MAAO4F,SAAcG,OAAQD,MAAOnE,OAAOC,IAAT,2FAAiBmB,GAAiBqB,GAAUC,MACrIkB,EAAWE,QAAQC,cAAc,CAAEC,GAAI,gBAAiB3F,MAAO4F,SAAcG,OAAQD,MAAOnE,OAAOC,IAAT,2FAAiBqB,GAAiBmB,GAAUC,MACtIkB,EAAWE,QAAQC,cAAc,CAAEC,GAAI,YAAa3F,MAAO4F,SAAcG,OAAQD,MAAOnE,OAAOC,IAAT,2FAAiByC,GAAetB,GAAYE,MAClIsC,EAAWE,QAAQC,cAAc,CAAEC,GAAI,YAAa3F,MAAO4F,SAAcG,OAAQD,MAAOnE,OAAOC,IAAT,2FAAiBwC,GAAerB,GAAYE,MAC9HgB,GAAQ+B,OAAShC,GACjB,IAAK,IAAIO,EAAI,EAAGA,EAAIP,GAAkBO,IAAK,CACvC,IAAMzF,EAAQmF,GAAQW,KAAKqB,MAAMrB,KAAKC,SAAWZ,GAAQ+B,SACzDT,EAAWE,QAAQC,cAAc,CAAEC,GAAG,IAAD,OAAMpB,GAAKvE,MAAOlB,EAAMkG,OAASY,SAAcM,MAAQN,SAAcO,IAAKC,WAAYR,SAAcS,MAAOP,MAAM,IAAD,OAAMhH,EAAM+D,EAAZ,aAAkB/D,EAAM0F,EAAxB,YAIzJP,GAAQqC,SAAQ,SAACxH,EAAOyF,GACpBgB,EAAWE,QAAQC,cAAc,CAAEC,GAAG,IAAD,OAAMpB,GAAKvE,MAAOlB,EAAMkG,OAASY,SAAcM,MAAQN,SAAcO,IAAKC,WAAYR,SAAcS,MAAOP,MAAM,IAAD,OAAMhH,EAAM+D,EAAZ,aAAkB/D,EAAM0F,EAAxB,WAvKrH,OA6KZ9C,oBAAS,GA7KG,qBA6KzC6E,GA7KyC,MA6K7BC,GA7K6B,SAgLlB9E,oBAAS,GAhLS,qBAgLzC+E,GAhLyC,MAgLhCC,GAhLgC,MA0LhD,OACI,qCACI,cAAC,IAAD,CAAQ3F,WAAYA,EAAYC,SAAUA,IAC1C,cAAC,IAAD,CAAO2F,UAAWvF,EAAaxB,MAA/B,SACI,cAAC,IAAD,CAAW+G,UAAWvF,EAAaf,UAAnC,SACA,eAAC,IAAD,CAAMuG,SAAU,IAAKC,aAAW,EAACC,SAAO,EAAxC,UACI,cAAC,IAAD,CAAYC,QAAQ,UAGpB,eAAC,IAAD,CAAM1G,WAAS,EAACP,QAAS,EAAGkH,UAAU,MAAMC,WAAW,SAASC,QAAQ,SAAxE,UACI,cAAC,IAAD,CAAMC,IAAE,EAACC,MAAI,EAACT,UAAU,iBAAxB,SACI,cAAC,IAAD,CAAMA,UAAWvF,EAAad,KAA9B,SACI,eAAC,IAAD,CAAaqG,UAAWvF,EAAab,YAArC,UACI,cAAC,IAAD,CAAYwG,QAAQ,KAApB,uBAGA,cAAC,oBAAD,CACIM,UAAU,EACVvB,MAAOjE,EACPyF,SAAU,SAACC,GACPvF,EAAgBuF,EAAUrH,QAC1B4B,EAAiByF,EAAUzB,UAE/B0B,kBAAmB,SAACD,GAChBvF,EAAgBuF,EAAUrH,WAGlC,cAAC,IAAD,CAAUuH,GAAIxF,EAAd,SACI,cAAC,IAAD,CAAOyF,SAAS,QAAhB,SACKxF,cAMrB,cAAC,IAAD,CAAMiF,IAAE,EAACC,MAAI,EAACT,UAAU,eAAxB,SACI,cAAC,IAAD,CAAMA,UAAWvF,EAAad,KAA9B,SACI,eAAC,IAAD,CAAaqG,UAAWvF,EAAab,YAArC,UACI,cAAC,IAAD,CAAYwG,QAAQ,KAApB,4BAGA,cAAC,IAAD,CACIM,UAAU,EACV7E,KAAK,SACL8E,SAAU,SAACK,GAAD,OAASnE,GAAUoE,SAASD,EAAMtI,OAAOP,SACnD+I,MAAOpE,GACPqE,MAAOrE,GAAY,QAAQ,GAC3BsE,aAAcxE,GAAOyE,WACrBC,WAAYvE,GACZqD,QAAQ,uBAO5B,eAAC,IAAD,CAAMJ,UAAU,iBAAiBtG,WAAS,EAACP,QAAS,EAAGkH,UAAU,MAAMC,WAAW,SAASC,QAAQ,SAAnG,UACI,cAAC,IAAD,CAAMC,IAAE,EAACC,MAAI,EAAb,SACI,cAAC,IAAD,CAAMT,UAAWvF,EAAad,KAA9B,SACI,eAAC,IAAD,CAAaqG,UAAWvF,EAAab,YAArC,UACI,cAAC,IAAD,CAAYwG,QAAQ,KAApB,4BAGA,cAAC,IAAD,CACIM,UAAU,EACV7E,KAAK,SACL8E,SAAU,SAACK,GAAD,OAAS3E,GAAUkF,WAAWP,EAAMtI,OAAOP,SACrD+I,MAAO1E,GACP2E,MAAO3E,GAAc,QAAQ,GAC7B4E,aAAchF,GAAOiF,WACrBC,WAAY7E,GACZ2D,QAAQ,oBAKxB,cAAC,IAAD,CAAMI,IAAE,EAACC,MAAI,EAAb,SACI,cAAC,IAAD,CAAMT,UAAWvF,EAAad,KAA9B,SACI,eAAC,IAAD,CAAaqG,UAAWvF,EAAab,YAArC,UACI,cAAC,IAAD,CAAYwG,QAAQ,KAApB,4BAGA,cAAC,IAAD,CACIM,UAAU,EACV7E,KAAK,SACL8E,SAAU,SAACK,GAAD,OAASzE,GAAUgF,WAAWP,EAAMtI,OAAOP,SACrD+I,MAAO1E,GACP2E,MAAO3E,GAAc,QAAQ,GAC7B4E,aAAc9E,GAAO+E,WACrBC,WAAY5E,GACZ0D,QAAQ,8BAUpC,cAAC,IAAD,IAEA,cAAC,IAAD,CAAUU,GAAIvD,GAAd,SACI,cAAC,IAAD,CAAM2C,aAAW,EAAjB,SACI,cAAC,IAAD,CAAOF,UAAWvF,EAAaxB,MAA/B,SACKsE,IACD,eAAC,IAAD,CAAWyC,UAAWvF,EAAaf,UAAnC,UACI,cAAC,IAAD,CAAQsG,UAAU,oBAAoBI,QAAQ,YAAY/G,MAAM,UAAUmI,QAAS,cAAC,IAAD,IAAeC,QAAS,kBAAM5B,IAAeD,KAAhI,wBAGA,eAAC,IAAD,CAAMlG,WAAS,EAACP,QAAS,EAAGkH,UAAU,MAAMC,WAAW,SAASC,QAAQ,SAAxE,UACI,cAAC,IAAD,CAAMC,IAAE,EAACC,MAAI,EAACT,UAAU,YAAxB,SACI,cAAC,IAAD,CAAOK,UAAU,OAAOH,aAAW,EAAnC,SACI,cAAC,IAAD,CAAMF,UAAWvF,EAAad,KAA9B,SACI,cAAC,IAAD,CAAaqG,UAAWvF,EAAab,YAArC,SACI,cAAC,IAAD,CAAK8H,KAAMxE,GAAcyE,OAAK,YAK9C,cAAC,IAAD,CAAMnB,IAAE,EAACC,MAAI,EAACT,UAAU,eAAxB,SACI,cAAC,IAAD,CAAOK,UAAU,QAAQH,aAAW,EAApC,SACI,cAAC,IAAD,CAAO0B,OAAQ,CAACC,WAAY,EAAG3G,gBAAeiC,iBAAezC,cAC7DoH,YAAaxE,GAAQ+B,OAAShC,GAAjB,eAA4CA,GAA5C,gDAA2G,sBASpJ,cAAC,IAAD,CAAS0E,OAAK,EAACpJ,MAAM,OAAOqJ,UAAU,MAAtC,SACI,cAAC,IAAD,CAAK3I,MAAM,YAAY4I,aAAW,OAAOjC,UAAWvF,EAAaX,IAAK2H,QA9IjE,WACb1B,IAAW,IA6IH,SACI,cAAC,IAAD,QAGR,cAAC,IAAD,CACImC,mBAAiB,EACjBC,IAAKrC,GACLsC,MAAO3J,EACP4J,YAAY,EACZC,gBAAgB,EACZC,OAAQ,CACRC,KAAM,YAEVC,SAxJY,SAACC,GACA,UAAjBA,EAAMC,QAAuC,UAAjBD,EAAMC,QAClC5C,IAAW,W,4NC/PjB6C,EAAcC,aAbC,SAAC7J,GAAD,MAAY,CAC7B8J,KAAM,CACFrJ,OAAQ,EACRP,QAASF,EAAMG,QAAQ,IAE3B4J,YAAa,CACThJ,SAAU,WACVE,MAAOjB,EAAMG,QAAQ,GACrB6J,IAAKhK,EAAMG,QAAQ,GACnBE,MAAOL,EAAMM,QAAQ2J,KAAK,SAIdJ,EAAyB,SAACK,GACOA,EAAzCC,SAD6C,IACnCC,EAA+BF,EAA/BE,QAASC,EAAsBH,EAAtBG,QAAYC,EADa,YACHJ,EADG,kCAEpD,OACE,cAAC,IAAD,yBAAgBK,mBAAiB,EAACvD,UAAWoD,EAAQN,MAAUQ,GAA/D,aACGD,EACC,cAAC,IAAD,CAAYpB,aAAW,QAAQjC,UAAWoD,EAAQL,YAAatB,QAAS4B,EAAxE,SACE,cAAC,IAAD,MAEA,WAKNG,EAAiBX,aAAW,SAAC7J,GAAD,MAAY,CAC1C8J,KAAM,CACF5J,QAASF,EAAMG,QAAQ,OAFR0J,EAInB,SAACK,GACD,IAAMtB,EAASsB,EAAMtB,OADV,EAEqC7G,mBAAS6G,EAAO6B,kBAFrD,mBAEJA,EAFI,KAEcC,EAFd,KAGLC,EAAmB/B,EAAO6B,iBAC1B5E,EAAgB+C,EAAOC,WAAa,EAAID,EAAOtE,QAAQmG,EAAmB,GAAK,KAC/EG,EAAYC,iBAAO,MACnBjF,EAAaiF,iBAAO,MAEpBC,EAAcC,uBAAY,WACxBnF,EAAWE,UACXF,EAAWE,QAAQkF,eAAe,CAACC,WAAY,IAAKC,WAAY,IAAMC,eAAgBlF,iBAAsBmF,SAAUC,eAAgBpF,iBAAsBmF,WAC5JxC,EAAOzE,cAAcyB,EAAYC,EAAe4E,MAErD,CAAC7E,EAAYC,EAAe+C,EAAQ6B,IAkBvC,OAjBAK,IAEAxJ,qBAAU,WACN,GAAIsJ,EAAU9E,QAAQ,CAClB,IAAMpE,EAAcwI,EAAMxI,YAC1BkJ,EAAU9E,QAAQwF,MAAMC,MAAQ7J,EAAY,OAAO,OACnDkJ,EAAU9E,QAAQwF,MAAME,OAAS9J,EAAY,OAAO,OAMpDkE,EAAWE,QAAUG,qBAA0B2E,EAAU9E,QALnC,CAClB2F,QAAQ,EACRC,aAAa,EACbC,mBAAmB,IAGvBb,OAEL,IAIC,eAAC,IAAD,CAAMpK,WAAS,EAAC2G,UAAU,SAASC,WAAW,SAASC,QAAQ,SAA/D,UACKqB,EAAOE,aAAe,cAAC,IAAD,CAAK8C,UAAU,MAAM/K,SAAS,UAA9B,SACf,cAAC,IAAD,CAAYuG,QAAQ,KAApB,SACKwB,EAAOE,gBAInBF,EAAO1G,eAAiB,cAAC,IAAD,CAAK0J,UAAU,MAAM/K,SAAS,UAA9B,SACjB,cAAC,IAAD,CAAK6H,KAAI,UAAKE,EAAO1G,eAAiByG,OAAK,MAGnD,cAAC,IAAD,CAAYvB,QAAQ,KAApB,SACKwB,EAAOC,WAAa,EAApB,oBAAqC4B,EAArC,KAA2D,yBAE/D7B,EAAOC,WAAa,GACjB,cAAC,IAAD,CAAK0C,MAAM,MAAX,SACI,cAAC,IAAD,CACIM,YAAY,aACZlE,SAAU,SAACK,EAAO7I,GAAR,OAAkBuL,EAAoBvL,IAChDiJ,aAAcuC,EACdmB,kBAAgB,8BAChBC,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAKtD,EAAOC,WACZsD,kBAAkB,WAI9B,cAAC,IAAD,CAAM1E,MAAI,EAAV,SACI,qBAAK2E,IAAKxB,YAiCXyB,IA1Bf,YAAuC,IAAvBzD,EAAsB,EAAtBA,OAAQlH,EAAc,EAAdA,YAAc,EACEK,oBAAS,GADX,mBAC3BuK,EAD2B,KACfC,EADe,KAM1BC,EAAc,WAClBD,GAAc,IAGlB,OACI,qCACI,cAAC,IAAD,CAAQnF,QAAQ,YAAY/G,MAAM,UAAUmI,QAAS,cAAC,IAAD,IAAiBC,QATtD,WACpB8D,GAAc,IAQV,wBAIA,cAAC,IAAD,CAAQE,OAAO,QAAQC,UAAU,EAAOC,WAAYjL,EAAa2I,QAASmC,EAAaV,kBAAgB,0BAA0Bc,KAAMN,EAAvI,SACI,eAAC,IAAD,WACI,cAAC1C,EAAD,CAAa5D,GAAG,0BAA0BqE,QAASmC,IACnD,cAAChC,EAAD,CAAeqC,UAAQ,EAACnL,YAAaA,EAAakH,OAAQA","file":"static/js/30.51f02e70.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z\"\n}), 'Replay');\n\nexports.default = _default;","import {isValidMath, mathjsKeywords, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport Graph from \"../../Graph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Button from '@material-ui/core/Button';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".points-input\",\r\n        title: \"Random Points\",\r\n        content:\r\n            \"Specify the number of random points.\",\r\n    },\r\n    {\r\n        target: \".interval-input\",\r\n        title: \"Interval\",\r\n        content:\r\n            \"Select the lower and upper bounds of x\",\r\n    },\r\n    {\r\n        target: \".regenerate-button\",\r\n        title: \"Regenerate Random Points\",\r\n        content:\r\n            \"Click this to regenerate random points.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction IntegralMonteCarlo({methodName, markdown}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    // Function\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`\\left(x-3\\right)^{3}+2\\left(x-3\\right)^{2}-1`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionNode;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionNode = parse(functionText);\r\n        functionNode.traverse(function (node, path, parent) {\r\n            if (node.type === 'SymbolNode' && !mathjsKeywords.includes(node.name)) {\r\n                if (node.name !== 'x') {\r\n                    throw \"variableName\";\r\n                }\r\n            }\r\n        });\r\n        functionNode.evaluate({x : 0});\r\n    }\r\n    catch(e) {\r\n        functionError = true;\r\n        functionErrorText = e === \"variableName\" ? \"Only x variable is allowed.\" :  \"Invalid equation!\";\r\n    }\r\n\r\n    // Interval\r\n    const [lowerX, setLowerX] = useState(1);\r\n    const [upperX, setUpperX] = useState(4);\r\n    let intervalError = false;\r\n    let lowerXErrorText = \"\";\r\n    let upperXErrorText = \"\";\r\n    if (isNaN(lowerX)) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"x value cannot be empty!\";\r\n    }\r\n    if (isNaN(upperX)) {\r\n        intervalError = true;\r\n        upperXErrorText = \"x value cannot be empty!\";\r\n    }\r\n    if (lowerX >= upperX) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"Lower x must be lower than upper x!\";\r\n        upperXErrorText = \"Upper x must be higher than lower x!\";\r\n    }\r\n\r\n    // Random Points\r\n    const [points, setPoints] = useState(10000);\r\n    let pointsError = false;\r\n    let pointsErrorText = \"\";\r\n    if (isNaN(points) || !Number.isInteger(points) || points <= 0) {\r\n        pointsError = true;\r\n        pointsErrorText = \"Random points must be a positive integer!\";\r\n    }\r\n\r\n    let hasError = functionError || intervalError || pointsError;\r\n\r\n    // Solve\r\n    const plotDesmosPoints = 200;\r\n    let latexContent, graphCallback;\r\n    let results = [];\r\n    let solve = false;\r\n    if (isValidMath(functionNode) && !hasError) {\r\n        solve = true;\r\n        \r\n        let yMin = 0;\r\n        let yMax = 0;\r\n\r\n        const divisions = 250;\r\n        const multiple = (upperX - lowerX) / divisions;\r\n\r\n        for (let i = 0; i <= divisions; i++) {\r\n            const x = lowerX + i * multiple;\r\n            const y = functionNode.evaluate({x : x});\r\n            if (y > yMax) {\r\n                yMax = y;\r\n            }\r\n            else if (y < yMin) {\r\n                yMin = y;\r\n            }\r\n        }\r\n\r\n        const paddingX = 0;\r\n        const paddingY = 0;\r\n        let pointsInsidePositive = 0;\r\n        let pointsInsideNegative = 0;\r\n\r\n        for (let i = 0; i < points; i++) {\r\n            const randomX = lowerX - paddingX + (upperX - lowerX + 2 * paddingX) * Math.random();\r\n            const actualY = functionNode.evaluate({x : randomX});\r\n            const randomY = yMin - paddingY + (yMax - yMin + 2 * paddingY) * Math.random();\r\n            let inside = false;\r\n            if (actualY >= 0 && randomY >= 0 && randomY <= actualY) {\r\n                inside = true;\r\n                pointsInsidePositive += 1;\r\n            }\r\n            else if (actualY < 0 && randomY < 0 && randomY >= actualY) {\r\n                inside = true;\r\n                pointsInsideNegative += 1;\r\n            }\r\n            results.push({x: randomX, y: randomY, inside});\r\n        }\r\n        const rectArea = (yMax - yMin) * (upperX - lowerX);\r\n        const positiveIntegral = rectArea * pointsInsidePositive / points;\r\n        const negativeIntegral = rectArea * pointsInsideNegative / points;\r\n        const integralResult = positiveIntegral - negativeIntegral;\r\n        \r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\begin{array}{lcl}\r\n        \\\\ y_{max} = ${formatLatex(yMax)}\r\n        \\\\ y_{min} = ${formatLatex(yMin)}\r\n        \\end{array}\r\n        \\\\\r\n        \\begin{array}{lcl}\r\n        \\\\ \\text{Rectangle area} &=& y_{max} \\cdot y_{min} \\cdot x_{lower} \\cdot y_{upper}\r\n        \\\\                       &=&= ${formatLatex(rectArea)}\r\n        \\end{array}\r\n        \\\\\r\n        \\\\ \\hline\r\n        \\begin{array}{lcl}\r\n        \\\\ \\text{Points inside positive area} &=& ${formatLatex(pointsInsidePositive)}\r\n        \\\\ \\text{Points inside negative area} &=& ${formatLatex(pointsInsideNegative)}\r\n        \\end{array}\r\n        \\\\\r\n        \\begin{array}{lcl}\r\n        \\\\ \\text{Positive area}&=& \\text{Rectangle area} \\cdot \\frac{\\text{Points inside positive area}}{\\text{Total points}}\r\n        \\\\\r\n        \\\\ &=& ${formatLatex(rectArea)} \\cdot \\frac{${formatLatex(pointsInsidePositive)}}{${formatLatex(points)}}\r\n        \\\\\r\n        \\\\ &=& ${formatLatex(positiveIntegral)}\r\n        \\\\\r\n        \\\\ \\text{Negative area}&=& \\text{Rectangle area} \\cdot \\frac{\\text{Points inside negative area}}{\\text{Total points}}\r\n        \\\\\r\n        \\\\ &=& ${formatLatex(rectArea)} \\cdot \\frac{${formatLatex(pointsInsideNegative)}}{${formatLatex(points)}}\r\n        \\\\\r\n        \\\\ &=& ${formatLatex(negativeIntegral)}\r\n        \\\\\r\n        \\\\ \\text{Total area/integral} &=& \\text{Positive area} - \\text{Negative area}\r\n        \\\\                   &=& ${formatLatex(integralResult)}\r\n        \\end{array}\\end{array}\r\n        `;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: \"f(x)=\"+functionLatex});\r\n            calculator.current.setExpression({ id: 'a', latex: \"a=\"+lowerX});\r\n            calculator.current.setExpression({ id: 'b', latex: \"b=\"+upperX});\r\n            calculator.current.setExpression({ id: 'shadedArea', latex: String.raw`\\left\\{f\\left(x\\right)>0:\\ 0,\\ f\\left(x\\right)<0:\\ f\\left(x\\right)\\right\\}<y<\\ \\left\\{f\\left(x\\right)>0:\\ f\\left(x\\right),\\ f\\left(x\\right)<0:\\ 0\\right\\}\\left\\{a<x<b,\\ b<x<a\\right\\}`});\r\n            calculator.current.setExpression({ id: 'leftVertical', color: Desmos.Colors.ORANGE, latex: String.raw`x=${lowerX} \\left\\{${yMin}<y<${yMax}\\right\\}`});\r\n            calculator.current.setExpression({ id: 'rightVertical', color: Desmos.Colors.ORANGE, latex: String.raw`x=${upperX} \\left\\{${yMin}<y<${yMax}\\right\\}`});\r\n            calculator.current.setExpression({ id: 'upperHori', color: Desmos.Colors.ORANGE, latex: String.raw`y=${yMax} \\left\\{${lowerX}<x<${upperX}\\right\\}`});\r\n            calculator.current.setExpression({ id: 'lowerHori', color: Desmos.Colors.ORANGE, latex: String.raw`y=${yMin} \\left\\{${lowerX}<x<${upperX}\\right\\}`});\r\n            if (results.length > plotDesmosPoints) {\r\n                for (let i = 0; i < plotDesmosPoints; i++) {\r\n                    const value = results[Math.floor(Math.random() * results.length)];\r\n                    calculator.current.setExpression({ id: `r${i}`, color: value.inside ? Desmos.Colors.GREEN : Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, latex: `(${value.x}, ${value.y})` });\r\n                }\r\n            }\r\n            else {\r\n                results.forEach((value, i) => {\r\n                    calculator.current.setExpression({ id: `r${i}`, color: value.inside ? Desmos.Colors.GREEN : Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, latex: `(${value.x}, ${value.y})` });\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const [regenerate, setRegenerate] = useState(false); // For the purpose of refreshing the data\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true);\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName={methodName} markdown={markdown} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        \r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function:\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"points-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Random points:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setPoints(parseInt(event.target.value))}\r\n                                        error={pointsError}\r\n                                        label={pointsError?\"Error\":\"\"}\r\n                                        defaultValue={points.toString()}\r\n                                        helperText={pointsErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid className=\"interval-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Lower x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setLowerX(parseFloat(event.target.value))}\r\n                                        error={intervalError}\r\n                                        label={intervalError?\"Error\":\"\"}\r\n                                        defaultValue={lowerX.toString()}\r\n                                        helperText={lowerXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Upper x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setUpperX(parseFloat(event.target.value))}\r\n                                        error={intervalError}\r\n                                        label={intervalError?\"Error\":\"\"}\r\n                                        defaultValue={upperX.toString()}\r\n                                        helperText={upperXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve &&\r\n                        <Container className={styleClasses.container}>\r\n                            <Button className=\"regenerate-button\" variant=\"contained\" color=\"primary\" endIcon={<ReplayIcon/>} onClick={() => setRegenerate(!regenerate)}>\r\n                                Regenerate\r\n                            </Button>\r\n                            <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                <Grid xs item className=\"step-math\">\r\n                                    <Slide direction=\"left\" triggerOnce>\r\n                                        <Card className={styleClasses.card}>\r\n                                            <CardContent className={styleClasses.cardContent}>\r\n                                                <TeX math={latexContent} block />\r\n                                            </CardContent>\r\n                                        </Card>\r\n                                    </Slide>\r\n                                </Grid>\r\n                                <Grid xs item className=\"graph-button\">\r\n                                    <Slide direction=\"right\" triggerOnce>\r\n                                        <Graph params={{iterations: 0, functionLatex, graphCallback, smallScreen,\r\n                                        description: results.length > plotDesmosPoints ? `Only ${plotDesmosPoints} points are plotted for performance reasons.`:\"\"}} />\r\n                                    </Slide>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Container>\r\n                        }\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default IntegralMonteCarlo;","import {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.iterations > 0 ? params.results[currentIteration - 1] : null;\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            calculator.current.updateSettings({xAxisLabel: 'x', yAxisLabel: 'y',  xAxisArrowMode: Desmos.AxisArrowModes.POSITIVE, yAxisArrowMode: Desmos.AxisArrowModes.POSITIVE });\r\n            params.graphCallback(calculator, currentResult, currentIteration);\r\n        }\r\n    }, [calculator, currentResult, params, currentIteration]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            {params.description && <Box component=\"div\" overflow=\"visible\">\r\n                    <Typography variant=\"h6\">\r\n                        {params.description}\r\n                    </Typography>\r\n                </Box>\r\n            }\r\n            {params.functionLatex && <Box component=\"div\" overflow=\"visible\">\r\n                    <TeX math={`${params.functionLatex}`} block />\r\n                </Box>\r\n            }\r\n            <Typography variant=\"h6\">\r\n                {params.iterations > 0 ? `Iteration ${currentIteration}:` : <br />}\r\n            </Typography>\r\n            {params.iterations > 0 &&\r\n                <Box width=\"70%\">\r\n                    <Slider\r\n                        orientation=\"horizontal\"\r\n                        onChange={(event, value) => setCurrentIteration(value)}\r\n                        defaultValue={defaultIteration}\r\n                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                        step={1}\r\n                        marks\r\n                        min={1}\r\n                        max={params.iterations}\r\n                        valueLabelDisplay=\"auto\"\r\n                    />\r\n                </Box>\r\n            }\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction Graph({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Graph;"],"sourceRoot":""}