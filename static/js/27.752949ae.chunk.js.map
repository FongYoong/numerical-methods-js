{"version":3,"sources":["components/methods/linear/matrix_utils.js","components/methods/linear/Gauss.js"],"names":["MatrixElementEditor","props","ref","React","createRef","onInputChange","value","current","parseInt","isNaN","setState","state","this","column","key","defaultValue","onBlur","onChange","Component","style","display","justifyContent","alignItems","flexDirection","columnSettings","editable","editor","formatter","initialMatrix","columns","name","rows","col_1","col_2","col_3","col_4","initialOutputColumn","createNewColumn","numberOfColumns","newNum","gridTo2DArray","rowsArray","keys","Object","sort","map","row","k","matrixToLatex","matrix","latex","leftBracketOnly","rightBracketOnly","boldRows","transpose","String","raw","rowLength","length","colLength","i","isBold","b","content","formatMatrixLatex","j","TOUR_STEPS","target","title","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","matrixCard","width","divider","height","marginTop","marginBottom","fab","position","bottom","right","Steps","latexContent","smallScreen","params","styleClasses","useState","currentIteration","setCurrentIteration","results","previousMatrix","originalMatrix","finalMatrix","previousOutput","originalOutput","finalOutput","currentResult","iterations","interchange","pivot","formatLatex","factor","finalLatex","initialLatex","operationLatex","Container","className","Collapse","in","Alert","severity","Grid","direction","justify","xs","item","triggerOnce","Box","id","Slider","orientation","event","aria-labelledby","step","marks","min","max","valueLabelDisplay","Card","CardContent","Typography","variant","tex","LinearGauss","methodName","useEffect","document","window","MathJax","autoload","colorv2","useMediaQuery","useTheme","breakpoints","down","columnWidth","widthPadding","heightPadding","gridState","setGridState","outputColumnState","setOutputColumnState","columnCallback","add","slice","push","pop","rowCallback","outputColumns","outputRows","newRow","createNewRow","modifiedMatrix","JSON","parse","stringify","modifiedOutput","pivotLength","tempMatrixRow","tempOutputElement","divisionByZero","col","console","log","runTour","setRunTour","Header","Paper","duration","cascade","Link","rel","href","aria-label","IconButton","onClick","rowGetter","rowsCount","onGridRowsUpdated","fromRow","toRow","updated","enableCellSelect","headerRowHeight","minColumnWidth","minWidth","rowHeight","minHeight","Math","random","Divider","Tooltip","arrow","placement","Fab","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","action"],"mappings":"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","file":"static/js/27.752949ae.chunk.js","sourcesContent":["import {formatMatrixLatex} from \"../../utils\";\r\nimport React from \"react\";\r\n\r\nexport class MatrixElementEditor extends React.Component {\r\n    ref = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: props.value };\r\n    }\r\n    getValue() {\r\n        return { [this.props.column.key]: this.state.value };\r\n    }\r\n\r\n    getInputNode() {\r\n        return this.ref.current ? this.ref.current : null;\r\n    }\r\n\r\n    onInputChange = () => {\r\n        let value = this.ref.current.value;\r\n        try {\r\n            value = parseInt(value);\r\n            if (isNaN(value)) {\r\n                value = 0;\r\n            }\r\n        }\r\n        catch {\r\n            value = 0;\r\n        }\r\n        this.setState({ value: value });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <input ref={this.ref} defaultValue={this.state.value} onBlur={this.onInputChange} onChange={this.onInputChange} />\r\n        )\r\n    }\r\n}\r\n\r\nconst style = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n};\r\n\r\nexport default class WrapperFormatter extends React.Component {\r\n\r\n    render() {\r\n        return (<div style={style}>{this.props.value}</div>)\r\n    }\r\n}\r\n\r\nconst columnSettings = {\r\n    editable: true,\r\n    editor: MatrixElementEditor,\r\n    formatter : WrapperFormatter,\r\n};\r\n\r\nexport const initialMatrix = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 1, col_3: -3, col_4: 4 },\r\n        { col_1: 2, col_2: -2, col_3: 1, col_4: 0 },\r\n        { col_1: 2, col_2: -1, col_3: -2, col_4: 4 },\r\n        { col_1: -6, col_2: 4, col_3: 3, col_4: -8 },\r\n    ]\r\n}\r\nexport const initialOutputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -1, col_3: 0, col_4: 1},\r\n    ]\r\n}\r\n\r\nexport const createNewColumn = (numberOfColumns) => {\r\n    const newNum = numberOfColumns + 1;\r\n    return { key: `col_${newNum}`, name: `C${newNum}`, ...columnSettings };\r\n}\r\n\r\nexport const createNewRow = (numberOfColumns) => {\r\n    let newRow = {};\r\n    for (let i = 1; i <= numberOfColumns; i++) {\r\n        newRow[`col_${i}`] = 0;\r\n    }\r\n    return newRow;\r\n}\r\n\r\nexport const gridTo2DArray = (rowsArray) => {\r\n    let keys = Object.keys(rowsArray[0]).sort();\r\n    let result = rowsArray.map((row) => {\r\n        return keys.map((k) => row[k]);\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const matrixToLatex = (matrix, {leftBracketOnly=false, rightBracketOnly=false, boldRows=[], transpose=false}) => {\r\n    let latex;\r\n    if (rightBracketOnly) {\r\n        latex = String.raw`\\left|\\matrix{`;\r\n    }\r\n    else {\r\n        latex = String.raw`\\left[\\matrix{`\r\n    }\r\n    const rowLength = matrix.length;\r\n    const colLength = matrix[0].length;\r\n    if (rowLength === 1) {\r\n        // 1D array\r\n        for (let i = 0; i < colLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            const content = String.raw` ${formatMatrixLatex(matrix[0][i])} `;\r\n            if (isBold) {\r\n                latex += String.raw` \\bf{${content}} `;\r\n            }\r\n            else {\r\n                latex += String.raw`${content}`;\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            for (let j = 0; j < colLength; j++){\r\n                let content = String.raw` ${formatMatrixLatex(matrix[i][j])} `;\r\n                if (isBold) {\r\n                    latex += String.raw` \\bf{${content}} `;\r\n                }\r\n                else {\r\n                    latex += String.raw`${content}`;\r\n                }\r\n                if (j !== colLength - 1) {\r\n                    latex += String.raw`&`;\r\n                }\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    if (leftBracketOnly) {\r\n        latex += String.raw`}\\right|`;\r\n    }\r\n    else {\r\n        latex += String.raw`}\\right]`;\r\n    }\r\n    return latex;\r\n}","import {formatLatex, formatMatrixLatex} from \"../../utils\";\r\nimport {initialMatrix, initialOutputColumn, createNewColumn, createNewRow, gridTo2DArray, matrixToLatex} from \"./matrix_utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\n\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".matrix-input\",\r\n        title: \"Matrix\",\r\n        content:\r\n        \"Specify the input matrix here.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".output-col-input\",\r\n        title: \"Output\",\r\n        content:\r\n        \"Specify the output.\",\r\n    },\r\n    {\r\n        target: \".matrix-col-input\",\r\n        title: \"Column\",\r\n        content:\r\n        \"Add/Remove columns\",\r\n    },\r\n    {\r\n        target: \".matrix-row-input\",\r\n        title: \"Row\",\r\n        content:\r\n        \"Add/Remove rows\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(0.5),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.primary,\r\n        margin: theme.spacing(1),\r\n    },\r\n    container: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    card: {\r\n        margin: theme.spacing(0),\r\n    },\r\n    cardContent: {\r\n        overflow: 'auto',\r\n        \"& > *\": {\r\n            margin: theme.spacing(0.5)\r\n        }\r\n    },\r\n    overflow: {\r\n        overflow: 'auto',\r\n    },\r\n    matrixCard: {\r\n        width: \"60vw\",\r\n    },\r\n    divider: {\r\n        width: '500 px',\r\n        height: '100px',\r\n        marginTop: '20px',\r\n        marginBottom: '20px',\r\n    },\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(4),\r\n        right: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction LinearGauss({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n        \r\n    });\r\n    window.MathJax = {\r\n  tex: {\r\n    autoload: {\r\n      color: [],\r\n      colorv2: ['color']\r\n    }\r\n  }\r\n};\r\n\r\n    const styleClasses = useStyles();\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    // Grid\r\n    const columnWidth = smallScreen ? 45 : 60;\r\n    const rowHeight = smallScreen ? 35 : 35;\r\n    const widthPadding = smallScreen ? 10 : 100;\r\n    const heightPadding = smallScreen ? 5 : 20;\r\n    const [gridState, setGridState] = useState(initialMatrix);\r\n    const [outputColumnState, setOutputColumnState] = useState(initialOutputColumn);\r\n    const onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n        const rows = gridState.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = { ...rows[i], ...updated };\r\n        }\r\n        setGridState({\r\n            ...gridState, rows\r\n        });\r\n    };\r\n    const onOutputColumnStateUpdated = ({ fromRow, toRow, updated }) => {\r\n        const rows = outputColumnState.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = { ...rows[i], ...updated };\r\n        }\r\n        setOutputColumnState({\r\n            ...outputColumnState, rows\r\n        });\r\n    };\r\n    const columnCallback = (add) => {\r\n        return () => {\r\n            const columns = gridState.columns.slice();\r\n            const rows = gridState.rows.slice();\r\n            if (add) {\r\n                columns.push(createNewColumn(columns.length));\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    rows[i][`col_${columns.length}`] = 0;\r\n                }\r\n            }\r\n            else {\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    delete rows[i][`col_${columns.length}`];\r\n                }\r\n                columns.pop();\r\n            }\r\n            setGridState({columns, rows});\r\n        };\r\n    }\r\n    const rowCallback = (add) => {\r\n        return () => {\r\n            const rows = gridState.rows.slice();\r\n            const outputColumns = outputColumnState.columns.slice();\r\n            const outputRows = outputColumnState.rows.slice();\r\n            if (add) {\r\n                rows.push(createNewRow(gridState.columns.length));\r\n                outputColumns.push(createNewColumn(outputColumns.length));\r\n                outputRows[0][`col_${outputColumns.length}`] = 0;\r\n            }\r\n            else {\r\n                rows.pop();\r\n                for (let i = 0; i < outputRows.length; i++) {\r\n                    delete outputRows[i][`col_${outputColumns.length}`];\r\n                }\r\n                outputColumns.pop();\r\n            }\r\n            setGridState({...gridState, rows});\r\n            setOutputColumnState({columns: outputColumns, rows: outputRows});\r\n        };\r\n    }\r\n\r\n    // Solve\r\n    let solve = true;\r\n    const originalMatrix = gridTo2DArray(gridState.rows);\r\n    let modifiedMatrix = JSON.parse(JSON.stringify(originalMatrix));\r\n    const originalOutput = gridTo2DArray(outputColumnState.rows);\r\n    let modifiedOutput = JSON.parse(JSON.stringify(originalOutput));\r\n    const rowLength = gridState.rows.length; // row dimension, also the output dimension\r\n    const colLength = gridState.columns.length; // column dimension\r\n    let results = [];\r\n    // Check is empty matrix\r\n    // Don't forget to slice every iteration\r\n    // Check for division by zero\r\n    let pivotLength = rowLength < colLength ? rowLength : colLength;\r\n    \r\n    for (let pivot  = 0; pivot < pivotLength - 1; pivot++) {\r\n        for (let row  = pivot + 1; row < pivotLength; row++) {\r\n            if (modifiedMatrix[row - 1][pivot] === 0 && modifiedMatrix[row][pivot] !== 0) {\r\n                let tempMatrixRow = modifiedMatrix[row - 1];\r\n                modifiedMatrix[row - 1] = modifiedMatrix[row];\r\n                modifiedMatrix[row] = tempMatrixRow;\r\n                let tempOutputElement = modifiedOutput[0][row - 1];\r\n                modifiedOutput[0][row - 1] = modifiedOutput[0][row];\r\n                modifiedOutput[0][row] = tempOutputElement;\r\n                    results.push({\r\n                    finalMatrix: JSON.parse(JSON.stringify(modifiedMatrix)),\r\n                    finalOutput: JSON.parse(JSON.stringify(modifiedOutput)),\r\n                    interchange: true,\r\n                    pivot: pivot + 1,\r\n                    row: row + 1,\r\n                });\r\n            }\r\n        }\r\n        for (let row  = pivot + 1; row < pivotLength; row++) {\r\n            let factor = modifiedMatrix[row][pivot] / modifiedMatrix[pivot][pivot];\r\n            let divisionByZero = false;\r\n            if (factor === 0) {\r\n                divisionByZero = true;\r\n            }\r\n            else if (isNaN(factor)) {\r\n                continue;\r\n            }\r\n            if (!divisionByZero) {\r\n                for (let col  = 0; col < colLength; col++) {\r\n                    modifiedMatrix[row][col] -= factor * modifiedMatrix[pivot][col];\r\n                }\r\n                modifiedOutput[0][row] -= factor * modifiedOutput[0][pivot];\r\n            }\r\n            results.push({\r\n                finalMatrix: JSON.parse(JSON.stringify(modifiedMatrix)),\r\n                finalOutput: JSON.parse(JSON.stringify(modifiedOutput)),\r\n                interchange: false,\r\n                factor,\r\n                pivot: pivot + 1,\r\n                row: row + 1,\r\n            });\r\n        }\r\n    }\r\n    \r\n    console.log(results);\r\n    let iterations = results.length;\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true)\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {originalMatrix, originalOutput, rowLength, colLength, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        This method is applied to matrices in the form of\r\n                        <MathComponent display={false} tex={String.raw`\\ Ax=B`} />\r\n                        . <Link rel=\"noopener noreferrer\" href=\"https://people.richland.edu/james/lecture/m116/matrices/pivot.html\" target=\"_blank\" aria-label=\"Pivoting\">Pivoting</Link> is also implemented.\r\n                        No backsubstitution or Gauss-Jordan form due to &nbsp;\r\n                        <Link color=\"error\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=vIci3C4JkL0\" target=\"_blank\" aria-label=\"laziness\">laziness</Link>.\r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Grid container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                        <Grid xs item className=\"matrix-col-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"flex-start\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Columns:\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={columnCallback(false)}>\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={columnCallback(true)}>\r\n                                                <AddCircleOutlineOutlinedIcon  />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"matrix-row-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"flex-start\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Rows:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={rowCallback(false)} >\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={rowCallback(true)} >\r\n                                                <AddCircleOutlineOutlinedIcon />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        \r\n                                        <Grid xs item>\r\n                                            <Typography variant=\"h6\">\r\n                                                Matrix, A:\r\n                                            </Typography>\r\n                                        </Grid>\r\n\r\n                                        <Grid xs item className=\"matrix-input\" container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                <ReactDataGrid\r\n                                                    columns={gridState.columns}\r\n                                                    rowGetter={i => gridState.rows[i]}\r\n                                                    rowsCount={gridState.rows.length}\r\n                                                    onGridRowsUpdated={onGridRowsUpdated}\r\n                                                    enableCellSelect={true}\r\n                                                    headerRowHeight={1}\r\n                                                    minColumnWidth={columnWidth}\r\n                                                    minWidth={columnWidth * gridState.columns.length + widthPadding}\r\n                                                    rowHeight={rowHeight}\r\n                                                    minHeight={rowHeight * gridState.rows.length + heightPadding}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid xs item>\r\n                                            <Typography variant=\"h6\">\r\n                                                Output, B:\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        \r\n                                        <Grid xs item className=\"output-col-input\" container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                <ReactDataGrid\r\n                                                    columns={outputColumnState.columns}\r\n                                                    rowGetter={i => outputColumnState.rows[i]}\r\n                                                    rowsCount={outputColumnState.rows.length}\r\n                                                    onGridRowsUpdated={onOutputColumnStateUpdated}\r\n                                                    enableCellSelect={true}\r\n                                                    headerRowHeight={1}\r\n                                                    minColumnWidth={columnWidth}\r\n                                                    minWidth={columnWidth * outputColumnState.columns.length + widthPadding}\r\n                                                    rowHeight={rowHeight}\r\n                                                    minHeight={rowHeight * outputColumnState.rows.length + heightPadding}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>                                    \r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps smallScreen={smallScreen} params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({smallScreen, params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    let hasError = false;\r\n    let errorText = \"\";\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let results = params.results;\r\n    let previousMatrix = currentIteration===1 ? params.originalMatrix : results[currentIteration - 2].finalMatrix;\r\n    let previousOutput = currentIteration===1 ? params.originalOutput : results[currentIteration - 2].finalOutput;\r\n    let currentResult = results[currentIteration - 1];\r\n    let latexContent;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        `;\r\n        if (!currentResult.interchange) {\r\n            latexContent += String.raw`\r\n            \\begin{array}{lcl}\r\n            \\\\ Factor &=& \\frac{A_{${currentResult.row}${currentResult.pivot}}}{A_{${currentResult.pivot}${currentResult.pivot}}}\r\n            \\\\        &=& ${formatLatex(currentResult.factor)}\r\n            \\end{array}\r\n            `;\r\n        }\r\n        latexContent += String.raw`\\\\ \\begin{array}{lcl} `;\r\n        const boldRows = currentResult.interchange ? [currentResult.row - 1, currentResult.row] : [currentResult.row, currentResult.pivot];\r\n        const finalLatex= String.raw`\\overbrace{${matrixToLatex(currentResult.finalMatrix, {leftBracketOnly:true, boldRows: boldRows})}}^{A}\r\n        \\overbrace{${matrixToLatex(currentResult.finalOutput, {rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n        if (!currentResult.interchange && currentResult.factor === 0) {\r\n            latexContent += String.raw`\r\n                \\\\ \\text{The factor is zero, so no elimination is done here.}\r\n                \\\\\r\n                \\\\ ${finalLatex}\r\n            `;\r\n        }\r\n        else {\r\n            \r\n            const initialLatex = String.raw`\r\n            \\overbrace{${matrixToLatex(previousMatrix, {leftBracketOnly: true, boldRows: boldRows})}}^{A}\r\n            \\overbrace{${matrixToLatex(previousOutput, {rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n            const operationLatex = currentResult.interchange ?\r\n            String.raw`R_{${currentResult.row - 1}} \\Leftrightarrow R_{${currentResult.row}}`\r\n            : String.raw`R_{${currentResult.row}} = R_{${currentResult.row}}-${formatMatrixLatex(currentResult.factor)}R_{${currentResult.pivot}}`;\r\n            if (smallScreen) {\r\n                latexContent += String.raw`\r\n                \\\\ ${initialLatex}\r\n                \\\\\r\n                \\\\ \\begin{array}{lcl}\r\n                       & \\downarrow &\r\n                    \\\\ & ${operationLatex} &\r\n                    \\\\ & \\downarrow &\r\n                    \\end{array}\r\n                \\\\\r\n                \\\\ ${finalLatex}\r\n                `;\r\n            }\r\n            else {\r\n                latexContent += String.raw`\r\n                \\\\ ${initialLatex}\r\n                & \\overrightarrow{${operationLatex}}\r\n                & ${finalLatex}\r\n                `;\r\n            }\r\n        }\r\n        latexContent += String.raw`\\end{array}`;\r\n        \r\n\r\n        latexContent += String.raw`\r\n        \\\\\r\n        \\begin{array}{lcl}\r\n        \\\\\r\n        \\end{array}\r\n        `;\r\n        latexContent += String.raw`\\end{array}`;\r\n    }\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container direction=\"column\" alignItems=\"center\" justify=\"flex-start\">\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" width=\"70vw\">\r\n                                <Slider\r\n                                    orientation=\"horizontal\"\r\n                                    onChange={(event, value) => {setCurrentIteration(value)}}\r\n                                    defaultValue={1}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item className=\"step-math\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iteration {currentIteration}:\r\n                                    </Typography>\r\n                                    <MathComponent tex={latexContent}/>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LinearGauss;"],"sourceRoot":""}