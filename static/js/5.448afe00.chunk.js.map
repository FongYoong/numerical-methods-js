{"version":3,"sources":["../node_modules/is-any-array/src/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/mathOperations.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/evd.js"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","max","input","options","arguments","length","undefined","isArray","TypeError","_options$fromIndex","fromIndex","_options$toIndex","toIndex","Number","isInteger","Error","maxValue","i","min","minValue","rescale","output","Array","currentMin","currentMax","RangeError","_options$min","autoMinMax","_options$max","factor","indent","repeat","indentData","inspectMatrixWithOptions","matrix","maxRows","maxColumns","maxNumSize","constructor","name","inspectData","rows","columns","maxI","Math","maxJ","result","line","j","push","formatNumber","get","join","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","slice","checkRowIndex","index","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","some","r","from","checkColumnIndices","columnIndices","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","value","array","checkNonEmpty","isEmpty","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","varianceByColumn","varianceAll","size","centerByRow","set","centerByColumn","centerAll","getScaleByRow","scale","sum","pow","sqrt","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","AbstractMatrix","this","callback","copy","to2DArray","isSquare","previousColumn","isEchelonForm","checked","isReducedEchelonForm","k","clone","h","iMax","swapRows","tmp","echelonForm","m","n","maxRow","p","pivot","Matrix","setSubMatrix","mulS","row","rowVector","getRow","row1","row2","temp","column","columnVector","getColumn","column1","column2","NaN","v","idx","diag","type","vector2","isMatrix","vector1","dot","other","checkMatrix","Bcolj","Float64Array","s","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","y","r1","c1","r2","c2","embed","mat","resultat","zeros","console","warn","blockMult","a","b","mmul","halfRows","parseInt","halfCols","subMatrix","add","sub","isFinite","newMatrix","setRow","setColumn","middle","ceil","first","last","q","l","compareFunction","compareNumbers","sort","indices","checkIndices","rowIndex","columnIndex","trace","by","sumByRow","sumByColumn","sumAll","productByRow","productByColumn","productAll","center","newRows","newColumns","newData","fill","random","interval","round","data","matrix1","matrix2","klass","Symbol","for","rand","randomInt","randInt","diagonal","identity","eye","negate","neg","tensorProduct","kroneckerProduct","nRows","nColumns","arrayData","splice","newRow","addS","addM","subS","subM","subtract","subtractS","subtractM","mul","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","WrapperMatrix2D","hypotenuse","EigenvalueDecomposition","assumeSymmetric","V","d","isSymmetric","tred2","tql2","H","ort","orthes","hqr2","X","f","g","hh","dl1","c3","el1","s2","tst1","eps","EPSILON","high","low","nn","t","w","ra","sa","vr","vi","notlast","cdivres","exshift","norm","z","iter","cdiv","xr","xi","yr","yi"],"mappings":"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","file":"static/js/5.448afe00.chunk.js","sourcesContent":["const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","import isArray from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const { maxRows = 15, maxColumns = 10, maxNumSize = 8 } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nexport function checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","import rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n  checkNonEmpty,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n"],"sourceRoot":""}