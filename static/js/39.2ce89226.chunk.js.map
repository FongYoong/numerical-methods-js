{"version":3,"sources":["components/methods/optimisation/GoldenSearch.js","components/Graph.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","Steps","latexContent","graphCallback","params","styleClasses","useState","currentIteration","setCurrentIteration","hasError","exceedIterError","errorText","exceedIterErrorText","currentResult","results","iterations","oldLowerXLatex","String","raw","oldUpperXLatex","newLowerXLatex","newUpperXLatex","formatLatex","oldLowerX","oldUpperX","d","aX","bX","lowerFuncResult","upperFuncResult","newLowerX","newUpperX","interval","intervalThreshold","calculator","current","setExpression","id","Desmos","BLUE","latex","functionLatex","RED","pointStyle","POINT","label","showLabel","GREEN","smallScreen","useMediaQuery","useTheme","breakpoints","down","className","in","severity","direction","alignItems","justify","xs","item","triggerOnce","variant","height","width","orientation","onChangeCommitted","event","value","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","duration","math","block","addStyles","OptiGoldenSearch","methodName","markdown","useEffect","document","functionValue","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","traverse","node","path","parent","type","mathjsKeywords","includes","name","e","lowerX","setLowerX","upperX","setUpperX","intervalError","lowerXErrorText","upperXErrorText","lowerXError","isNaN","upperXError","setIntervalThreshold","thresholdError","thresholdErrorText","goldenRatio","Math","sqrt","solve","isValidMath","i","evaluate","x","abs","push","runTour","setRunTour","cascade","disabled","onChange","mathField","mathquillDidMount","parseFloat","error","toString","helperText","arrow","placement","aria-label","onClick","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","DialogTitle","withStyles","root","closeButton","top","grey","props","children","classes","onClose","other","disableTypography","DialogContent","defaultIteration","desmosDiv","useRef","updateGraph","useCallback","updateSettings","xAxisLabel","yAxisLabel","xAxisArrowMode","POSITIVE","yAxisArrowMode","style","keypad","expressions","expressionsTopbar","description","component","ref","Graph","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","open","dividers"],"mappings":"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","file":"static/js/39.2ce89226.chunk.js","sourcesContent":["import {isValidMath, mathjsKeywords, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport Graph from \"../../Graph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".interval-input\",\r\n        title: \"Interval\",\r\n        content:\r\n            \"Select the lower and upper bounds of x\",\r\n    },\r\n    {\r\n        target: \".intervalThreshold-input\",\r\n        title: \"Interval Threshold\",\r\n        content:\r\n            \"Specify the minimum interval threshold\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction OptiGoldenSearch({methodName, markdown}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Function\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`3+6x-4x^2`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n        functionValue.traverse(function (node, path, parent) {\r\n            if (node.type === 'SymbolNode' && !mathjsKeywords.includes(node.name)) {\r\n                if (node.name !== 'x') {\r\n                    throw \"variableName\";\r\n                }\r\n            }\r\n        });\r\n    }\r\n    catch(e) {\r\n        functionError = true;\r\n        functionErrorText = e === \"variableName\" ? \"Only x variable is allowed.\" :  \"Invalid equation!\";\r\n    }\r\n\r\n    // Interval\r\n    const [lowerX, setLowerX] = useState(-1);\r\n    const [upperX, setUpperX] = useState(2);\r\n    let intervalError = false;\r\n    let lowerXErrorText = \"\";\r\n    let upperXErrorText = \"\";\r\n    if (lowerX >= upperX) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"Lower x must be lower than upper x!\";\r\n        upperXErrorText = \"Upper x must be higher than lower x!\";\r\n    }\r\n    let lowerXError = false;\r\n    if (isNaN(lowerX)) {\r\n        lowerXError = true;\r\n        lowerXErrorText = \"Lower x must be a number!\";\r\n    }\r\n    let upperXError = false;\r\n    if (isNaN(upperX)) {\r\n        upperXError = true;\r\n        upperXErrorText = \"Upper x must be a number!\";\r\n    }\r\n\r\n    // Interval threshold\r\n    const [intervalThreshold, setIntervalThreshold] = useState(0.25);\r\n    let thresholdError = false;\r\n    let thresholdErrorText = \"\";\r\n    if (isNaN(intervalThreshold)) {\r\n        thresholdError = true;\r\n        thresholdErrorText = \"Threshold must be a number!\";\r\n    }\r\n    if (intervalThreshold < 0) {\r\n        thresholdError = true;\r\n        thresholdErrorText = \"Threshold cannot be negative!\";\r\n    }\r\n\r\n    let hasError = functionError || intervalError || lowerXError || upperXError || thresholdError;\r\n\r\n    // Solve\r\n    const goldenRatio = (Math.sqrt(5) - 1) / 2;\r\n    let solve = false;\r\n    let exceedIterError = false;\r\n    let exceedIterErrorText = \"\";\r\n    let results = [];\r\n    let iterations = 1;\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        let i = 0;\r\n        while (true) {\r\n            let oldLowerX = (i === 0) ? lowerX: results[i - 1].newLowerX;\r\n            let oldUpperX = (i === 0) ? upperX: results[i - 1].newUpperX;\r\n            const d = goldenRatio * (oldUpperX - oldLowerX);\r\n            let aX = oldUpperX - d;\r\n            let bX = oldLowerX + d;\r\n            let newLowerX = aX;\r\n            let newUpperX = bX;\r\n            let lowerFuncResult, upperFuncResult;\r\n            try {\r\n                lowerFuncResult = functionValue.evaluate({x : aX});\r\n                upperFuncResult = functionValue.evaluate({x : bX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            if (lowerFuncResult > upperFuncResult) {\r\n                newLowerX = oldLowerX;\r\n            }\r\n            else if (lowerFuncResult < upperFuncResult) {\r\n                newUpperX = oldUpperX;\r\n            }\r\n            // Check if interval is lower than threshold\r\n            const interval = Math.abs(newUpperX - newLowerX);\r\n            \r\n            results.push({\r\n                oldLowerX,\r\n                newLowerX,\r\n                oldUpperX,\r\n                newUpperX,\r\n                d,\r\n                aX,\r\n                bX,\r\n                lowerFuncResult,\r\n                upperFuncResult,\r\n                interval,\r\n            });\r\n            i++;\r\n            if (i > 1000) {\r\n                exceedIterError = true;\r\n                exceedIterErrorText = \"Exceeded 1000 iterations!\";\r\n                break;\r\n            }\r\n            if (interval < intervalThreshold){\r\n                break;\r\n            }\r\n        }\r\n        iterations = i;\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true)\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {functionLatex, intervalThreshold, goldenRatio, iterations, exceedIterError, exceedIterErrorText, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName={methodName} markdown={markdown} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function, f(x):\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid className=\"interval-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Lower x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setLowerX(parseFloat(event.target.value))}\r\n                                        error={intervalError || lowerXError}\r\n                                        label={intervalError || lowerXError ?\"Error\":\"\"}\r\n                                        defaultValue={lowerX.toString()}\r\n                                        helperText={lowerXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Upper x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setUpperX(parseFloat(event.target.value))}\r\n                                        error={intervalError || upperXError}\r\n                                        label={intervalError || upperXError ?\"Error\":\"\"}\r\n                                        defaultValue={upperX.toString()}\r\n                                        helperText={upperXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"intervalThreshold-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Interval threshold:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setIntervalThreshold(parseFloat(event.target.value))}\r\n                                        error={thresholdError}\r\n                                        label={thresholdError?\"Error\":\"\"}\r\n                                        defaultValue={intervalThreshold.toString()}\r\n                                        helperText={thresholdErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let hasError = params.exceedIterError;\r\n    let errorText = params.exceedIterErrorText;\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let oldLowerXLatex = String.raw`x_{lower_{${currentIteration - 1}}}`;\r\n        let oldUpperXLatex = String.raw`x_{upper_{${currentIteration - 1}}}`;\r\n        let newLowerXLatex = String.raw`x_{lower_{${currentIteration}}}`;\r\n        let newUpperXLatex = String.raw`x_{upper_{${currentIteration}}}`;\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\begin{array}{lcl}\r\n        \\\\ ${oldLowerXLatex} &=& ${formatLatex(currentResult.oldLowerX)}\r\n        \\\\ ${oldUpperXLatex} &=& ${formatLatex(currentResult.oldUpperX)}\r\n        \\\\\r\n        \\\\ d &=& R (${oldUpperXLatex} - ${oldLowerXLatex})\r\n        \\\\   &=& ${formatLatex(currentResult.d)}\r\n        \\\\\r\n        \\\\ x_a &=& ${oldUpperXLatex} - d\r\n        \\\\     &=& ${formatLatex(currentResult.aX)}\r\n        \\\\ x_b &=& ${oldLowerXLatex} + d\r\n        \\\\     &=& ${formatLatex(currentResult.bX)}\r\n        \\\\\r\n        \\\\ f(x_a) &=& ${formatLatex(currentResult.lowerFuncResult)}\r\n        \\\\ f(x_b) &=& ${formatLatex(currentResult.upperFuncResult)}\r\n        \\\\\r\n        \\\\\r\n        `;\r\n        if (currentResult.lowerFuncResult > currentResult.upperFuncResult) {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\hline\r\n            \\\\ \\text{Given that } f(x_a) > f(x_b),\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${newLowerXLatex} &=& ${oldLowerXLatex}\r\n            \\\\                   &=& ${formatLatex(currentResult.newLowerX)}\r\n            \\\\ ${newUpperXLatex} &=& x_b\r\n            \\\\                   &=& ${formatLatex(currentResult.newUpperX)}\r\n            `;\r\n        }\r\n        else if (currentResult.lowerFuncResult < currentResult.upperFuncResult) {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\hline\r\n            \\\\ \\text{Given that } f(x_a) < f(x_b),\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${newLowerXLatex} &=& x_a\r\n            \\\\                   &=& ${formatLatex(currentResult.newLowerX)}\r\n            \\\\ ${newUpperXLatex} &=& ${oldUpperXLatex}\r\n            \\\\                   &=& ${formatLatex(currentResult.newUpperX)}\r\n            `;\r\n        }\r\n        else {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\ \\hline\r\n            \\\\ \\text{Given that } f(x_a) = f(x_b),\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ ${newLowerXLatex} &=& x_a\r\n            \\\\                   &=& ${formatLatex(currentResult.newLowerX)}\r\n            \\\\ ${newUpperXLatex} &=& x_b\r\n            \\\\                   &=& ${formatLatex(currentResult.newUpperX)}\r\n            `;\r\n        }\r\n        latexContent += String.raw`\r\n        \\\\\r\n        \\\\ \\text{Uncertainty Interval} &=& |${newUpperXLatex} - ${newLowerXLatex}|\r\n        \\\\                             &=& |${formatLatex(currentResult.interval)}|\r\n        `;\r\n        if (currentIteration === params.iterations) {\r\n            latexContent += String.raw`\r\n            \\end{array}\r\n            \\\\\r\n            \\\\ \\hline\r\n            \\\\ \\text{Stop searching because:}\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ \\text{Uncertainty Interval} &<& \\text{Interval Threshold}\r\n            \\\\ ${formatLatex(currentResult.interval)} &<& ${formatLatex(params.intervalThreshold)}\r\n            `;\r\n        }\r\n        \r\n        latexContent += String.raw`\\end{array}\\end{array}`;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: params.functionLatex});\r\n            calculator.current.setExpression({ id: 'x_a', color: Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, label: \"x_a\", showLabel:true, latex:\r\n                `(${currentResult.aX}, ${currentResult.lowerFuncResult})` });\r\n            calculator.current.setExpression({ id: 'x_b', color: Desmos.Colors.GREEN, pointStyle: Desmos.Styles.POINT, label: \"x_b\", showLabel:true, latex:\r\n                `(${currentResult.bX}, ${currentResult.upperFuncResult})` });\r\n        }\r\n    }\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                    <Grid xs item>\r\n                        <Zoom triggerOnce>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Converged after {params.iterations} iterations\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Zoom>\r\n                    </Grid>\r\n                \r\n                    <Grid container xs item direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                        <Grid xs item className=\"iteration-slider\">\r\n                            <Slide direction=\"left\" triggerOnce>\r\n                                <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                    <Slider\r\n                                        orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                        onChangeCommitted={(event, value) => setCurrentIteration(value)}\r\n                                        defaultValue={1}\r\n                                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                                        step={1}\r\n                                        marks\r\n                                        min={1}\r\n                                        max={params.iterations}\r\n                                        valueLabelDisplay=\"on\"\r\n                                    />\r\n                                    \r\n                                </Box>\r\n                            </Slide>\r\n                        </Grid>\r\n                        <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                            <Grid xs item className=\"step-math\">\r\n                                <Zoom duration={500} triggerOnce>\r\n                                    <Card className={styleClasses.card}>\r\n                                        <CardContent className={styleClasses.cardContent}>\r\n                                            <Typography variant=\"h6\">\r\n                                                Iteration {currentIteration}:\r\n                                            </Typography>\r\n                                            <TeX math={latexContent} block />\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Zoom>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid xs item className=\"graph-button\">\r\n                            <Slide direction=\"right\" triggerOnce>\r\n                                <Graph params={{currentIteration, graphCallback, smallScreen, ...params}} />\r\n                            </Slide>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\nexport default OptiGoldenSearch;","import {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.iterations > 0 ? params.results[currentIteration - 1] : null;\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            calculator.current.updateSettings({xAxisLabel: 'x', yAxisLabel: 'y',  xAxisArrowMode: Desmos.AxisArrowModes.POSITIVE, yAxisArrowMode: Desmos.AxisArrowModes.POSITIVE });\r\n            params.graphCallback(calculator, currentResult, currentIteration);\r\n        }\r\n    }, [calculator, currentResult, params, currentIteration]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            {params.description && <Box component=\"div\" overflow=\"visible\">\r\n                    <Typography variant=\"h6\">\r\n                        {params.description}\r\n                    </Typography>\r\n                </Box>\r\n            }\r\n            {params.functionLatex && <Box component=\"div\" overflow=\"visible\">\r\n                    <TeX math={`${params.functionLatex}`} block />\r\n                </Box>\r\n            }\r\n            <Typography variant=\"h6\">\r\n                {params.iterations > 0 ? `Iteration ${currentIteration}:` : <br />}\r\n            </Typography>\r\n            {params.iterations > 0 &&\r\n                <Box width=\"70%\">\r\n                    <Slider\r\n                        orientation=\"horizontal\"\r\n                        onChange={(event, value) => setCurrentIteration(value)}\r\n                        defaultValue={defaultIteration}\r\n                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                        step={1}\r\n                        marks\r\n                        min={1}\r\n                        max={params.iterations}\r\n                        valueLabelDisplay=\"auto\"\r\n                    />\r\n                </Box>\r\n            }\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction Graph({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Graph;"],"sourceRoot":""}