{"version":3,"sources":["components/methods/linear/matrix_utils.js","components/methods/linear/Jacobi.js"],"names":["MatrixElementEditor","props","ref","React","createRef","onInputChange","value","current","parseInt","isNaN","setState","state","this","column","key","defaultValue","onBlur","onChange","Component","style","display","justifyContent","alignItems","flexDirection","columnSettings","editable","editor","formatter","createNewColumn","numberOfColumns","newNum","name","createNewRow","newRow","i","gridTo2DArray","rowsArray","keys","Object","sort","map","row","k","cloneArray","array","JSON","parse","stringify","isDiagonallyDominant","matrix","length","diagonal","sum","j","Math","abs","numberFactorials","nextPermutation","temp","generatePermutationMapping","target","original","Array","mapping","alreadyCovered","includes","push","matrixToLatex","latex","single","leftBracketOnly","rightBracketOnly","boldRows","transpose","String","raw","rowLength","colLength","isBold","b","content","formatMatrixLatex","initialMatrix","columns","rows","col_1","col_2","col_3","col_4","initialOutputColumn","initialMatrix3","initialInputColumn3","initialOutputColumn3","TOUR_STEPS","title","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","matrixCard","width","divider","height","marginTop","marginBottom","fab","position","bottom","right","Steps","latexContent","smallScreen","params","styleClasses","useState","currentIteration","setCurrentIteration","hasError","exceedIterError","errorText","exceedIterErrorText","iterations","triedPermutating","originalMatrix","originalInput","originalOutput","results","currentResult","permutated","permutationMapping","rowIndexes","v","values","previousLatex","operationLatex","entries","newLatex","newMatrix","newOutput","output","oldInput","newInput","console","log","restoredOutput","formatLatex","errorInput","converged","errorThreshold","className","in","severity","direction","justify","xs","item","triggerOnce","id","orientation","onChangeCommitted","event","aria-labelledby","step","marks","min","max","valueLabelDisplay","variant","math","LinearJacobi","methodName","useEffect","document","useMediaQuery","useTheme","breakpoints","down","columnWidth","rowHeight","widthPadding","heightPadding","gridState","setGridState","inputColumnState","setInputColumnState","outputColumnState","setOutputColumnState","generateGridCallback","stateSetter","fromRow","toRow","updated","slice","sizeCallback","add","inputColumns","inputRows","outputColumns","outputRows","pop","setErrorThreshold","thresholdError","thresholdErrorText","solve","modifiedInput","matrixSize","dominant","modifiedMatrix","modifiedOutput","numPermutations","permutatedMatrix","ind","index","runTour","setRunTour","duration","cascade","rel","href","aria-label","onClick","rowGetter","rowsCount","onGridRowsUpdated","enableCellSelect","headerRowHeight","minColumnWidth","minWidth","minHeight","random","disabled","type","parseFloat","error","label","toString","helperText","arrow","placement","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","action"],"mappings":"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","file":"static/js/10.5d168b67.chunk.js","sourcesContent":["import {formatMatrixLatex} from \"../../utils\";\r\nimport React from \"react\";\r\n\r\nexport class MatrixElementEditor extends React.Component {\r\n    ref = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: props.value };\r\n    }\r\n    getValue() {\r\n        return { [this.props.column.key]: this.state.value };\r\n    }\r\n\r\n    getInputNode() {\r\n        return this.ref.current ? this.ref.current : null;\r\n    }\r\n\r\n    onInputChange = () => {\r\n        let value = this.ref.current.value;\r\n        try {\r\n            value = parseInt(value);\r\n            if (isNaN(value)) {\r\n                value = 0;\r\n            }\r\n        }\r\n        catch {\r\n            value = 0;\r\n        }\r\n        this.setState({ value: value });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <input ref={this.ref} defaultValue={this.state.value} onBlur={this.onInputChange} onChange={this.onInputChange} />\r\n        )\r\n    }\r\n}\r\n\r\nconst style = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n};\r\n\r\nexport default class WrapperFormatter extends React.Component {\r\n\r\n    render() {\r\n        return (<div style={style}>{this.props.value}</div>)\r\n    }\r\n}\r\n\r\nconst columnSettings = {\r\n    editable: true,\r\n    editor: MatrixElementEditor,\r\n    formatter : WrapperFormatter,\r\n};\r\n\r\nexport const createNewColumn = (numberOfColumns) => {\r\n    const newNum = numberOfColumns + 1;\r\n    return { key: `col_${newNum}`, name: `C${newNum}`, ...columnSettings };\r\n}\r\n\r\nexport const createNewRow = (numberOfColumns) => {\r\n    let newRow = {};\r\n    for (let i = 1; i <= numberOfColumns; i++) {\r\n        newRow[`col_${i}`] = 0;\r\n    }\r\n    return newRow;\r\n}\r\n\r\nexport const gridTo2DArray = (rowsArray) => {\r\n    let keys = Object.keys(rowsArray[0]).sort();\r\n    let result = rowsArray.map((row) => {\r\n        return keys.map((k) => row[k]);\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const cloneArray = (array) => {\r\n    return JSON.parse(JSON.stringify(array));\r\n}\r\n\r\nexport const isDiagonallyDominant = (matrix) => {\r\n    // Strictly diagonal dominant\r\n    for (let i  = 0; i < matrix.length; i++) {\r\n        let diagonal = matrix[i][i];\r\n        let sum = 0;\r\n        for (let j  = 0; j < matrix.length; j++) {\r\n            if (j !== i) {\r\n                sum += matrix[i][j];\r\n            }\r\n        }\r\n        if (Math.abs(diagonal) <= Math.abs(sum)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// First 15 factorials.\r\nexport const numberFactorials = [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000];\r\n\r\nexport const nextPermutation = (array) => {\r\n    // Mutates array\r\n    // Find non-increasing suffix\r\n    let i = array.length - 1;\r\n    while (i > 0 && array[i - 1] >= array[i])\r\n        i--;\r\n    if (i <= 0)\r\n        return false;\r\n\r\n    // Find successor to pivot\r\n    let j = array.length - 1;\r\n    while (array[j] <= array[i - 1])\r\n        j--;\r\n    let temp = array[i - 1];\r\n    array[i - 1] = array[j];\r\n    array[j] = temp;\r\n\r\n    // Reverse suffix\r\n    j = array.length - 1;\r\n    while (i < j) {\r\n        temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        i++;\r\n        j--;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const generatePermutationMapping = (target, original=[...Array(target.length).keys()]) => {\r\n    let mapping = {};\r\n    let alreadyCovered = [];\r\n    for (let i = 0; i < original.length; i++) {\r\n        if (!alreadyCovered.includes(target[i]) && original[i] !== target[i]) {\r\n            mapping[i] = target[i];\r\n            alreadyCovered.push(original[i], target[i]);\r\n        }\r\n    }\r\n    return mapping;\r\n}\r\n\r\nexport const matrixToLatex = (matrix, {single=false, leftBracketOnly=false, rightBracketOnly=false, boldRows=[], transpose=false}={}) => {\r\n    let latex;\r\n    if (rightBracketOnly) {\r\n        latex = String.raw`\\left|\\begin{matrix}`;\r\n    }\r\n    else {\r\n        latex = String.raw`\\left[\\begin{matrix}`\r\n    }\r\n    const rowLength = matrix.length;\r\n    const colLength = matrix[0].length;\r\n    if (single) {\r\n        // 1D array\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            const content = String.raw` ${formatMatrixLatex(matrix[i])} `;\r\n            if (isBold) {\r\n                latex += String.raw` \\colorbox{aqua}{\\bf{${content}}} `;\r\n            }\r\n            else {\r\n                latex += String.raw`${content}`;\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < rowLength; i++){\r\n            let isBold = false;\r\n            for (let b = 0; b < boldRows.length; b++) {\r\n                if (boldRows[b] === i + 1) {\r\n                    isBold = true;\r\n                    break;\r\n                }\r\n            }\r\n            for (let j = 0; j < colLength; j++){\r\n                let content = String.raw` ${formatMatrixLatex(matrix[i][j])} `;\r\n                if (isBold) {\r\n                    latex += String.raw` \\colorbox{aqua}{\\bf{${content}}} `;\r\n                }\r\n                else {\r\n                    latex += String.raw`${content}`;\r\n                }\r\n                if (j !== colLength - 1) {\r\n                    latex += String.raw`&`;\r\n                }\r\n            }\r\n            latex += String.raw`\\cr`;\r\n        }\r\n    }\r\n    if (leftBracketOnly) {\r\n        latex += String.raw`\\end{matrix}\\right|`;\r\n    }\r\n    else {\r\n        latex += String.raw`\\end{matrix}\\right]`;\r\n    }\r\n    return latex;\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////\r\n// Matrix initial values\r\n///////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////\r\nexport const initialMatrix = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 1, col_3: -3, col_4: 4 },\r\n        { col_1: 2, col_2: -2, col_3: 1, col_4: 0 },\r\n        { col_1: 2, col_2: -1, col_3: -2, col_4: 4 },\r\n        { col_1: -6, col_2: 4, col_3: 3, col_4: -8 },\r\n    ]\r\n}\r\nexport const initialInputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0, col_4: 0},\r\n    ]\r\n}\r\nexport const initialOutputColumn = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -1, col_3: 0, col_4: 1},\r\n    ]\r\n}\r\n\r\nexport const initialMatrix2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 1, col_2: -10, col_3: 1 },\r\n        { col_1: 20, col_2: 1, col_3: -1 },\r\n        { col_1: -1, col_2: 1, col_3: 10 },\r\n    ]\r\n}\r\nexport const initialInputColumn2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0 },\r\n    ]\r\n}\r\nexport const initialOutputColumn2 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 13, col_2: 17, col_3: 18 },\r\n    ]\r\n}\r\n\r\nexport const initialMatrix3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: -1, col_2: 11, col_3: -1, col_4: 3 },\r\n        { col_1: 10, col_2: -1, col_3: 2, col_4: 0 },\r\n        { col_1: 0, col_2: 3, col_3: -1, col_4: 8 },\r\n        { col_1: 2, col_2: -1, col_3: 10, col_4: -1 },\r\n    ]\r\n}\r\nexport const initialInputColumn3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 0, col_2: 0, col_3: 0, col_4: 0 },\r\n    ]\r\n}\r\nexport const initialOutputColumn3 = {\r\n    columns: [\r\n        { key: \"col_1\", name: \"C1\", ...columnSettings },\r\n        { key: \"col_2\", name: \"C2\", ...columnSettings },\r\n        { key: \"col_3\", name: \"C3\", ...columnSettings },\r\n        { key: \"col_4\", name: \"C4\", ...columnSettings },\r\n    ],\r\n    rows: [\r\n        { col_1: 25, col_2: 6, col_3: 15, col_4: -11, },\r\n    ]\r\n}","import {formatLatex, formatMatrixLatex} from \"../../utils\";\r\nimport {initialMatrix3, initialInputColumn3, initialOutputColumn3, createNewColumn, createNewRow, gridTo2DArray, cloneArray,\r\nisDiagonallyDominant, numberFactorials, nextPermutation, generatePermutationMapping, matrixToLatex} from \"./matrix_utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\n\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport RemoveCircleOutlineOutlinedIcon from '@material-ui/icons/RemoveCircleOutlineOutlined';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".matrix-size-input\",\r\n        title: \"Size\",\r\n        content:\r\n        \"Increase/Reduce the matrix's size\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".matrix-input\",\r\n        title: \"Matrix\",\r\n        content:\r\n        \"Specify the matrix here.\",\r\n    },\r\n    {\r\n        target: \".input-col-input\",\r\n        title: \"Input\",\r\n        content:\r\n        \"Specify the initial input vector.\",\r\n    },\r\n    {\r\n        target: \".output-col-input\",\r\n        title: \"Output\",\r\n        content:\r\n        \"Specify the output vector.\",\r\n    },\r\n    {\r\n        target: \".errorThreshold-input\",\r\n        title: \"Error Threshold\",\r\n        content:\r\n            \"Specify the minimum error threshold\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(0.5),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.primary,\r\n        margin: theme.spacing(1),\r\n    },\r\n    container: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    card: {\r\n        margin: theme.spacing(0),\r\n    },\r\n    cardContent: {\r\n        overflow: 'auto',\r\n        \"& > *\": {\r\n            margin: theme.spacing(0.5)\r\n        }\r\n    },\r\n    overflow: {\r\n        overflow: 'auto',\r\n    },\r\n    matrixCard: {\r\n        width: \"60vw\",\r\n    },\r\n    divider: {\r\n        width: '500 px',\r\n        height: '100px',\r\n        marginTop: '20px',\r\n        marginBottom: '20px',\r\n    },\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(4),\r\n        right: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction LinearJacobi({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n        \r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    // Grid\r\n    const columnWidth = smallScreen ? 45 : 60;\r\n    const rowHeight = smallScreen ? 35 : 35;\r\n    const widthPadding = smallScreen ? 10 : 100;\r\n    const heightPadding = smallScreen ? 5 : 20;\r\n    const [gridState, setGridState] = useState(initialMatrix3);\r\n    const [inputColumnState, setInputColumnState] = useState(initialInputColumn3);\r\n    const [outputColumnState, setOutputColumnState] = useState(initialOutputColumn3);\r\n    function generateGridCallback (state, stateSetter) {\r\n        return ({ fromRow, toRow, updated }) => {\r\n            const rows = state.rows.slice();\r\n            for (let i = fromRow; i <= toRow; i++) {\r\n                rows[i] = { ...rows[i], ...updated };\r\n            }\r\n            stateSetter({\r\n                ...state, rows\r\n            });\r\n        };\r\n    }\r\n    const sizeCallback = (add) => {\r\n        return () => {\r\n            const columns = gridState.columns.slice();\r\n            const rows = gridState.rows.slice();\r\n            const inputColumns = inputColumnState.columns.slice();\r\n            const inputRows = inputColumnState.rows.slice();\r\n            const outputColumns = outputColumnState.columns.slice();\r\n            const outputRows = outputColumnState.rows.slice();\r\n            if (add) {\r\n                columns.push(createNewColumn(columns.length));\r\n                rows.push(createNewRow(gridState.columns.length));\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    rows[i][`col_${columns.length}`] = 0;\r\n                }\r\n                inputColumns.push(createNewColumn(inputColumns.length));\r\n                inputRows[0][`col_${inputColumns.length}`] = 0;\r\n                outputColumns.push(createNewColumn(outputColumns.length));\r\n                outputRows[0][`col_${outputColumns.length}`] = 0;\r\n            }\r\n            else {\r\n                if (columns.length === 2) {\r\n                    return;\r\n                }\r\n                rows.pop();\r\n                for (let i = 0; i < outputRows.length; i++) {\r\n                    delete outputRows[i][`col_${outputColumns.length}`];\r\n                }\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    delete rows[i][`col_${columns.length}`];\r\n                }\r\n                columns.pop();\r\n                for (let i = 0; i < inputRows.length; i++) {\r\n                    delete inputRows[i][`col_${inputColumns.length}`];\r\n                }\r\n                inputColumns.pop();\r\n                outputColumns.pop();\r\n            }\r\n            setGridState({columns, rows});\r\n            setInputColumnState({columns: inputColumns, rows: inputRows});\r\n            setOutputColumnState({columns: outputColumns, rows: outputRows});\r\n        };\r\n    }\r\n\r\n    // Error threshold\r\n    const [errorThreshold, setErrorThreshold] = useState(0.0002);\r\n    let thresholdError = false;\r\n    let thresholdErrorText = \"\";\r\n    if (errorThreshold < 0) {\r\n        thresholdError = true;\r\n        thresholdErrorText = \"Threshold cannot be negative!\";\r\n    }\r\n\r\n    let hasError = thresholdError;\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let exceedIterError = false;\r\n    let exceedIterErrorText = \"\";\r\n    const originalMatrix = gridTo2DArray(gridState.rows);\r\n    const originalOutput = gridTo2DArray(outputColumnState.rows)[0];\r\n    const originalInput = gridTo2DArray(inputColumnState.rows)[0];\r\n    let modifiedInput = cloneArray(originalInput);\r\n    const matrixSize = gridState.rows.length;\r\n    let results = [];\r\n    let iterations = 1;\r\n    // Check if empty matrix\r\n    // Don't forget to slice every iteration\r\n    // Check for division by zero\r\n    // Check diagonal dominance\r\n    let triedPermutating = false; // Failed to obtain a dominant matrix even after permutating.\r\n    if (!hasError) {\r\n        solve = true;\r\n        // Strictly diagonally dominant\r\n        let dominant = false;\r\n        let modifiedMatrix = cloneArray(originalMatrix);\r\n        let modifiedOutput = cloneArray(originalOutput);\r\n        console.log(\"Original: \", modifiedMatrix);\r\n        if (!isDiagonallyDominant(modifiedMatrix)) {\r\n            console.log(\"Initially not dominant!\");\r\n            let numPermutations = numberFactorials[matrixSize];\r\n            let rowIndexes = [...Array(matrixSize).keys()];\r\n            console.log(\"Start indexes\", rowIndexes);\r\n            for (let i = 0; i < numPermutations - 1; i++) {\r\n                nextPermutation(rowIndexes);\r\n                console.log(\"Indexes\", rowIndexes);\r\n                const permutatedMatrix = rowIndexes.map(ind => modifiedMatrix[ind]);\r\n                if (isDiagonallyDominant(permutatedMatrix)) {\r\n                    dominant = true;\r\n                    modifiedMatrix = permutatedMatrix;\r\n                    modifiedOutput = rowIndexes.map(ind => modifiedOutput[ind]);\r\n                    console.log(\"Found a dominant!\", modifiedMatrix, modifiedOutput, rowIndexes);\r\n                    break;\r\n                }\r\n            }\r\n            if (dominant) {\r\n                results.push({\r\n                    newMatrix: cloneArray(modifiedMatrix),\r\n                    newOutput: cloneArray(modifiedOutput),\r\n                    newInput: cloneArray(modifiedInput),\r\n                    permutated: true,\r\n                    rowIndexes: rowIndexes,\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"Tried permutating but failed!\");\r\n                triedPermutating = true;\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"Initially dominant!\");\r\n            dominant = true;\r\n        }\r\n        \r\n        if (dominant) {\r\n            console.log(\"Solve Dominant!\");\r\n            let i = 0;\r\n            while (true) {\r\n                let oldInput = (i === 0) ? originalInput : results[i - 1].newInput;\r\n                let newInput = [];\r\n                for (let j = 0; j < matrixSize; j++) {\r\n                    let sum = modifiedOutput[j];\r\n                    for (let k = 0; k < matrixSize; k++) {\r\n                        if (k !== j) {\r\n                            sum -= modifiedMatrix[j][k] * oldInput[k];\r\n                        }\r\n                    }                    \r\n                    sum /= modifiedMatrix[j][j];\r\n                    newInput.push(sum);\r\n                }\r\n                let errorInput = newInput.map((v, index) => Math.abs(v - oldInput[index]));\r\n                let converged = true;\r\n                for (let j = 0; j < matrixSize; j++) {\r\n                    if (errorInput[j] >= errorThreshold) {\r\n                        converged = false;\r\n                        break;\r\n                    }\r\n                }\r\n                results.push({\r\n                    oldInput,\r\n                    newInput,\r\n                    errorInput,\r\n                    converged,\r\n                });\r\n                \r\n                i++;\r\n                if (converged) {\r\n                    console.log(\"Converged\");\r\n                    break;\r\n                }\r\n                if (i > 1000) {\r\n                    console.log(\"Exceeded 1000 iterations!\");\r\n                    exceedIterError = true;\r\n                    exceedIterErrorText = \"Exceeded 1000 iterations! Try increasing the error threshold.\";\r\n                    break;\r\n                }\r\n            }\r\n            iterations = i + 1;   // NOT DONE: If not dominant after all the permutations, then 1 iteration.\r\n        }\r\n    }\r\n    console.log(results);\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true)\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {originalMatrix, originalInput, originalOutput, matrixSize, errorThreshold, iterations, exceedIterError, exceedIterErrorText, results, triedPermutating};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        This method is applied to matrices in the form of\r\n                        <TeX math={String.raw`\\ Ax=B`} />\r\n                        . <Link rel=\"noopener noreferrer\" href=\"https://people.richland.edu/james/lecture/m116/matrices/pivot.html\" target=\"_blank\" aria-label=\"Pivoting\">Pivoting</Link>\r\n                        &nbsp; bla bla bla. Warning: 7x7 matrix, factorial, 7! * 7*7\r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Grid container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                        <Grid xs item className=\"matrix-size-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                Size:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                            </Typography>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={sizeCallback(false)} >\r\n                                                <RemoveCircleOutlineOutlinedIcon color=\"error\" />\r\n                                            </IconButton>\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={sizeCallback(true)} >\r\n                                                <AddCircleOutlineOutlinedIcon />\r\n                                            </IconButton>\r\n                                        </Grid>\r\n\r\n                                        <Grid xs item className=\"matrix-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Matrix, A:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid xs item container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                                <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                    <ReactDataGrid\r\n                                                        columns={gridState.columns}\r\n                                                        rowGetter={i => gridState.rows[i]}\r\n                                                        rowsCount={gridState.rows.length}\r\n                                                        onGridRowsUpdated={generateGridCallback(gridState, setGridState)}\r\n                                                        enableCellSelect={true}\r\n                                                        headerRowHeight={1}\r\n                                                        minColumnWidth={columnWidth}\r\n                                                        minWidth={columnWidth * gridState.columns.length + widthPadding}\r\n                                                        rowHeight={rowHeight}\r\n                                                        minHeight={rowHeight * gridState.rows.length + heightPadding}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid xs item className=\"input-col-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Initial Input, <TeX math={String.raw`X^{(0)}`} />:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid xs item container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                                <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                    <ReactDataGrid\r\n                                                        columns={inputColumnState.columns}\r\n                                                        rowGetter={i => inputColumnState.rows[i]}\r\n                                                        rowsCount={inputColumnState.rows.length}\r\n                                                        onGridRowsUpdated={generateGridCallback(inputColumnState, setInputColumnState)}\r\n                                                        enableCellSelect={true}\r\n                                                        headerRowHeight={1}\r\n                                                        minColumnWidth={columnWidth}\r\n                                                        minWidth={columnWidth * inputColumnState.columns.length + widthPadding}\r\n                                                        rowHeight={rowHeight}\r\n                                                        minHeight={rowHeight * inputColumnState.rows.length + heightPadding}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"output-col-input\" container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                                            <Grid xs item>\r\n                                                <Typography variant=\"h6\">\r\n                                                    Output, B:\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid xs item container spacing={0} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                                <Grid key={Math.random()} item className={styleClasses.overflow}>\r\n                                                    <ReactDataGrid\r\n                                                        columns={outputColumnState.columns}\r\n                                                        rowGetter={i => outputColumnState.rows[i]}\r\n                                                        rowsCount={outputColumnState.rows.length}\r\n                                                        onGridRowsUpdated={generateGridCallback(outputColumnState, setOutputColumnState)}\r\n                                                        enableCellSelect={true}\r\n                                                        headerRowHeight={1}\r\n                                                        minColumnWidth={columnWidth}\r\n                                                        minWidth={columnWidth * outputColumnState.columns.length + widthPadding}\r\n                                                        rowHeight={rowHeight}\r\n                                                        minHeight={rowHeight * outputColumnState.rows.length + heightPadding}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid xs item className=\"errorThreshold-input\">\r\n                                            <Card className={styleClasses.card}>\r\n                                                <CardContent className={styleClasses.cardContent}>\r\n                                                    <Typography variant=\"h6\">\r\n                                                        Error threshold:\r\n                                                    </Typography>\r\n                                                    <TextField\r\n                                                        disabled={false}\r\n                                                        type=\"number\"\r\n                                                        onChange={(event)=>setErrorThreshold(parseFloat(event.target.value))}\r\n                                                        error={thresholdError}\r\n                                                        label={thresholdError?\"Error\":\"\"}\r\n                                                        defaultValue={errorThreshold.toString()}\r\n                                                        helperText={thresholdErrorText}\r\n                                                        variant=\"outlined\"\r\n                                                    />\r\n                                                </CardContent>\r\n                                            </Card>\r\n                                        </Grid>\r\n                                    </Grid>                                    \r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps smallScreen={smallScreen} params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({smallScreen, params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n    let hasError = params.exceedIterError;\r\n    let errorText = params.exceedIterErrorText;\r\n    let latexContent;\r\n\r\n    if (currentIteration <= 0) {\r\n        setCurrentIteration(1);\r\n    }\r\n    else if (params.iterations > 0 && currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else if (params.triedPermutating) {\r\n        // Failed even after permutating the matrix\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\\\ \\text{Cannot find a diagonally dominant matrix.}\r\n        \\\\ \\overbrace{${matrixToLatex(params.originalMatrix, {leftBracketOnly: true})}}^{A}\r\n           \\overbrace{${matrixToLatex(params.originalInput, {single: true})}}^{X_{0}}\r\n        &=&\\overbrace{${matrixToLatex(params.originalOutput, {single: true})}}^{B}\r\n        \\end{array}\r\n        `;\r\n    }\r\n    else if (params.iterations > 0) {\r\n        let results = params.results;\r\n        let currentResult = results[currentIteration - 1];\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\\\ \\begin{array}{lcl}\r\n        `;\r\n        if (currentResult.permutated) {\r\n            const permutationMapping = generatePermutationMapping(currentResult.rowIndexes);\r\n            const boldRows = Object.keys(permutationMapping).map((v) => parseInt(v) + 1);\r\n            boldRows.push(...Object.values(permutationMapping).map((v) => v + 1));\r\n            const previousLatex = String.raw`\r\n            \\overbrace{${matrixToLatex(params.originalMatrix, {leftBracketOnly: true, boldRows: boldRows})}}^{A}\r\n            \\overbrace{${matrixToLatex(params.originalOutput, {single:true, rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n            let operationLatex =  String.raw`\\begin{array}{l}`;\r\n            for (const [key, value] of Object.entries(permutationMapping)) {\r\n                //console.log(`${key}: ${value}`);\r\n                operationLatex += String.raw`R_{${parseInt(key) + 1}} \\leftrightarrow R_{${value + 1}}\\\\`;\r\n            }\r\n            operationLatex += String.raw`\\end{array}`;\r\n            const newLatex= String.raw`\r\n            \\overbrace{${matrixToLatex(currentResult.newMatrix, {leftBracketOnly:true, boldRows: boldRows})}}^{A}\r\n            \\overbrace{${matrixToLatex(currentResult.newOutput, {single:true, rightBracketOnly:true, boldRows: boldRows})}}^{B}`;\r\n            latexContent += String.raw`\r\n            \\\\ \\text{The matrix's rows are } \\textbf{permutated} ${smallScreen?\"\\\\\\\\\":\"\"} \\text{ to make it } \\textbf{strictly diagonally dominant.}\r\n            \\\\`\r\n            if (smallScreen) {\r\n                latexContent += String.raw`\r\n                \\\\ ${previousLatex}\r\n                \\\\ \\begin{array}{lcl}\r\n                    & \\downarrow &\r\n                    \\\\ & ${operationLatex} &\r\n                    \\\\ & \\downarrow &\r\n                    \\end{array}\r\n                \\\\ ${newLatex}\r\n                `;\r\n            }\r\n            else {\r\n                latexContent += String.raw`\r\n                \\\\ \\begin{array}{lcl}\r\n                \\\\ ${previousLatex}\r\n                    & \\overrightarrow{${operationLatex}}\r\n                    & ${newLatex}\r\n                    \\end{array}\r\n                `;\r\n            }\r\n        }\r\n        else {\r\n            // Inform if converged\r\n            let matrix = results[0].permutated ? results[0].newMatrix : params.originalMatrix;\r\n            let output = results[0].permutated ? results[0].newOutput : params.originalOutput;\r\n            /*\r\n            const newLatex= String.raw`\r\n            \\overbrace{${matrixToLatex(currentResult.newMatrix, {leftBracketOnly:true})}}^{A}\r\n            \\overbrace{${matrixToLatex(params.originalInput)}}^{X_{${currentIteration}}}\r\n            \\overbrace{${matrixToLatex(currentResult.newOutput, {single:true, rightBracketOnly:true})}}^{B}`;\r\n            */\r\n            latexContent += String.raw`\r\n                \\\\\r\n                \\overbrace{${matrixToLatex(matrix, {leftBracketOnly:true})}}^{A}\r\n                \\overbrace{${matrixToLatex(currentResult.oldInput, {single: true})}}^{X^{(${currentIteration - 1})}}\r\n                = \\overbrace{${matrixToLatex(output, {single:true})}}^{B}\r\n                \\\\ X^{(${currentIteration})}_i = \\frac{1}{A_{ii}}\r\n                    \\left[ B_i - \\sum_{\\substack{j = 1, \\\\ j \\ne i}}^n\r\n                        \\left( A_{ij} \\cdot X^{(${currentIteration - 1})}_i \\right)\r\n                    \\right]\r\n                    \r\n                \\\\ X^{(${currentIteration})} = ${matrixToLatex(currentResult.newInput, {single: true})}\r\n            `;\r\n            if (results[0].permutated) {\r\n                // Reorder the equations\r\n                const permutationMapping = generatePermutationMapping(results[0].rowIndexes);\r\n                console.log(permutationMapping);\r\n                let restoredOutput = cloneArray(currentResult.newInput);\r\n\r\n                latexContent += String.raw`\r\n                \\\\\r\n                \\\\ \\text {Given that the matrix A has been permutated in iteration 1, }\r\n                \\\\ \\text {we must restore the original order:}\r\n                \\\\\r\n                \\\\ X^{(${currentIteration})} = ${matrixToLatex(restoredOutput, {single: true})}\r\n                `;\r\n            }\r\n            latexContent += String.raw`\r\n            \\\\\r\n            \\begin{array}{lcl}\r\n            \\\\ Error &=& |X^{(${currentIteration})} - X^{(${currentIteration - 1})}|\r\n            \\\\       &=& |${formatLatex(currentResult.errorInput)}|\r\n            \\end{array}\r\n            `;\r\n            if (currentResult.converged) {\r\n                latexContent += String.raw`\r\n                \\\\\r\n                \\\\ \\text{Converged because:}\r\n                \\\\\r\n                \\\\ Error < Error Threshold\r\n                \\\\ ${formatLatex(currentResult.errorInput)} < ${formatLatex(params.errorThreshold)}\r\n                `;\r\n            }\r\n        }\r\n        latexContent += String.raw`\\end{array}\\end{array}`;\r\n        \r\n    }\r\n    else {\r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{lcl}\r\n        \\\\ \\text{Cannot do anything.}\r\n        \\\\ \\overbrace{${matrixToLatex(params.originalMatrix, {leftBracketOnly: true})}}^{A}\r\n           \\overbrace{${matrixToLatex(params.originalInput, {single: true})}}^{X_{0}}\r\n        &=&\\overbrace{${matrixToLatex(params.originalOutput, {single: true})}}^{B}\r\n        \\end{array}\r\n        `;\r\n    }\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid container direction=\"column\" alignItems=\"center\" justify=\"flex-start\">\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" width=\"70vw\">\r\n                                <Slider\r\n                                    orientation=\"horizontal\"\r\n                                    onChangeCommitted={(event, value) => {setCurrentIteration(value)}}\r\n                                    defaultValue={currentIteration}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations<=0 ? 1 :params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item className=\"step-math\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iteration {currentIteration}:\r\n                                    </Typography>\r\n                                    <TeX math={latexContent} />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n            </Collapse>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LinearJacobi;"],"sourceRoot":""}