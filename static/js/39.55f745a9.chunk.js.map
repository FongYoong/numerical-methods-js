{"version":3,"sources":["components/methods/integral/Trapezoidal.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","addStyles","IntegralTrapezoidal","methodName","useEffect","document","functionValue","styleClasses","useState","String","raw","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","evaluate","x","lowerX","setLowerX","upperX","setUpperX","intervalError","lowerXErrorText","upperXErrorText","isNaN","subIntervals","setSubIntervals","subIntervalsError","subIntervalsErrorText","Number","isInteger","latexContent","hasError","solve","isValidMath","width","results","integralResult","i","x1","f","push","formatLatex","runTour","setRunTour","className","duration","triggerOnce","cascade","direction","alignItems","justify","xs","item","variant","disabled","latex","onChange","mathField","mathquillDidMount","in","severity","type","event","parseInt","value","error","label","defaultValue","toString","helperText","parseFloat","math","block","arrow","placement","aria-label","onClick","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action"],"mappings":"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","file":"static/js/39.55f745a9.chunk.js","sourcesContent":["import {isValidMath, mathjsToLatex, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".subIntervals-input\",\r\n        title: \"Order\",\r\n        content:\r\n            \"Specify the number of subintervals, N.\",\r\n    },\r\n    {\r\n        target: \".interval-input\",\r\n        title: \"Interval\",\r\n        content:\r\n            \"Select the lower and upper bounds of x\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps for each iteration are shown here.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction IntegralTrapezoidal({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`3x^2+2x-8`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Invalid equation!\";\r\n    }\r\n    try {\r\n        // Check variables\r\n        functionValue.evaluate({x : 0});\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Only variable x is allowed!\";\r\n    }\r\n\r\n    // Interval\r\n    const [lowerX, setLowerX] = useState(0);\r\n    const [upperX, setUpperX] = useState(3);\r\n    let intervalError = false;\r\n    let lowerXErrorText = \"\";\r\n    let upperXErrorText = \"\";\r\n    if (isNaN(lowerX)) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"x value cannot be empty!\";\r\n    }\r\n    if (isNaN(upperX)) {\r\n        intervalError = true;\r\n        upperXErrorText = \"x value cannot be empty!\";\r\n    }\r\n    if (lowerX >= upperX) {\r\n        intervalError = true;\r\n        lowerXErrorText = \"Lower x must be lower than upper x!\";\r\n        upperXErrorText = \"Upper x must be higher than lower x!\";\r\n    }\r\n\r\n    // Subintervals\r\n    const [subIntervals, setSubIntervals] = useState(10);\r\n    let subIntervalsError = false;\r\n    let subIntervalsErrorText = \"\";\r\n    if (isNaN(subIntervals) || !Number.isInteger(subIntervals) || subIntervals <= 0) {\r\n        subIntervalsError = true;\r\n        subIntervalsErrorText = \"Subintervals must be a positive integer!\";\r\n    }\r\n\r\n    let hasError = functionError || intervalError || subIntervalsError;\r\n\r\n    // Solve\r\n    let latexContent;\r\n    let solve = false;\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        const width = (upperX - lowerX) / subIntervals;\r\n        let results = [];\r\n        let integralResult = 0;\r\n        for (let i = 0; i < subIntervals; i++) {\r\n            const x1 = lowerX + i * width;\r\n            const x2 = x1 + width;\r\n            const x = (x1 + x2) / 2;\r\n            let f = functionValue.evaluate({x : x})\r\n            integralResult += f;\r\n            results.push(f);\r\n        }\r\n        integralResult *= width; \r\n        \r\n        latexContent = String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{l}\r\n        \\begin{array}{lcl}\r\n        \\\\ h &=& \\frac{ x_{upper} - x_{lower} }{N}\r\n        \\\\   &=& ${formatLatex(width)}\r\n        \\end{array}\r\n        \\\\\r\n        \\\\ x_i = x_{lower} + i \\cdot h\r\n        \\\\ x_{i+1} = x_i + h\r\n        \\\\\r\n        \\\\ \\hline\r\n        \\begin{array}{lcl}\r\n        \\\\ \\int_{${lowerX}}^{${upperX}} f(x) dx &=& h \\sum_{i=1}^{${subIntervals}} \\left[ f(\\frac{x_i + x_{i+1}}{2}) \\right]\r\n        \\\\`;\r\n        latexContent += String.raw`\r\n        \\\\ &=& ${formatLatex(width)} [`;\r\n        for (let i = 0; i < subIntervals; i++) {\r\n            latexContent += String.raw`f(\\frac{${formatLatex(lowerX + i * width)} + ${formatLatex(lowerX + (i+1) * width)}}{2}) ${i===subIntervals - 1 ? \"\" : \"+\"}`;\r\n        }\r\n        latexContent += String.raw`\r\n        ]\r\n        \\\\\r\n        \\\\ &=& ${formatLatex(width)} [`;\r\n        for (let i = 0; i < subIntervals; i++) {\r\n            latexContent += String.raw`${formatLatex(results[i])} ${i===subIntervals - 1 ? \"\" : \"+\"}`;\r\n        }\r\n        latexContent += String.raw`\r\n        ]\r\n        \\\\\r\n        \\\\ &=& ${formatLatex(integralResult)}\r\n        \\end{array}\\end{array}\r\n        `;\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true);\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function:\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"subIntervals-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Subintervals, N:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setSubIntervals(parseInt(event.target.value))}\r\n                                        error={subIntervalsError}\r\n                                        label={subIntervalsError?\"Error\":\"\"}\r\n                                        defaultValue={subIntervals.toString()}\r\n                                        helperText={subIntervalsErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid className=\"interval-input\" container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Lower x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setLowerX(parseFloat(event.target.value))}\r\n                                        error={intervalError}\r\n                                        label={intervalError?\"Error\":\"\"}\r\n                                        defaultValue={lowerX.toString()}\r\n                                        helperText={lowerXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item>\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Upper x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setUpperX(parseFloat(event.target.value))}\r\n                                        error={intervalError}\r\n                                        label={intervalError?\"Error\":\"\"}\r\n                                        defaultValue={upperX.toString()}\r\n                                        helperText={upperXErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve &&\r\n                        <Container className={styleClasses.container}>\r\n                            <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                                <Grid xs item className=\"step-math\">\r\n                                    <Slide direction=\"left\" triggerOnce>\r\n                                        <Card className={styleClasses.card}>\r\n                                            <CardContent className={styleClasses.cardContent}>\r\n                                                <TeX math={latexContent} block />\r\n                                            </CardContent>\r\n                                        </Card>\r\n                                    </Slide>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Container>\r\n                        }\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default IntegralTrapezoidal;"],"sourceRoot":""}