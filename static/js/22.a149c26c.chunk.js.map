{"version":3,"sources":["components/methods/nonlinear/FixedPoint.js","components/methods/nonlinear/DesmosGraph.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","Steps","latexContent","graphCallback","params","styleClasses","useState","currentIteration","setCurrentIteration","currentResult","results","iterations","previousXLatex","String","raw","newXLatex","formatLatex","previousX","funcResult","newX","errorX","calculator","current","setExpression","id","Desmos","BLUE","latex","mathjsToLatex","functionValue","ORANGE","pointStyle","POINT","label","showLabel","RED","smallScreen","useMediaQuery","useTheme","breakpoints","down","className","in","severity","direction","alignItems","justify","xs","item","triggerOnce","height","width","orientation","onChange","event","value","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","duration","variant","math","block","addStyles","NonlinearFixedPoint","methodName","useEffect","document","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","setIterations","iterError","iterErrorText","Number","isInteger","hasError","initialX","setInitialX","solve","isValidMath","i","evaluate","x","Math","abs","push","runTour","setRunTour","cascade","disabled","mathField","mathquillDidMount","type","parseInt","error","toString","helperText","parseFloat","arrow","placement","aria-label","onClick","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","DialogTitle","withStyles","root","closeButton","top","grey","props","children","classes","onClose","other","disableTypography","DialogContent","defaultIteration","desmosDiv","useRef","updateGraph","useCallback","style","keypad","expressions","expressionsTopbar","component","ref","NewtonDesmos","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","open","dividers"],"mappings":"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","file":"static/js/22.a149c26c.chunk.js","sourcesContent":["import {isValidMath, mathjsToLatex, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport DesmosGraph from \"./DesmosGraph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".iteration-input\",\r\n        title: \"Iterations\",\r\n        content:\r\n            \"Specify the number of iterations to apply the fixed point method.\",\r\n    },\r\n    {\r\n        target: \".initialX-input\",\r\n        title: \"Initial x value\",\r\n        content:\r\n            \"Specify the initial/starting value of x.\",\r\n    },\r\n    {\r\n        target: \".results\",\r\n        title: \"Results\",\r\n        content:\r\n            \"The results are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps for each iteration are shown here.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction NonlinearFixedPoint({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Derivative\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`\\frac{3-x^3}{6}`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Invalid equation!\";\r\n    }\r\n\r\n    // Iterations\r\n    const [iterations, setIterations] = useState(10);\r\n    let iterError = false;\r\n    let iterErrorText = \"\";\r\n    if (!Number.isInteger(iterations) || iterations <= 0) {\r\n        iterError = true;\r\n        iterErrorText = \"Iterations must be a positive integer!\";\r\n    }\r\n\r\n    let hasError = functionError || iterError;\r\n\r\n    // Initial x\r\n    const [initialX, setInitialX] = useState(1.5);\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let results = [];\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        for (let i = 0; i < iterations; i++) {\r\n            let previousX = (i === 0) ? initialX: results[i - 1].newX;\r\n            let funcResult;\r\n            try {\r\n                funcResult = functionValue.evaluate({x : previousX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            \r\n            let newX = funcResult;\r\n            let errorX = Math.abs(newX - previousX);\r\n            results.push({\r\n                previousX,\r\n                funcResult,\r\n                newX,\r\n                errorX,\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        solve = false;\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        setRunTour(true);\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n\r\n    let params = {functionValue, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        It is assumed that the user has already rearranged the original function into the form\r\n                        <TeX math={String.raw`\\ x=f(x)`} />\r\n                        .\r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function, f(x):\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"iteration-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iterations:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setIterations(parseInt(event.target.value))}\r\n                                        error={iterError}\r\n                                        label={iterError?\"Error\":\"\"}\r\n                                        defaultValue={iterations.toString()}\r\n                                        helperText={iterErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"initialX-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Initial value, <TeX math={String.raw`x_0`} />:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setInitialX(parseFloat(event.target.value))}\r\n                                        label={\"\"}\r\n                                        defaultValue={initialX.toString()}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n            </Paper>\r\n\r\n            <Divider />\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n\r\n    let hasError = false;\r\n    let errorText = \"\";\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let previousXLatex = String.raw`x_{${currentIteration - 1}}`;\r\n        let newXLatex = String.raw`x_{${currentIteration}}`;\r\n        latexContent =\r\n        String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{lll}\r\n        \\\\ ${previousXLatex} &=& ${formatLatex(currentResult.previousX)}\r\n        \\\\ f(${previousXLatex}) &=& ${formatLatex(currentResult.funcResult)}\r\n        \\\\ ${newXLatex} &=& f(${previousXLatex})\r\n        \\\\              &=& ${formatLatex(currentResult.newX)}\r\n        \\\\ Error &=& |${newXLatex} - ${previousXLatex}|\r\n        \\\\       &=& |${formatLatex(currentResult.errorX)}|\r\n        \\end{array}\r\n        `;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: mathjsToLatex(params.functionValue)});\r\n            calculator.current.setExpression({ id: 'initialX', color: Desmos.Colors.ORANGE, pointStyle: Desmos.Styles.POINT, label: \"initialX\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.previousX)}, ${formatLatex(currentResult.funcResult)})` });\r\n            calculator.current.setExpression({ id: 'root', color: Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, label: \"Root\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.newX)}, 0)` });\r\n        }\r\n    }\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                <Slider\r\n                                    orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                    onChange={(event, value) => {setCurrentIteration(value)}}\r\n                                    defaultValue={1}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"step-math\">\r\n                            <Zoom duration={500} triggerOnce>\r\n                                <Card className={styleClasses.card}>\r\n                                    <CardContent className={styleClasses.cardContent}>\r\n                                        <Typography variant=\"h6\">\r\n                                            Iteration {currentIteration}:\r\n                                        </Typography>\r\n                                        <TeX math={latexContent} block />\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Zoom>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid xs item className=\"graph-button\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            <DesmosGraph params={{currentIteration, graphCallback, smallScreen, ...params}} />\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NonlinearFixedPoint;","import {mathjsToLatex} from \"../../utils\";\r\nimport {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport 'katex/dist/katex.min.css';\r\nimport TeX from '@matejmazur/react-katex';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.results[currentIteration - 1];\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            params.graphCallback(calculator, currentResult);\r\n        }\r\n    }, [calculator, currentResult, params]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            <Box component=\"div\" overflow=\"visible\">\r\n                <TeX math={`${mathjsToLatex(params.functionValue)}`} block />\r\n            </Box>\r\n            <Typography variant=\"h6\">\r\n                Iteration {currentIteration}:\r\n            </Typography>\r\n            <Box width=\"70%\">\r\n                <Slider\r\n                    orientation=\"horizontal\"\r\n                    onChange={(event, value) => setCurrentIteration(value)}\r\n                    defaultValue={defaultIteration}\r\n                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                    step={1}\r\n                    marks\r\n                    min={1}\r\n                    max={params.iterations}\r\n                    valueLabelDisplay=\"auto\"\r\n                />\r\n            </Box>\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction NewtonDesmos({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewtonDesmos;"],"sourceRoot":""}