{"version":3,"sources":["components/methods/linear/Gauss.js"],"names":["TOUR_STEPS","WidthProvider","Responsive","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","Steps","latexContent","params","styleClasses","useState","currentIteration","setCurrentIteration","currentResult","results","iterations","previousXLatex","String","raw","newXLatex","formatLatex","previousX","funcResult","newX","errorX","smallScreen","useMediaQuery","useTheme","breakpoints","down","className","in","severity","direction","alignItems","justify","xs","item","triggerOnce","id","height","width","orientation","onChange","event","value","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","duration","variant","tex","addStyles","LinearGauss","methodName","useEffect","document","functionValue","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","setIterations","iterError","iterErrorText","Number","isInteger","hasError","initialX","setInitialX","solve","isValidMath","i","evaluate","x","Math","abs","push","runTour","setRunTour","openErrorSnackbar","setOpenErrorSnackbar","errorSnackbarClose","reason","cascade","display","disabled","latex","mathField","mathquillDidMount","type","parseInt","error","label","toString","helperText","parseFloat","arrow","placement","aria-label","onClick","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","open","autoHideDuration","onClose"],"mappings":"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","file":"static/js/27.7693b9d1.chunk.js","sourcesContent":["import {isValidMath, mathjsToLatex, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse } from 'mathjs'; // Remove this\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".matrix-input\",\r\n        title: \"Matrix\",\r\n        content:\r\n        \"Specify the input matrix here.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps are shown here.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction LinearGauss({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Derivative\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`\\frac{3-x^3}{6}`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Invalid equation!\";\r\n    }\r\n\r\n    // Iterations\r\n    const [iterations, setIterations] = useState(10);\r\n    let iterError = false;\r\n    let iterErrorText = \"\";\r\n    if (!Number.isInteger(iterations) || iterations <= 0) {\r\n        iterError = true;\r\n        iterErrorText = \"Iterations must be a positive integer!\";\r\n    }\r\n\r\n    let hasError = functionError || iterError;\r\n\r\n    // Initial x\r\n    const [initialX, setInitialX] = useState(1.5);\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let results = [];\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        for (let i = 0; i < iterations; i++) {\r\n            let previousX = (i === 0) ? initialX: results[i - 1].newX;\r\n            let funcResult;\r\n            try {\r\n                funcResult = functionValue.evaluate({x : previousX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            \r\n            let newX = funcResult;\r\n            let errorX = Math.abs(newX - previousX);\r\n            results.push({\r\n                previousX,\r\n                funcResult,\r\n                newX,\r\n                errorX,\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        solve = false;\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        if (hasError) {\r\n            setOpenErrorSnackbar(true);\r\n        }\r\n        else {\r\n            setRunTour(true)\r\n        }\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n    const [openErrorSnackbar, setOpenErrorSnackbar] = useState(false);\r\n\r\n    const errorSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenErrorSnackbar(false);\r\n    };\r\n\r\n    let params = {functionValue, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Typography variant=\"body1\">\r\n                        It is assumed that the user has already rearranged the original function into the form\r\n                        <MathComponent display={false} tex={String.raw`\\ x=f(x)`} />\r\n                        .\r\n                    </Typography>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"matrix-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function, f(x):\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"iteration-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iterations:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setIterations(parseInt(event.target.value))}\r\n                                        error={iterError}\r\n                                        label={iterError?\"Error\":\"\"}\r\n                                        defaultValue={iterations.toString()}\r\n                                        helperText={iterErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"initialX-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Initial x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setInitialX(parseFloat(event.target.value))}\r\n                                        label={\"\"}\r\n                                        defaultValue={initialX.toString()}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider  />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n            <Snackbar open={openErrorSnackbar} autoHideDuration={2000} onClose={errorSnackbarClose}>\r\n                <Alert onClose={errorSnackbarClose} severity=\"error\">\r\n                    There is an error with the {functionError?\"function\":\"iterations\"}.\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n\r\n    let hasError = false;\r\n    let errorText = \"\";\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let previousXLatex = String.raw`x_{${currentIteration - 1}}`;\r\n        let newXLatex = String.raw`x_{${currentIteration}}`;\r\n        latexContent =\r\n        String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{lll}\r\n        \\\\ ${previousXLatex} &=& ${formatLatex(currentResult.previousX)}\r\n        \\\\ f(${previousXLatex}) &=& ${formatLatex(currentResult.funcResult)}\r\n        \\\\ ${newXLatex} &=& f(${previousXLatex})\r\n        \\\\              &=& ${formatLatex(currentResult.newX)}\r\n        \\\\ Error &=& |${newXLatex} - ${previousXLatex}|\r\n        \\\\       &=& |${formatLatex(currentResult.errorX)}|\r\n        \\end{array}\r\n        `;\r\n    }\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                <Slider\r\n                                    orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                    onChange={(event, value) => {setCurrentIteration(value)}}\r\n                                    defaultValue={1}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"step-math\">\r\n                            <Zoom duration={500} triggerOnce>\r\n                                <Card className={styleClasses.card}>\r\n                                    <CardContent className={styleClasses.cardContent}>\r\n                                        <Typography variant=\"h6\">\r\n                                            Iteration {currentIteration}:\r\n                                        </Typography>\r\n                                        <MathComponent tex={latexContent}/>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Zoom>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid xs item className=\"graph-button\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            Graph hereeeee\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LinearGauss;"],"sourceRoot":""}