{"version":3,"sources":["components/methods/nonlinear/Newton.js","components/methods/nonlinear/DesmosGraph.js"],"names":["TOUR_STEPS","target","title","content","disableBeacon","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","primary","margin","container","card","cardContent","overflow","fab","position","bottom","right","Steps","latexContent","graphCallback","params","styleClasses","useState","currentIteration","setCurrentIteration","currentResult","results","iterations","previousXLatex","String","raw","newXLatex","formatLatex","previousX","funcResult","derivResult","newX","errorX","calculator","current","setExpression","id","Desmos","BLUE","latex","mathjsToLatex","functionValue","GREEN","lineStyle","DOTTED","ORANGE","pointStyle","POINT","label","showLabel","RED","smallScreen","useMediaQuery","useTheme","breakpoints","down","className","in","severity","direction","alignItems","justify","xs","item","triggerOnce","height","width","orientation","onChange","event","value","defaultValue","aria-labelledby","step","marks","min","max","valueLabelDisplay","duration","variant","tex","addStyles","NonlinearNewton","methodName","useEffect","document","derivValue","derivLatex","functionLatex","setFunctionLatex","functionText","setFunctionText","functionError","functionErrorText","parse","derivative","setIterations","iterError","iterErrorText","Number","isInteger","hasError","initialX","setInitialX","solve","isValidMath","i","evaluate","x","Math","abs","push","runTour","setRunTour","openErrorSnackbar","setOpenErrorSnackbar","errorSnackbarClose","reason","cascade","disabled","mathField","mathquillDidMount","type","parseInt","error","toString","helperText","parseFloat","arrow","placement","aria-label","onClick","scrollToFirstStep","run","steps","continuous","showSkipButton","locale","last","callback","state","action","open","autoHideDuration","onClose","DialogTitle","withStyles","root","closeButton","top","grey","props","children","classes","other","disableTypography","DialogContent","defaultIteration","desmosDiv","useRef","updateGraph","useCallback","style","keypad","expressions","expressionsTopbar","component","ref","NewtonDesmos","openDialog","setOpenDialog","handleClose","endIcon","scroll","maxWidth","fullScreen","dividers"],"mappings":"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","file":"static/js/11.253bbc4a.chunk.js","sourcesContent":["import {isValidMath, mathjsToLatex, formatLatex} from \"../../utils\";\r\nimport React, {useState, useEffect} from \"react\";\r\nimport Header from \"../../header/Header\";\r\nimport DesmosGraph from \"./DesmosGraph\";\r\nimport * as Desmos from 'desmos';\r\n\r\nimport { addStyles, EditableMathField } from 'react-mathquill';\r\nimport { parse, derivative } from 'mathjs';\r\nimport { MathComponent } from 'mathjax-react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Joyride, { Step as JoyrideStep, CallBackProps as JoyrideCallBackProps} from \"react-joyride\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { Fade, Zoom, Slide } from \"react-awesome-reveal\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst TOUR_STEPS: JoyrideStep[] = [\r\n    {\r\n        target: \".function-input\",\r\n        title: \"Function\",\r\n        content:\r\n        \"Type a math function which only has the variable x. cos(x), sin(x) and e^x are supported.\",\r\n        disableBeacon: true,\r\n    },\r\n    {\r\n        target: \".derivative-input\",\r\n        title: \"Derivative\",\r\n        content:\r\n            \"The function's derivative will be shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-input\",\r\n        title: \"Iterations\",\r\n        content:\r\n            \"Specify the number of iterations to apply Newton's method.\",\r\n    },\r\n    {\r\n        target: \".initialX-input\",\r\n        title: \"Initial x value\",\r\n        content:\r\n            \"Specify the initial/starting value of x.\",\r\n    },\r\n    {\r\n        target: \".results\",\r\n        title: \"Results\",\r\n        content:\r\n            \"The results are shown here.\",\r\n    },\r\n    {\r\n        target: \".iteration-slider\",\r\n        title: \"Iteration slider\",\r\n        content:\r\n            \"Change the slider to view the result of any iteration.\",\r\n    },\r\n    {\r\n        target: \".step-math\",\r\n        title: \"Steps\",\r\n        content:\r\n            \"The steps for each iteration are shown here.\",\r\n    },\r\n    {\r\n        target: \".graph-button\",\r\n        title: \"View graph\",\r\n        content:\r\n            \"Click this to visualise the results.\",\r\n    },\r\n];\r\n\r\n// Styles\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.primary,\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    \"& > *\": {\r\n        margin: theme.spacing(1)\r\n    }\r\n  },\r\n  card: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n  cardContent: {\r\n    overflow: 'auto',\r\n    \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n    }\r\n  },\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(4),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\naddStyles(); // inserts the required css to the <head> block for mathquill\r\n\r\nfunction NonlinearNewton({methodName}) {\r\n    useEffect(() => {\r\n        // Set webpage title\r\n        document.title = methodName;\r\n    });\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    // Derivative\r\n    // Another sample would be: `3x^2+2x-8`\r\n    const [functionLatex, setFunctionLatex] = useState(String.raw`x-\\cos\\left( x\\right)`);\r\n    const [functionText, setFunctionText] = useState('');\r\n\r\n    let functionValue, derivValue, derivLatex;\r\n    let functionError = false;\r\n    let functionErrorText = \"\";\r\n    try {\r\n        functionValue = parse(functionText);\r\n        derivValue = derivative(functionText, 'x');\r\n        derivLatex = mathjsToLatex(derivValue);\r\n    }\r\n    catch {\r\n        functionError = true;\r\n        functionErrorText = \"Invalid equation!\";\r\n    }\r\n\r\n    // Iterations\r\n    const [iterations, setIterations] = useState(10);\r\n    let iterError = false;\r\n    let iterErrorText = \"\";\r\n    if (!Number.isInteger(iterations) || iterations <= 0) {\r\n        iterError = true;\r\n        iterErrorText = \"Iterations must be a positive integer!\";\r\n    }\r\n\r\n    let hasError = functionError || iterError;\r\n\r\n    // Initial x\r\n    const [initialX, setInitialX] = useState(0.0);\r\n\r\n    // Solve\r\n    let solve = false;\r\n    let results = [];\r\n    if (isValidMath(functionValue) && !hasError) {\r\n        solve = true;\r\n        for (let i = 0; i < iterations; i++) {\r\n            let previousX = (i === 0) ? initialX: results[i - 1].newX;\r\n            let funcResult, derivResult;\r\n            try {\r\n                funcResult = functionValue.evaluate({x : previousX});\r\n                derivResult = derivValue.evaluate({x : previousX});\r\n            }\r\n            catch {\r\n                hasError = true;\r\n                functionError = true;\r\n                functionErrorText = \"Only variable x is allowed!\";\r\n                solve = false;\r\n                break;\r\n            }\r\n            \r\n            let newX = previousX - funcResult / derivResult;\r\n            let errorX = Math.abs(newX - previousX);\r\n            results.push({\r\n                previousX,\r\n                funcResult,\r\n                derivResult,\r\n                newX,\r\n                errorX,\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        solve = false;\r\n    }\r\n\r\n    // Joyride Tour\r\n    const [runTour, setRunTour] = useState(false);\r\n    const openHelp = () => {\r\n        if (hasError) {\r\n            setOpenErrorSnackbar(true);\r\n        }\r\n        else {\r\n            setRunTour(true)\r\n        }\r\n    };\r\n    const joyrideCallback = (state: JoyrideCallBackProps) => {\r\n        if (state.action === \"reset\" || state.action === \"close\") {\r\n            setRunTour(false);\r\n        }\r\n    };\r\n    const [openErrorSnackbar, setOpenErrorSnackbar] = useState(false);\r\n\r\n    const errorSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenErrorSnackbar(false);\r\n    };\r\n\r\n    let params = {functionValue, derivValue, iterations, results};\r\n    \r\n    return (\r\n        <>\r\n            <Header methodName = {methodName} />\r\n            <Paper className={styleClasses.paper}>\r\n                <Container className={styleClasses.container}>\r\n                <Zoom duration={500} triggerOnce cascade>\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"function-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Function:\r\n                                    </Typography>\r\n                                    <EditableMathField\r\n                                        disabled={false}\r\n                                        latex={functionLatex}\r\n                                        onChange={(mathField) => {\r\n                                            setFunctionText(mathField.text());\r\n                                            setFunctionLatex(mathField.latex());\r\n                                        }}\r\n                                        mathquillDidMount={(mathField) => {\r\n                                            setFunctionText(mathField.text())\r\n                                        }}\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"derivative-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Derivative:\r\n                                    </Typography>\r\n                                    <Collapse in={functionError}>\r\n                                        <Alert severity=\"error\">\r\n                                            {functionErrorText}\r\n                                        </Alert>\r\n                                    </Collapse>\r\n                                    <Collapse in={!functionError}>\r\n                                        {!functionError && <Fade triggerOnce><MathComponent tex={derivLatex}/></Fade>}\r\n                                    </Collapse>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"iteration-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Iterations:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setIterations(parseInt(event.target.value))}\r\n                                        error={iterError}\r\n                                        label={iterError?\"Error\":\"\"}\r\n                                        defaultValue={iterations.toString()}\r\n                                        helperText={iterErrorText}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid xs item className=\"initialX-input\">\r\n                            <Card className={styleClasses.card}>\r\n                                <CardContent className={styleClasses.cardContent}>\r\n                                    <Typography variant=\"h6\">\r\n                                        Initial x value:\r\n                                    </Typography>\r\n                                    <TextField\r\n                                        disabled={false}\r\n                                        type=\"number\"\r\n                                        onChange={(event)=>setInitialX(parseFloat(event.target.value))}\r\n                                        label={\"\"}\r\n                                        defaultValue={initialX.toString()}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Zoom>\r\n                </Container>\r\n                <Divider  />\r\n\r\n            </Paper>\r\n            \r\n            <Collapse in={solve}>\r\n                <Fade triggerOnce>\r\n                    <Paper className={styleClasses.paper}>\r\n                        {solve && <Steps params={params}/>}\r\n                    </Paper>\r\n                </Fade>\r\n            </Collapse>\r\n            <Tooltip arrow title=\"Help\" placement=\"top\">\r\n                <Fab color=\"secondary\" aria-label=\"help\" className={styleClasses.fab} onClick={openHelp}>\r\n                    <HelpIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Joyride\r\n                scrollToFirstStep \r\n                run={runTour}\r\n                steps={TOUR_STEPS}\r\n                continuous={true}\r\n                showSkipButton={true}\r\n                    locale={{\r\n                    last: \"End tour\",\r\n                }}\r\n                callback={joyrideCallback}\r\n            />\r\n            <Snackbar open={openErrorSnackbar} autoHideDuration={2000} onClose={errorSnackbarClose}>\r\n                <Alert onClose={errorSnackbarClose} severity=\"error\">\r\n                    There is an error with the {functionError?\"function\":\"iterations\"}.\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Steps({params}) {\r\n\r\n    const styleClasses = useStyles();\r\n\r\n    const [currentIteration, setCurrentIteration] = useState(1);\r\n\r\n    let hasError = false;\r\n    let errorText = \"\";\r\n\r\n    let results = params.results;\r\n    let currentResult = results[currentIteration - 1];\r\n\r\n    let latexContent, graphCallback;\r\n\r\n    if (currentIteration > params.iterations) {\r\n        setCurrentIteration(params.iterations);\r\n    }\r\n    else {\r\n        let previousXLatex = String.raw`x_{${currentIteration - 1}}`;\r\n        let newXLatex = String.raw`x_{${currentIteration}}`;\r\n        latexContent =\r\n        String.raw`\r\n        \\displaystyle\r\n        \\begin{array}{lll}\r\n        \\\\ ${previousXLatex} &=& ${formatLatex(currentResult.previousX)}\r\n        \\\\ f(${previousXLatex}) &=& ${formatLatex(currentResult.funcResult)}\r\n        \\\\ f'(${previousXLatex}) &=& ${formatLatex(currentResult.derivResult)}\r\n        \\\\ ${newXLatex} &=& ${previousXLatex} - \\frac{f(${previousXLatex})}{f'(${previousXLatex})}\r\n        \\\\                       &=& ${formatLatex(currentResult.newX)}\r\n        \\\\ Error &=& |${newXLatex} - ${previousXLatex}|\r\n        \\\\       &=& |${formatLatex(currentResult.errorX)}|\r\n        \\end{array}\r\n        `;\r\n\r\n        graphCallback = (calculator, currentResult) => {\r\n            calculator.current.setExpression({ id: 'function', color: Desmos.Colors.BLUE, latex: mathjsToLatex(params.functionValue)});\r\n            calculator.current.setExpression({ id: 'derivative', color: Desmos.Colors.GREEN, lineStyle: Desmos.Styles.DOTTED, latex:\r\n                `(y-${formatLatex(currentResult.funcResult)})/(x-${formatLatex(currentResult.previousX)})=${formatLatex(currentResult.derivResult)}` });\r\n            calculator.current.setExpression({ id: 'initialX', color: Desmos.Colors.ORANGE, pointStyle: Desmos.Styles.POINT, label: \"initialX\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.previousX)}, ${formatLatex(currentResult.funcResult)})` });\r\n            calculator.current.setExpression({ id: 'root', color: Desmos.Colors.RED, pointStyle: Desmos.Styles.POINT, label: \"Root\", showLabel:true, latex:\r\n                `(${formatLatex(currentResult.newX)}, 0)` });\r\n        }\r\n    }\r\n\r\n    const smallScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    \r\n    return (\r\n        <Container className={styleClasses.container}>\r\n\r\n            <Collapse in={hasError}>\r\n                <Alert severity=\"error\">\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={!hasError}>\r\n                <Grid className=\"results\" container direction={smallScreen?\"column\":\"row\"} alignItems=\"center\" justify=\"space-evenly\">\r\n                    <Grid xs item className=\"iteration-slider\">\r\n                        <Slide direction=\"left\" triggerOnce>\r\n                            <Box id=\"iteration-slider\" height={smallScreen?null:\"20rem\"} width={smallScreen?\"70vw\":null}>\r\n                                <Slider\r\n                                    orientation={smallScreen?\"horizontal\":\"vertical\"}\r\n                                    onChange={(event, value) => {setCurrentIteration(value)}}\r\n                                    defaultValue={1}\r\n                                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={params.iterations}\r\n                                    valueLabelDisplay=\"on\"\r\n                                />\r\n                            </Box>\r\n                        </Slide>\r\n                    </Grid>\r\n                    <Grid xs item container spacing={1} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                        <Grid xs item className=\"step-math\">\r\n                            <Zoom duration={500} triggerOnce>\r\n                                <Card className={styleClasses.card}>\r\n                                    <CardContent className={styleClasses.cardContent}>\r\n                                        <Typography variant=\"h6\">\r\n                                            Iteration {currentIteration}:\r\n                                        </Typography>\r\n                                        <MathComponent tex={latexContent}/>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            </Zoom>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid xs item className=\"graph-button\">\r\n                        <Slide direction=\"right\" triggerOnce>\r\n                            <DesmosGraph params={{currentIteration, graphCallback, smallScreen, ...params}} />\r\n                        </Slide>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Collapse>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NonlinearNewton;","import {formatLatex, mathjsToLatex} from \"../../utils\";\r\nimport {React, useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport { MathComponent } from 'mathjax-react';\r\nimport * as Desmos from 'desmos';\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styleClasses = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styleClasses)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n      <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent =  withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))((props) => {\r\n    const params = props.params;\r\n    const [currentIteration, setCurrentIteration] = useState(params.currentIteration);\r\n    const defaultIteration = params.currentIteration;\r\n    const currentResult = params.results[currentIteration - 1];\r\n    const desmosDiv = useRef(null);\r\n    const calculator = useRef(null);\r\n\r\n    const updateGraph = useCallback(() => {\r\n        if (calculator.current){\r\n            params.graphCallback(calculator, currentResult);\r\n        }\r\n    }, [calculator, currentResult, params]);\r\n    updateGraph();\r\n\r\n    useEffect(() => {\r\n        if (desmosDiv.current){\r\n            const smallScreen = props.smallScreen;\r\n            desmosDiv.current.style.width = smallScreen?'90vw':'60vw';\r\n            desmosDiv.current.style.height = smallScreen?'90vh':'60vh';\r\n            const desmosOptions = {\r\n                keypad: false,\r\n                expressions: false,\r\n                expressionsTopbar: false,\r\n            };\r\n            calculator.current = Desmos.GraphingCalculator(desmosDiv.current, desmosOptions);\r\n            updateGraph();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n            <Box component=\"div\" overflow=\"visible\">\r\n                <MathComponent tex={`${mathjsToLatex(params.functionValue)}`}/>\r\n            </Box>\r\n            <Typography variant=\"h6\">\r\n                Iteration {currentIteration}:\r\n            </Typography>\r\n            <Box width=\"70%\">\r\n                <Slider\r\n                    orientation=\"horizontal\"\r\n                    onChange={(event, value) => setCurrentIteration(value)}\r\n                    defaultValue={defaultIteration}\r\n                    aria-labelledby=\"discrete-slider-small-steps\"\r\n                    step={1}\r\n                    marks\r\n                    min={1}\r\n                    max={params.iterations}\r\n                    valueLabelDisplay=\"auto\"\r\n                />\r\n            </Box>\r\n            <Grid item>\r\n                <div ref={desmosDiv}>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n});\r\n\r\nfunction NewtonDesmos({params, smallScreen}) {\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n      const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" endIcon={<TimelineIcon/>} onClick={handleClickOpen}>\r\n                View Graph\r\n            </Button>\r\n            \r\n            <Dialog scroll='paper' maxWidth={false} fullScreen={smallScreen} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={openDialog}>\r\n                <Fade>\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} />\r\n                    <DialogContent dividers smallScreen={smallScreen} params={params} />\r\n                </Fade>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewtonDesmos;"],"sourceRoot":""}